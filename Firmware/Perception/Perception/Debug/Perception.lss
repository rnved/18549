
Perception.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000987c  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000008c  1001187c  1001187c  0001187c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001abc  10011908  10011908  00011908  2**2
                  ALLOC
  3 .stack        00000804  100133c4  100133c4  00011908  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011908  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00011930  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020fa4  00000000  00000000  0001198b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002594  00000000  00000000  0003292f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005830  00000000  00000000  00034ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000680  00000000  00000000  0003a6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000738  00000000  00000000  0003ad73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006328  00000000  00000000  0003b4ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009dec  00000000  00000000  000417d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00109314  00000000  00000000  0004b5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ac0  00000000  00000000  001548d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001187c 	.word	0x1001187c
10008068:	1001187c 	.word	0x1001187c
1000806c:	10011908 	.word	0x10011908
10008070:	100133c4 	.word	0x100133c4
10008074:	10011908 	.word	0x10011908
10008078:	10011880 	.word	0x10011880
1000807c:	1001190c 	.word	0x1001190c
10008080:	1000f76d 	.word	0x1000f76d
10008084:	1000b7b1 	.word	0x1000b7b1

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10011908 	.word	0x10011908
100080a8:	00000000 	.word	0x00000000
100080ac:	1001187c 	.word	0x1001187c

100080b0 <frame_dummy>:
100080b0:	b508      	push	{r3, lr}
100080b2:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4807      	ldr	r0, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4908      	ldr	r1, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd08      	pop	{r3, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1001187c 	.word	0x1001187c
100080dc:	1001190c 	.word	0x1001190c
100080e0:	1001187c 	.word	0x1001187c
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
100080e8:	b508      	push	{r3, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
100080ea:	4b0d      	ldr	r3, [pc, #52]	; (10008120 <dualtimer_isr_handler+0x38>)
100080ec:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
100080ee:	2b00      	cmp	r3, #0
100080f0:	d007      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
100080f2:	2201      	movs	r2, #1
100080f4:	4b0a      	ldr	r3, [pc, #40]	; (10008120 <dualtimer_isr_handler+0x38>)
100080f6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
100080f8:	4b0a      	ldr	r3, [pc, #40]	; (10008124 <dualtimer_isr_handler+0x3c>)
100080fa:	681b      	ldr	r3, [r3, #0]
100080fc:	2b00      	cmp	r3, #0
100080fe:	d000      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008100:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008102:	2334      	movs	r3, #52	; 0x34
10008104:	4a06      	ldr	r2, [pc, #24]	; (10008120 <dualtimer_isr_handler+0x38>)
10008106:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008108:	2b00      	cmp	r3, #0
1000810a:	d007      	beq.n	1000811c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000810c:	2101      	movs	r1, #1
1000810e:	232c      	movs	r3, #44	; 0x2c
10008110:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008112:	4b05      	ldr	r3, [pc, #20]	; (10008128 <dualtimer_isr_handler+0x40>)
10008114:	681b      	ldr	r3, [r3, #0]
10008116:	2b00      	cmp	r3, #0
10008118:	d000      	beq.n	1000811c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000811a:	4798      	blx	r3
	}
}
1000811c:	bd08      	pop	{r3, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	40001000 	.word	0x40001000
10008124:	10011924 	.word	0x10011924
10008128:	10011928 	.word	0x10011928

1000812c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000812c:	2301      	movs	r3, #1
1000812e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008130:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008132:	2202      	movs	r2, #2
10008134:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008136:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008138:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000813a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000813c:	2200      	movs	r2, #0
1000813e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008140:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008142:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008144:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008146:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008148:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000814a:	7602      	strb	r2, [r0, #24]
}
1000814c:	4770      	bx	lr
1000814e:	46c0      	nop			; (mov r8, r8)

10008150 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008150:	2800      	cmp	r0, #0
10008152:	d107      	bne.n	10008164 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008154:	2900      	cmp	r1, #0
10008156:	d102      	bne.n	1000815e <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10008158:	4b06      	ldr	r3, [pc, #24]	; (10008174 <dualtimer_set_counter+0x24>)
1000815a:	601a      	str	r2, [r3, #0]
1000815c:	e009      	b.n	10008172 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000815e:	4b05      	ldr	r3, [pc, #20]	; (10008174 <dualtimer_set_counter+0x24>)
10008160:	619a      	str	r2, [r3, #24]
10008162:	e006      	b.n	10008172 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008164:	2900      	cmp	r1, #0
10008166:	d102      	bne.n	1000816e <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008168:	4b02      	ldr	r3, [pc, #8]	; (10008174 <dualtimer_set_counter+0x24>)
1000816a:	621a      	str	r2, [r3, #32]
1000816c:	e001      	b.n	10008172 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000816e:	4b01      	ldr	r3, [pc, #4]	; (10008174 <dualtimer_set_counter+0x24>)
10008170:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008172:	4770      	bx	lr
10008174:	40001000 	.word	0x40001000

10008178 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008178:	2800      	cmp	r0, #0
1000817a:	d105      	bne.n	10008188 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000817c:	4a06      	ldr	r2, [pc, #24]	; (10008198 <dualtimer_enable+0x20>)
1000817e:	7a11      	ldrb	r1, [r2, #8]
10008180:	2380      	movs	r3, #128	; 0x80
10008182:	430b      	orrs	r3, r1
10008184:	7213      	strb	r3, [r2, #8]
10008186:	e005      	b.n	10008194 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008188:	4903      	ldr	r1, [pc, #12]	; (10008198 <dualtimer_enable+0x20>)
1000818a:	2228      	movs	r2, #40	; 0x28
1000818c:	5c88      	ldrb	r0, [r1, r2]
1000818e:	2380      	movs	r3, #128	; 0x80
10008190:	4303      	orrs	r3, r0
10008192:	548b      	strb	r3, [r1, r2]
	}
}
10008194:	4770      	bx	lr
10008196:	46c0      	nop			; (mov r8, r8)
10008198:	40001000 	.word	0x40001000

1000819c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000819c:	2800      	cmp	r0, #0
1000819e:	d105      	bne.n	100081ac <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081a0:	4a06      	ldr	r2, [pc, #24]	; (100081bc <dualtimer_disable+0x20>)
100081a2:	7a11      	ldrb	r1, [r2, #8]
100081a4:	237f      	movs	r3, #127	; 0x7f
100081a6:	400b      	ands	r3, r1
100081a8:	7213      	strb	r3, [r2, #8]
100081aa:	e005      	b.n	100081b8 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081ac:	4903      	ldr	r1, [pc, #12]	; (100081bc <dualtimer_disable+0x20>)
100081ae:	2228      	movs	r2, #40	; 0x28
100081b0:	5c88      	ldrb	r0, [r1, r2]
100081b2:	237f      	movs	r3, #127	; 0x7f
100081b4:	4003      	ands	r3, r0
100081b6:	548b      	strb	r3, [r1, r2]
	}
}
100081b8:	4770      	bx	lr
100081ba:	46c0      	nop			; (mov r8, r8)
100081bc:	40001000 	.word	0x40001000

100081c0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081c0:	b538      	push	{r3, r4, r5, lr}
100081c2:	1c04      	adds	r4, r0, #0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081c4:	2004      	movs	r0, #4
100081c6:	4b39      	ldr	r3, [pc, #228]	; (100082ac <dualtimer_init+0xec>)
100081c8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081ca:	7823      	ldrb	r3, [r4, #0]
100081cc:	2b00      	cmp	r3, #0
100081ce:	d102      	bne.n	100081d6 <dualtimer_init+0x16>
100081d0:	7b23      	ldrb	r3, [r4, #12]
100081d2:	2b00      	cmp	r3, #0
100081d4:	d065      	beq.n	100082a2 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081d6:	4936      	ldr	r1, [pc, #216]	; (100082b0 <dualtimer_init+0xf0>)
100081d8:	68ca      	ldr	r2, [r1, #12]
100081da:	2320      	movs	r3, #32
100081dc:	4313      	orrs	r3, r2
100081de:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
100081e0:	7e23      	ldrb	r3, [r4, #24]
100081e2:	2203      	movs	r2, #3
100081e4:	4013      	ands	r3, r2
100081e6:	011a      	lsls	r2, r3, #4
100081e8:	698b      	ldr	r3, [r1, #24]
100081ea:	2030      	movs	r0, #48	; 0x30
100081ec:	4383      	bics	r3, r0
100081ee:	4313      	orrs	r3, r2
100081f0:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
100081f2:	7823      	ldrb	r3, [r4, #0]
100081f4:	2b00      	cmp	r3, #0
100081f6:	d026      	beq.n	10008246 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081f8:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
100081fa:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081fc:	2b00      	cmp	r3, #0
100081fe:	d003      	beq.n	10008208 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008200:	3b02      	subs	r3, #2
10008202:	425d      	negs	r5, r3
10008204:	415d      	adcs	r5, r3
10008206:	01a9      	lsls	r1, r5, #6
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
10008208:	78e2      	ldrb	r2, [r4, #3]
1000820a:	0092      	lsls	r2, r2, #2
1000820c:	250c      	movs	r5, #12
1000820e:	402a      	ands	r2, r5
10008210:	78a3      	ldrb	r3, [r4, #2]
10008212:	005b      	lsls	r3, r3, #1
10008214:	3d0a      	subs	r5, #10
10008216:	402b      	ands	r3, r5
10008218:	431a      	orrs	r2, r3
1000821a:	1c15      	adds	r5, r2, #0
1000821c:	430d      	orrs	r5, r1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000821e:	7923      	ldrb	r3, [r4, #4]
10008220:	2b00      	cmp	r3, #0
10008222:	d001      	beq.n	10008228 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008224:	2320      	movs	r3, #32
10008226:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008228:	4b22      	ldr	r3, [pc, #136]	; (100082b4 <dualtimer_init+0xf4>)
1000822a:	68a2      	ldr	r2, [r4, #8]
1000822c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000822e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
10008230:	491f      	ldr	r1, [pc, #124]	; (100082b0 <dualtimer_init+0xf0>)
10008232:	22c4      	movs	r2, #196	; 0xc4
10008234:	0052      	lsls	r2, r2, #1
10008236:	5c88      	ldrb	r0, [r1, r2]
10008238:	2301      	movs	r3, #1
1000823a:	4303      	orrs	r3, r0
1000823c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000823e:	2000      	movs	r0, #0
10008240:	4b1d      	ldr	r3, [pc, #116]	; (100082b8 <dualtimer_init+0xf8>)
10008242:	4798      	blx	r3
10008244:	e000      	b.n	10008248 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008246:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008248:	7b23      	ldrb	r3, [r4, #12]
1000824a:	2b00      	cmp	r3, #0
1000824c:	d029      	beq.n	100082a2 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000824e:	7b63      	ldrb	r3, [r4, #13]
10008250:	2b00      	cmp	r3, #0
10008252:	d005      	beq.n	10008260 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008254:	2b01      	cmp	r3, #1
10008256:	d005      	beq.n	10008264 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008258:	2b02      	cmp	r3, #2
1000825a:	d104      	bne.n	10008266 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000825c:	2540      	movs	r5, #64	; 0x40
1000825e:	e002      	b.n	10008266 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008260:	2501      	movs	r5, #1
10008262:	e000      	b.n	10008266 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008264:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
10008266:	7be3      	ldrb	r3, [r4, #15]
10008268:	009b      	lsls	r3, r3, #2
1000826a:	210c      	movs	r1, #12
1000826c:	4019      	ands	r1, r3
1000826e:	7ba2      	ldrb	r2, [r4, #14]
10008270:	0052      	lsls	r2, r2, #1
10008272:	2302      	movs	r3, #2
10008274:	4013      	ands	r3, r2
10008276:	430b      	orrs	r3, r1
10008278:	431d      	orrs	r5, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000827a:	7c23      	ldrb	r3, [r4, #16]
1000827c:	2b00      	cmp	r3, #0
1000827e:	d001      	beq.n	10008284 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008280:	2320      	movs	r3, #32
10008282:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008284:	6962      	ldr	r2, [r4, #20]
10008286:	4b0b      	ldr	r3, [pc, #44]	; (100082b4 <dualtimer_init+0xf4>)
10008288:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000828a:	2228      	movs	r2, #40	; 0x28
1000828c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
1000828e:	4908      	ldr	r1, [pc, #32]	; (100082b0 <dualtimer_init+0xf0>)
10008290:	3261      	adds	r2, #97	; 0x61
10008292:	32ff      	adds	r2, #255	; 0xff
10008294:	5c88      	ldrb	r0, [r1, r2]
10008296:	2302      	movs	r3, #2
10008298:	4303      	orrs	r3, r0
1000829a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000829c:	2001      	movs	r0, #1
1000829e:	4b06      	ldr	r3, [pc, #24]	; (100082b8 <dualtimer_init+0xf8>)
100082a0:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082a2:	201e      	movs	r0, #30
100082a4:	4905      	ldr	r1, [pc, #20]	; (100082bc <dualtimer_init+0xfc>)
100082a6:	4b06      	ldr	r3, [pc, #24]	; (100082c0 <dualtimer_init+0x100>)
100082a8:	4798      	blx	r3
}
100082aa:	bd38      	pop	{r3, r4, r5, pc}
100082ac:	10008821 	.word	0x10008821
100082b0:	4000b000 	.word	0x4000b000
100082b4:	40001000 	.word	0x40001000
100082b8:	10008179 	.word	0x10008179
100082bc:	100080e9 	.word	0x100080e9
100082c0:	10008c89 	.word	0x10008c89

100082c4 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
100082c4:	2800      	cmp	r0, #0
100082c6:	d102      	bne.n	100082ce <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
100082c8:	4b02      	ldr	r3, [pc, #8]	; (100082d4 <dualtimer_register_callback+0x10>)
100082ca:	6019      	str	r1, [r3, #0]
100082cc:	e001      	b.n	100082d2 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
100082ce:	4b02      	ldr	r3, [pc, #8]	; (100082d8 <dualtimer_register_callback+0x14>)
100082d0:	6019      	str	r1, [r3, #0]
	}
}
100082d2:	4770      	bx	lr
100082d4:	10011924 	.word	0x10011924
100082d8:	10011928 	.word	0x10011928

100082dc <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
100082dc:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
100082de:	0a0c      	lsrs	r4, r1, #8

	pinmux_sel &= 0xFF;
100082e0:	23ff      	movs	r3, #255	; 0xff
100082e2:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
100082e4:	2807      	cmp	r0, #7
100082e6:	d835      	bhi.n	10008354 <gpio_pinmux_cofiguration+0x78>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
100082e8:	4a51      	ldr	r2, [pc, #324]	; (10008430 <gpio_pinmux_cofiguration+0x154>)
100082ea:	6c55      	ldr	r5, [r2, #68]	; 0x44
100082ec:	3bf8      	subs	r3, #248	; 0xf8
100082ee:	4003      	ands	r3, r0
100082f0:	009b      	lsls	r3, r3, #2
100082f2:	2607      	movs	r6, #7
100082f4:	409e      	lsls	r6, r3
100082f6:	43b5      	bics	r5, r6
100082f8:	6455      	str	r5, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100082fa:	6c55      	ldr	r5, [r2, #68]	; 0x44
100082fc:	1c0e      	adds	r6, r1, #0
100082fe:	409e      	lsls	r6, r3
10008300:	1c33      	adds	r3, r6, #0
10008302:	432b      	orrs	r3, r5
10008304:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008306:	2901      	cmp	r1, #1
10008308:	d000      	beq.n	1000830c <gpio_pinmux_cofiguration+0x30>
1000830a:	e090      	b.n	1000842e <gpio_pinmux_cofiguration+0x152>
			if (gpio_pin <= 3) {
1000830c:	2803      	cmp	r0, #3
1000830e:	d810      	bhi.n	10008332 <gpio_pinmux_cofiguration+0x56>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008310:	1c11      	adds	r1, r2, #0
10008312:	22d0      	movs	r2, #208	; 0xd0
10008314:	0052      	lsls	r2, r2, #1
10008316:	588d      	ldr	r5, [r1, r2]
10008318:	2303      	movs	r3, #3
1000831a:	4018      	ands	r0, r3
1000831c:	00c0      	lsls	r0, r0, #3
1000831e:	333c      	adds	r3, #60	; 0x3c
10008320:	4083      	lsls	r3, r0
10008322:	439d      	bics	r5, r3
10008324:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008326:	588b      	ldr	r3, [r1, r2]
10008328:	4084      	lsls	r4, r0
1000832a:	1c20      	adds	r0, r4, #0
1000832c:	4318      	orrs	r0, r3
1000832e:	5088      	str	r0, [r1, r2]
10008330:	e07d      	b.n	1000842e <gpio_pinmux_cofiguration+0x152>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008332:	493f      	ldr	r1, [pc, #252]	; (10008430 <gpio_pinmux_cofiguration+0x154>)
10008334:	22d2      	movs	r2, #210	; 0xd2
10008336:	0052      	lsls	r2, r2, #1
10008338:	588d      	ldr	r5, [r1, r2]
1000833a:	2303      	movs	r3, #3
1000833c:	4018      	ands	r0, r3
1000833e:	00c0      	lsls	r0, r0, #3
10008340:	333c      	adds	r3, #60	; 0x3c
10008342:	4083      	lsls	r3, r0
10008344:	439d      	bics	r5, r3
10008346:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008348:	588b      	ldr	r3, [r1, r2]
1000834a:	4084      	lsls	r4, r0
1000834c:	1c20      	adds	r0, r4, #0
1000834e:	4318      	orrs	r0, r3
10008350:	5088      	str	r0, [r1, r2]
10008352:	e06c      	b.n	1000842e <gpio_pinmux_cofiguration+0x152>
			}
		}
	} else if (gpio_pin <= 15) {
10008354:	280f      	cmp	r0, #15
10008356:	d834      	bhi.n	100083c2 <gpio_pinmux_cofiguration+0xe6>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008358:	4a35      	ldr	r2, [pc, #212]	; (10008430 <gpio_pinmux_cofiguration+0x154>)
1000835a:	6c95      	ldr	r5, [r2, #72]	; 0x48
1000835c:	2307      	movs	r3, #7
1000835e:	4003      	ands	r3, r0
10008360:	009b      	lsls	r3, r3, #2
10008362:	2607      	movs	r6, #7
10008364:	409e      	lsls	r6, r3
10008366:	43b5      	bics	r5, r6
10008368:	6495      	str	r5, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000836a:	6c95      	ldr	r5, [r2, #72]	; 0x48
1000836c:	1c0e      	adds	r6, r1, #0
1000836e:	409e      	lsls	r6, r3
10008370:	1c33      	adds	r3, r6, #0
10008372:	432b      	orrs	r3, r5
10008374:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008376:	2901      	cmp	r1, #1
10008378:	d159      	bne.n	1000842e <gpio_pinmux_cofiguration+0x152>
			if (gpio_pin <= 11) {
1000837a:	280b      	cmp	r0, #11
1000837c:	d810      	bhi.n	100083a0 <gpio_pinmux_cofiguration+0xc4>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000837e:	1c11      	adds	r1, r2, #0
10008380:	22d4      	movs	r2, #212	; 0xd4
10008382:	0052      	lsls	r2, r2, #1
10008384:	588d      	ldr	r5, [r1, r2]
10008386:	2303      	movs	r3, #3
10008388:	4018      	ands	r0, r3
1000838a:	00c0      	lsls	r0, r0, #3
1000838c:	333c      	adds	r3, #60	; 0x3c
1000838e:	4083      	lsls	r3, r0
10008390:	439d      	bics	r5, r3
10008392:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008394:	588b      	ldr	r3, [r1, r2]
10008396:	4084      	lsls	r4, r0
10008398:	1c20      	adds	r0, r4, #0
1000839a:	4318      	orrs	r0, r3
1000839c:	5088      	str	r0, [r1, r2]
1000839e:	e046      	b.n	1000842e <gpio_pinmux_cofiguration+0x152>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100083a0:	4923      	ldr	r1, [pc, #140]	; (10008430 <gpio_pinmux_cofiguration+0x154>)
100083a2:	22d6      	movs	r2, #214	; 0xd6
100083a4:	0052      	lsls	r2, r2, #1
100083a6:	588d      	ldr	r5, [r1, r2]
100083a8:	2303      	movs	r3, #3
100083aa:	4018      	ands	r0, r3
100083ac:	00c0      	lsls	r0, r0, #3
100083ae:	333c      	adds	r3, #60	; 0x3c
100083b0:	4083      	lsls	r3, r0
100083b2:	439d      	bics	r5, r3
100083b4:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100083b6:	588b      	ldr	r3, [r1, r2]
100083b8:	4084      	lsls	r4, r0
100083ba:	1c20      	adds	r0, r4, #0
100083bc:	4318      	orrs	r0, r3
100083be:	5088      	str	r0, [r1, r2]
100083c0:	e035      	b.n	1000842e <gpio_pinmux_cofiguration+0x152>
			}
		}
	} else if (gpio_pin <= 23) {
100083c2:	2817      	cmp	r0, #23
100083c4:	d833      	bhi.n	1000842e <gpio_pinmux_cofiguration+0x152>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100083c6:	4a1a      	ldr	r2, [pc, #104]	; (10008430 <gpio_pinmux_cofiguration+0x154>)
100083c8:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
100083ca:	2307      	movs	r3, #7
100083cc:	4003      	ands	r3, r0
100083ce:	009b      	lsls	r3, r3, #2
100083d0:	2607      	movs	r6, #7
100083d2:	409e      	lsls	r6, r3
100083d4:	43b5      	bics	r5, r6
100083d6:	64d5      	str	r5, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100083d8:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
100083da:	1c0e      	adds	r6, r1, #0
100083dc:	409e      	lsls	r6, r3
100083de:	1c33      	adds	r3, r6, #0
100083e0:	432b      	orrs	r3, r5
100083e2:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
100083e4:	2901      	cmp	r1, #1
100083e6:	d122      	bne.n	1000842e <gpio_pinmux_cofiguration+0x152>
			if (gpio_pin <= 19) {
100083e8:	2813      	cmp	r0, #19
100083ea:	d810      	bhi.n	1000840e <gpio_pinmux_cofiguration+0x132>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100083ec:	1c11      	adds	r1, r2, #0
100083ee:	22d8      	movs	r2, #216	; 0xd8
100083f0:	0052      	lsls	r2, r2, #1
100083f2:	588d      	ldr	r5, [r1, r2]
100083f4:	2303      	movs	r3, #3
100083f6:	4018      	ands	r0, r3
100083f8:	00c0      	lsls	r0, r0, #3
100083fa:	333c      	adds	r3, #60	; 0x3c
100083fc:	4083      	lsls	r3, r0
100083fe:	439d      	bics	r5, r3
10008400:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008402:	588b      	ldr	r3, [r1, r2]
10008404:	4084      	lsls	r4, r0
10008406:	1c20      	adds	r0, r4, #0
10008408:	4318      	orrs	r0, r3
1000840a:	5088      	str	r0, [r1, r2]
1000840c:	e00f      	b.n	1000842e <gpio_pinmux_cofiguration+0x152>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000840e:	4a08      	ldr	r2, [pc, #32]	; (10008430 <gpio_pinmux_cofiguration+0x154>)
10008410:	23da      	movs	r3, #218	; 0xda
10008412:	005b      	lsls	r3, r3, #1
10008414:	58d1      	ldr	r1, [r2, r3]
10008416:	2503      	movs	r5, #3
10008418:	4028      	ands	r0, r5
1000841a:	00c0      	lsls	r0, r0, #3
1000841c:	353c      	adds	r5, #60	; 0x3c
1000841e:	4085      	lsls	r5, r0
10008420:	43a9      	bics	r1, r5
10008422:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008424:	58d1      	ldr	r1, [r2, r3]
10008426:	4084      	lsls	r4, r0
10008428:	1c20      	adds	r0, r4, #0
1000842a:	4308      	orrs	r0, r1
1000842c:	50d0      	str	r0, [r2, r3]
			}
		}
	}
}
1000842e:	bd70      	pop	{r4, r5, r6, pc}
10008430:	4000b000 	.word	0x4000b000

10008434 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008434:	2801      	cmp	r0, #1
10008436:	d00d      	beq.n	10008454 <system_clock_config+0x20>
10008438:	2800      	cmp	r0, #0
1000843a:	d002      	beq.n	10008442 <system_clock_config+0xe>
1000843c:	2802      	cmp	r0, #2
1000843e:	d01c      	beq.n	1000847a <system_clock_config+0x46>
10008440:	e02e      	b.n	100084a0 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008442:	4a18      	ldr	r2, [pc, #96]	; (100084a4 <system_clock_config+0x70>)
10008444:	6990      	ldr	r0, [r2, #24]
10008446:	230c      	movs	r3, #12
10008448:	4303      	orrs	r3, r0
1000844a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000844c:	4a16      	ldr	r2, [pc, #88]	; (100084a8 <system_clock_config+0x74>)
1000844e:	4b17      	ldr	r3, [pc, #92]	; (100084ac <system_clock_config+0x78>)
10008450:	601a      	str	r2, [r3, #0]
			break;
10008452:	e01a      	b.n	1000848a <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008454:	4b13      	ldr	r3, [pc, #76]	; (100084a4 <system_clock_config+0x70>)
10008456:	6998      	ldr	r0, [r3, #24]
10008458:	2208      	movs	r2, #8
1000845a:	4302      	orrs	r2, r0
1000845c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000845e:	699a      	ldr	r2, [r3, #24]
10008460:	2004      	movs	r0, #4
10008462:	4382      	bics	r2, r0
10008464:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10008466:	4a12      	ldr	r2, [pc, #72]	; (100084b0 <system_clock_config+0x7c>)
10008468:	6853      	ldr	r3, [r2, #4]
1000846a:	2080      	movs	r0, #128	; 0x80
1000846c:	0300      	lsls	r0, r0, #12
1000846e:	4303      	orrs	r3, r0
10008470:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008472:	4a10      	ldr	r2, [pc, #64]	; (100084b4 <system_clock_config+0x80>)
10008474:	4b0d      	ldr	r3, [pc, #52]	; (100084ac <system_clock_config+0x78>)
10008476:	601a      	str	r2, [r3, #0]
			break;
10008478:	e007      	b.n	1000848a <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000847a:	4a0a      	ldr	r2, [pc, #40]	; (100084a4 <system_clock_config+0x70>)
1000847c:	6993      	ldr	r3, [r2, #24]
1000847e:	200c      	movs	r0, #12
10008480:	4383      	bics	r3, r0
10008482:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008484:	4a08      	ldr	r2, [pc, #32]	; (100084a8 <system_clock_config+0x74>)
10008486:	4b09      	ldr	r3, [pc, #36]	; (100084ac <system_clock_config+0x78>)
10008488:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000848a:	4b06      	ldr	r3, [pc, #24]	; (100084a4 <system_clock_config+0x70>)
1000848c:	699a      	ldr	r2, [r3, #24]
1000848e:	2003      	movs	r0, #3
10008490:	4382      	bics	r2, r0
10008492:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008494:	699a      	ldr	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);
10008496:	4001      	ands	r1, r0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008498:	4311      	orrs	r1, r2
1000849a:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000849c:	2000      	movs	r0, #0
1000849e:	e000      	b.n	100084a2 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
100084a0:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
100084a2:	4770      	bx	lr
100084a4:	4000b000 	.word	0x4000b000
100084a8:	018cba80 	.word	0x018cba80
100084ac:	1001204c 	.word	0x1001204c
100084b0:	4000f000 	.word	0x4000f000
100084b4:	001e8480 	.word	0x001e8480

100084b8 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
100084b8:	4b01      	ldr	r3, [pc, #4]	; (100084c0 <system_clock_get_value+0x8>)
100084ba:	6818      	ldr	r0, [r3, #0]
}
100084bc:	4770      	bx	lr
100084be:	46c0      	nop			; (mov r8, r8)
100084c0:	1001204c 	.word	0x1001204c

100084c4 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
100084c4:	b500      	push	{lr}
	switch (peripheral) {
100084c6:	2835      	cmp	r0, #53	; 0x35
100084c8:	d900      	bls.n	100084cc <system_clock_peripheral_enable+0x8>
100084ca:	e1a2      	b.n	10008812 <system_clock_peripheral_enable+0x34e>
100084cc:	0080      	lsls	r0, r0, #2
100084ce:	4bd2      	ldr	r3, [pc, #840]	; (10008818 <system_clock_peripheral_enable+0x354>)
100084d0:	581b      	ldr	r3, [r3, r0]
100084d2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100084d4:	4ad1      	ldr	r2, [pc, #836]	; (1000881c <system_clock_peripheral_enable+0x358>)
100084d6:	68d1      	ldr	r1, [r2, #12]
100084d8:	2302      	movs	r3, #2
100084da:	430b      	orrs	r3, r1
100084dc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100084de:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
100084e0:	e198      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100084e2:	4ace      	ldr	r2, [pc, #824]	; (1000881c <system_clock_peripheral_enable+0x358>)
100084e4:	68d1      	ldr	r1, [r2, #12]
100084e6:	2304      	movs	r3, #4
100084e8:	430b      	orrs	r3, r1
100084ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100084ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
100084ee:	e191      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100084f0:	4aca      	ldr	r2, [pc, #808]	; (1000881c <system_clock_peripheral_enable+0x358>)
100084f2:	68d1      	ldr	r1, [r2, #12]
100084f4:	2308      	movs	r3, #8
100084f6:	430b      	orrs	r3, r1
100084f8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100084fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
100084fc:	e18a      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100084fe:	4ac7      	ldr	r2, [pc, #796]	; (1000881c <system_clock_peripheral_enable+0x358>)
10008500:	68d1      	ldr	r1, [r2, #12]
10008502:	2310      	movs	r3, #16
10008504:	430b      	orrs	r3, r1
10008506:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008508:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
1000850a:	e183      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000850c:	4ac3      	ldr	r2, [pc, #780]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000850e:	68d1      	ldr	r1, [r2, #12]
10008510:	2320      	movs	r3, #32
10008512:	430b      	orrs	r3, r1
10008514:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008516:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008518:	e17c      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000851a:	4ac0      	ldr	r2, [pc, #768]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000851c:	68d1      	ldr	r1, [r2, #12]
1000851e:	2380      	movs	r3, #128	; 0x80
10008520:	430b      	orrs	r3, r1
10008522:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008524:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008526:	e175      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008528:	4abc      	ldr	r2, [pc, #752]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000852a:	68d3      	ldr	r3, [r2, #12]
1000852c:	2180      	movs	r1, #128	; 0x80
1000852e:	0049      	lsls	r1, r1, #1
10008530:	430b      	orrs	r3, r1
10008532:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008534:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008536:	e16d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008538:	4ab8      	ldr	r2, [pc, #736]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000853a:	68d3      	ldr	r3, [r2, #12]
1000853c:	2180      	movs	r1, #128	; 0x80
1000853e:	0109      	lsls	r1, r1, #4
10008540:	430b      	orrs	r3, r1
10008542:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008544:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008546:	e165      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008548:	4ab4      	ldr	r2, [pc, #720]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000854a:	68d3      	ldr	r3, [r2, #12]
1000854c:	2180      	movs	r1, #128	; 0x80
1000854e:	0149      	lsls	r1, r1, #5
10008550:	430b      	orrs	r3, r1
10008552:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008554:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008556:	e15d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008558:	4ab0      	ldr	r2, [pc, #704]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000855a:	68d3      	ldr	r3, [r2, #12]
1000855c:	2180      	movs	r1, #128	; 0x80
1000855e:	0189      	lsls	r1, r1, #6
10008560:	430b      	orrs	r3, r1
10008562:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008564:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008566:	e155      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008568:	4aac      	ldr	r2, [pc, #688]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000856a:	68d3      	ldr	r3, [r2, #12]
1000856c:	2180      	movs	r1, #128	; 0x80
1000856e:	01c9      	lsls	r1, r1, #7
10008570:	430b      	orrs	r3, r1
10008572:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008574:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008576:	e14d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008578:	4aa8      	ldr	r2, [pc, #672]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000857a:	68d3      	ldr	r3, [r2, #12]
1000857c:	2180      	movs	r1, #128	; 0x80
1000857e:	0209      	lsls	r1, r1, #8
10008580:	430b      	orrs	r3, r1
10008582:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008584:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008586:	e145      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008588:	4aa4      	ldr	r2, [pc, #656]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000858a:	68d3      	ldr	r3, [r2, #12]
1000858c:	2180      	movs	r1, #128	; 0x80
1000858e:	0249      	lsls	r1, r1, #9
10008590:	430b      	orrs	r3, r1
10008592:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008594:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008596:	e13d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008598:	4aa0      	ldr	r2, [pc, #640]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000859a:	68d3      	ldr	r3, [r2, #12]
1000859c:	2180      	movs	r1, #128	; 0x80
1000859e:	0289      	lsls	r1, r1, #10
100085a0:	430b      	orrs	r3, r1
100085a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
100085a6:	e135      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085a8:	4a9c      	ldr	r2, [pc, #624]	; (1000881c <system_clock_peripheral_enable+0x358>)
100085aa:	68d3      	ldr	r3, [r2, #12]
100085ac:	2180      	movs	r1, #128	; 0x80
100085ae:	02c9      	lsls	r1, r1, #11
100085b0:	430b      	orrs	r3, r1
100085b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
100085b6:	e12d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085b8:	4a98      	ldr	r2, [pc, #608]	; (1000881c <system_clock_peripheral_enable+0x358>)
100085ba:	68d3      	ldr	r3, [r2, #12]
100085bc:	2180      	movs	r1, #128	; 0x80
100085be:	0309      	lsls	r1, r1, #12
100085c0:	430b      	orrs	r3, r1
100085c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100085c6:	e125      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085c8:	4a94      	ldr	r2, [pc, #592]	; (1000881c <system_clock_peripheral_enable+0x358>)
100085ca:	68d3      	ldr	r3, [r2, #12]
100085cc:	2180      	movs	r1, #128	; 0x80
100085ce:	0349      	lsls	r1, r1, #13
100085d0:	430b      	orrs	r3, r1
100085d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100085d6:	e11d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085d8:	4a90      	ldr	r2, [pc, #576]	; (1000881c <system_clock_peripheral_enable+0x358>)
100085da:	68d3      	ldr	r3, [r2, #12]
100085dc:	2180      	movs	r1, #128	; 0x80
100085de:	0389      	lsls	r1, r1, #14
100085e0:	430b      	orrs	r3, r1
100085e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100085e6:	e115      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085e8:	4a8c      	ldr	r2, [pc, #560]	; (1000881c <system_clock_peripheral_enable+0x358>)
100085ea:	68d3      	ldr	r3, [r2, #12]
100085ec:	2180      	movs	r1, #128	; 0x80
100085ee:	03c9      	lsls	r1, r1, #15
100085f0:	430b      	orrs	r3, r1
100085f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100085f6:	e10d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085f8:	4a88      	ldr	r2, [pc, #544]	; (1000881c <system_clock_peripheral_enable+0x358>)
100085fa:	68d3      	ldr	r3, [r2, #12]
100085fc:	2180      	movs	r1, #128	; 0x80
100085fe:	0409      	lsls	r1, r1, #16
10008600:	430b      	orrs	r3, r1
10008602:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008604:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008606:	e105      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008608:	4a84      	ldr	r2, [pc, #528]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000860a:	68d3      	ldr	r3, [r2, #12]
1000860c:	2180      	movs	r1, #128	; 0x80
1000860e:	0449      	lsls	r1, r1, #17
10008610:	430b      	orrs	r3, r1
10008612:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008614:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008616:	e0fd      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008618:	4a80      	ldr	r2, [pc, #512]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000861a:	68d3      	ldr	r3, [r2, #12]
1000861c:	2180      	movs	r1, #128	; 0x80
1000861e:	0489      	lsls	r1, r1, #18
10008620:	430b      	orrs	r3, r1
10008622:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008624:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008626:	e0f5      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008628:	4a7c      	ldr	r2, [pc, #496]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000862a:	68d3      	ldr	r3, [r2, #12]
1000862c:	2180      	movs	r1, #128	; 0x80
1000862e:	04c9      	lsls	r1, r1, #19
10008630:	430b      	orrs	r3, r1
10008632:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008634:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008636:	e0ed      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008638:	4a78      	ldr	r2, [pc, #480]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000863a:	68d3      	ldr	r3, [r2, #12]
1000863c:	2180      	movs	r1, #128	; 0x80
1000863e:	0509      	lsls	r1, r1, #20
10008640:	430b      	orrs	r3, r1
10008642:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008644:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008646:	e0e5      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008648:	4a74      	ldr	r2, [pc, #464]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000864a:	68d3      	ldr	r3, [r2, #12]
1000864c:	2180      	movs	r1, #128	; 0x80
1000864e:	0549      	lsls	r1, r1, #21
10008650:	430b      	orrs	r3, r1
10008652:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008654:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008656:	e0dd      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008658:	4a70      	ldr	r2, [pc, #448]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000865a:	68d3      	ldr	r3, [r2, #12]
1000865c:	2180      	movs	r1, #128	; 0x80
1000865e:	0589      	lsls	r1, r1, #22
10008660:	430b      	orrs	r3, r1
10008662:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008664:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008666:	e0d5      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008668:	4a6c      	ldr	r2, [pc, #432]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000866a:	68d3      	ldr	r3, [r2, #12]
1000866c:	2180      	movs	r1, #128	; 0x80
1000866e:	05c9      	lsls	r1, r1, #23
10008670:	430b      	orrs	r3, r1
10008672:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008674:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008676:	e0cd      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008678:	4a68      	ldr	r2, [pc, #416]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000867a:	6911      	ldr	r1, [r2, #16]
1000867c:	2301      	movs	r3, #1
1000867e:	430b      	orrs	r3, r1
10008680:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008682:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008684:	e0c6      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008686:	4a65      	ldr	r2, [pc, #404]	; (1000881c <system_clock_peripheral_enable+0x358>)
10008688:	6911      	ldr	r1, [r2, #16]
1000868a:	2302      	movs	r3, #2
1000868c:	430b      	orrs	r3, r1
1000868e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008690:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008692:	e0bf      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008694:	4a61      	ldr	r2, [pc, #388]	; (1000881c <system_clock_peripheral_enable+0x358>)
10008696:	6911      	ldr	r1, [r2, #16]
10008698:	2304      	movs	r3, #4
1000869a:	430b      	orrs	r3, r1
1000869c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000869e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
100086a0:	e0b8      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100086a2:	4a5e      	ldr	r2, [pc, #376]	; (1000881c <system_clock_peripheral_enable+0x358>)
100086a4:	6911      	ldr	r1, [r2, #16]
100086a6:	2308      	movs	r3, #8
100086a8:	430b      	orrs	r3, r1
100086aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
100086ae:	e0b1      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100086b0:	4a5a      	ldr	r2, [pc, #360]	; (1000881c <system_clock_peripheral_enable+0x358>)
100086b2:	6911      	ldr	r1, [r2, #16]
100086b4:	2310      	movs	r3, #16
100086b6:	430b      	orrs	r3, r1
100086b8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
100086bc:	e0aa      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100086be:	4a57      	ldr	r2, [pc, #348]	; (1000881c <system_clock_peripheral_enable+0x358>)
100086c0:	6911      	ldr	r1, [r2, #16]
100086c2:	2320      	movs	r3, #32
100086c4:	430b      	orrs	r3, r1
100086c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
100086ca:	e0a3      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100086cc:	4a53      	ldr	r2, [pc, #332]	; (1000881c <system_clock_peripheral_enable+0x358>)
100086ce:	6911      	ldr	r1, [r2, #16]
100086d0:	2340      	movs	r3, #64	; 0x40
100086d2:	430b      	orrs	r3, r1
100086d4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
100086d8:	e09c      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100086da:	4a50      	ldr	r2, [pc, #320]	; (1000881c <system_clock_peripheral_enable+0x358>)
100086dc:	6911      	ldr	r1, [r2, #16]
100086de:	2380      	movs	r3, #128	; 0x80
100086e0:	430b      	orrs	r3, r1
100086e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
100086e6:	e095      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100086e8:	4a4c      	ldr	r2, [pc, #304]	; (1000881c <system_clock_peripheral_enable+0x358>)
100086ea:	6913      	ldr	r3, [r2, #16]
100086ec:	2180      	movs	r1, #128	; 0x80
100086ee:	0049      	lsls	r1, r1, #1
100086f0:	430b      	orrs	r3, r1
100086f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
100086f6:	e08d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100086f8:	4a48      	ldr	r2, [pc, #288]	; (1000881c <system_clock_peripheral_enable+0x358>)
100086fa:	6913      	ldr	r3, [r2, #16]
100086fc:	2180      	movs	r1, #128	; 0x80
100086fe:	0089      	lsls	r1, r1, #2
10008700:	430b      	orrs	r3, r1
10008702:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008704:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10008706:	e085      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008708:	4a44      	ldr	r2, [pc, #272]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000870a:	6913      	ldr	r3, [r2, #16]
1000870c:	2180      	movs	r1, #128	; 0x80
1000870e:	00c9      	lsls	r1, r1, #3
10008710:	430b      	orrs	r3, r1
10008712:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008714:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008716:	e07d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008718:	4a40      	ldr	r2, [pc, #256]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000871a:	6913      	ldr	r3, [r2, #16]
1000871c:	2180      	movs	r1, #128	; 0x80
1000871e:	0109      	lsls	r1, r1, #4
10008720:	430b      	orrs	r3, r1
10008722:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008724:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008726:	e075      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008728:	4a3c      	ldr	r2, [pc, #240]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000872a:	6913      	ldr	r3, [r2, #16]
1000872c:	2180      	movs	r1, #128	; 0x80
1000872e:	0149      	lsls	r1, r1, #5
10008730:	430b      	orrs	r3, r1
10008732:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008734:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008736:	e06d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008738:	4a38      	ldr	r2, [pc, #224]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000873a:	6913      	ldr	r3, [r2, #16]
1000873c:	2180      	movs	r1, #128	; 0x80
1000873e:	0189      	lsls	r1, r1, #6
10008740:	430b      	orrs	r3, r1
10008742:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008744:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008746:	e065      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008748:	4a34      	ldr	r2, [pc, #208]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000874a:	6913      	ldr	r3, [r2, #16]
1000874c:	2180      	movs	r1, #128	; 0x80
1000874e:	01c9      	lsls	r1, r1, #7
10008750:	430b      	orrs	r3, r1
10008752:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008754:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008756:	e05d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008758:	4a30      	ldr	r2, [pc, #192]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000875a:	6913      	ldr	r3, [r2, #16]
1000875c:	2180      	movs	r1, #128	; 0x80
1000875e:	0209      	lsls	r1, r1, #8
10008760:	430b      	orrs	r3, r1
10008762:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008764:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008766:	e055      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008768:	4a2c      	ldr	r2, [pc, #176]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000876a:	6913      	ldr	r3, [r2, #16]
1000876c:	2180      	movs	r1, #128	; 0x80
1000876e:	0249      	lsls	r1, r1, #9
10008770:	430b      	orrs	r3, r1
10008772:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008774:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008776:	e04d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008778:	4a28      	ldr	r2, [pc, #160]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000877a:	6913      	ldr	r3, [r2, #16]
1000877c:	2180      	movs	r1, #128	; 0x80
1000877e:	0289      	lsls	r1, r1, #10
10008780:	430b      	orrs	r3, r1
10008782:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008784:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008786:	e045      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008788:	4a24      	ldr	r2, [pc, #144]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000878a:	6913      	ldr	r3, [r2, #16]
1000878c:	2180      	movs	r1, #128	; 0x80
1000878e:	02c9      	lsls	r1, r1, #11
10008790:	430b      	orrs	r3, r1
10008792:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008794:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008796:	e03d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008798:	4a20      	ldr	r2, [pc, #128]	; (1000881c <system_clock_peripheral_enable+0x358>)
1000879a:	6913      	ldr	r3, [r2, #16]
1000879c:	2180      	movs	r1, #128	; 0x80
1000879e:	0309      	lsls	r1, r1, #12
100087a0:	430b      	orrs	r3, r1
100087a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100087a6:	e035      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087a8:	4a1c      	ldr	r2, [pc, #112]	; (1000881c <system_clock_peripheral_enable+0x358>)
100087aa:	6913      	ldr	r3, [r2, #16]
100087ac:	2180      	movs	r1, #128	; 0x80
100087ae:	0349      	lsls	r1, r1, #13
100087b0:	430b      	orrs	r3, r1
100087b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
100087b6:	e02d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087b8:	4a18      	ldr	r2, [pc, #96]	; (1000881c <system_clock_peripheral_enable+0x358>)
100087ba:	6913      	ldr	r3, [r2, #16]
100087bc:	2180      	movs	r1, #128	; 0x80
100087be:	0389      	lsls	r1, r1, #14
100087c0:	430b      	orrs	r3, r1
100087c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
100087c6:	e025      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087c8:	4a14      	ldr	r2, [pc, #80]	; (1000881c <system_clock_peripheral_enable+0x358>)
100087ca:	6913      	ldr	r3, [r2, #16]
100087cc:	2180      	movs	r1, #128	; 0x80
100087ce:	03c9      	lsls	r1, r1, #15
100087d0:	430b      	orrs	r3, r1
100087d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
100087d6:	e01d      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087d8:	4a10      	ldr	r2, [pc, #64]	; (1000881c <system_clock_peripheral_enable+0x358>)
100087da:	6913      	ldr	r3, [r2, #16]
100087dc:	2180      	movs	r1, #128	; 0x80
100087de:	0409      	lsls	r1, r1, #16
100087e0:	430b      	orrs	r3, r1
100087e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
100087e6:	e015      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
100087e8:	4a0c      	ldr	r2, [pc, #48]	; (1000881c <system_clock_peripheral_enable+0x358>)
100087ea:	7d11      	ldrb	r1, [r2, #20]
100087ec:	2301      	movs	r3, #1
100087ee:	430b      	orrs	r3, r1
100087f0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
100087f4:	e00e      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
100087f6:	4a09      	ldr	r2, [pc, #36]	; (1000881c <system_clock_peripheral_enable+0x358>)
100087f8:	7d11      	ldrb	r1, [r2, #20]
100087fa:	2302      	movs	r3, #2
100087fc:	430b      	orrs	r3, r1
100087fe:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008800:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008802:	e007      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008804:	4a05      	ldr	r2, [pc, #20]	; (1000881c <system_clock_peripheral_enable+0x358>)
10008806:	7d11      	ldrb	r1, [r2, #20]
10008808:	2304      	movs	r3, #4
1000880a:	430b      	orrs	r3, r1
1000880c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000880e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008810:	e000      	b.n	10008814 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008812:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008814:	bd00      	pop	{pc}
10008816:	46c0      	nop			; (mov r8, r8)
10008818:	10010970 	.word	0x10010970
1000881c:	4000b000 	.word	0x4000b000

10008820 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008820:	b500      	push	{lr}
	switch (peripheral) {
10008822:	2843      	cmp	r0, #67	; 0x43
10008824:	d900      	bls.n	10008828 <system_peripheral_reset+0x8>
10008826:	e223      	b.n	10008c70 <system_peripheral_reset+0x450>
10008828:	0080      	lsls	r0, r0, #2
1000882a:	4be0      	ldr	r3, [pc, #896]	; (10008bac <system_peripheral_reset+0x38c>)
1000882c:	581b      	ldr	r3, [r3, r0]
1000882e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008830:	4bdf      	ldr	r3, [pc, #892]	; (10008bb0 <system_peripheral_reset+0x390>)
10008832:	6859      	ldr	r1, [r3, #4]
10008834:	2202      	movs	r2, #2
10008836:	4391      	bics	r1, r2
10008838:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000883a:	6859      	ldr	r1, [r3, #4]
1000883c:	430a      	orrs	r2, r1
1000883e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008840:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008842:	e216      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008844:	4bda      	ldr	r3, [pc, #872]	; (10008bb0 <system_peripheral_reset+0x390>)
10008846:	6859      	ldr	r1, [r3, #4]
10008848:	2204      	movs	r2, #4
1000884a:	4391      	bics	r1, r2
1000884c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000884e:	6859      	ldr	r1, [r3, #4]
10008850:	430a      	orrs	r2, r1
10008852:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008854:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10008856:	e20c      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008858:	4bd5      	ldr	r3, [pc, #852]	; (10008bb0 <system_peripheral_reset+0x390>)
1000885a:	6859      	ldr	r1, [r3, #4]
1000885c:	2208      	movs	r2, #8
1000885e:	4391      	bics	r1, r2
10008860:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008862:	6859      	ldr	r1, [r3, #4]
10008864:	430a      	orrs	r2, r1
10008866:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008868:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
1000886a:	e202      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000886c:	4bd0      	ldr	r3, [pc, #832]	; (10008bb0 <system_peripheral_reset+0x390>)
1000886e:	6859      	ldr	r1, [r3, #4]
10008870:	2210      	movs	r2, #16
10008872:	4391      	bics	r1, r2
10008874:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008876:	6859      	ldr	r1, [r3, #4]
10008878:	430a      	orrs	r2, r1
1000887a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000887c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
1000887e:	e1f8      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008880:	4bcb      	ldr	r3, [pc, #812]	; (10008bb0 <system_peripheral_reset+0x390>)
10008882:	6859      	ldr	r1, [r3, #4]
10008884:	2220      	movs	r2, #32
10008886:	4391      	bics	r1, r2
10008888:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000888a:	6859      	ldr	r1, [r3, #4]
1000888c:	430a      	orrs	r2, r1
1000888e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008890:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10008892:	e1ee      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008894:	4bc6      	ldr	r3, [pc, #792]	; (10008bb0 <system_peripheral_reset+0x390>)
10008896:	6859      	ldr	r1, [r3, #4]
10008898:	2240      	movs	r2, #64	; 0x40
1000889a:	4391      	bics	r1, r2
1000889c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000889e:	6859      	ldr	r1, [r3, #4]
100088a0:	430a      	orrs	r2, r1
100088a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088a4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
100088a6:	e1e4      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100088a8:	4bc1      	ldr	r3, [pc, #772]	; (10008bb0 <system_peripheral_reset+0x390>)
100088aa:	6859      	ldr	r1, [r3, #4]
100088ac:	2280      	movs	r2, #128	; 0x80
100088ae:	4391      	bics	r1, r2
100088b0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100088b2:	6859      	ldr	r1, [r3, #4]
100088b4:	430a      	orrs	r2, r1
100088b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088b8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
100088ba:	e1da      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100088bc:	4bbc      	ldr	r3, [pc, #752]	; (10008bb0 <system_peripheral_reset+0x390>)
100088be:	6859      	ldr	r1, [r3, #4]
100088c0:	4abc      	ldr	r2, [pc, #752]	; (10008bb4 <system_peripheral_reset+0x394>)
100088c2:	400a      	ands	r2, r1
100088c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100088c6:	685a      	ldr	r2, [r3, #4]
100088c8:	2180      	movs	r1, #128	; 0x80
100088ca:	0049      	lsls	r1, r1, #1
100088cc:	430a      	orrs	r2, r1
100088ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088d0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
100088d2:	e1ce      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100088d4:	4bb6      	ldr	r3, [pc, #728]	; (10008bb0 <system_peripheral_reset+0x390>)
100088d6:	6859      	ldr	r1, [r3, #4]
100088d8:	4ab7      	ldr	r2, [pc, #732]	; (10008bb8 <system_peripheral_reset+0x398>)
100088da:	400a      	ands	r2, r1
100088dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100088de:	685a      	ldr	r2, [r3, #4]
100088e0:	2180      	movs	r1, #128	; 0x80
100088e2:	0089      	lsls	r1, r1, #2
100088e4:	430a      	orrs	r2, r1
100088e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088e8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
100088ea:	e1c2      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100088ec:	4bb0      	ldr	r3, [pc, #704]	; (10008bb0 <system_peripheral_reset+0x390>)
100088ee:	6859      	ldr	r1, [r3, #4]
100088f0:	4ab2      	ldr	r2, [pc, #712]	; (10008bbc <system_peripheral_reset+0x39c>)
100088f2:	400a      	ands	r2, r1
100088f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100088f6:	685a      	ldr	r2, [r3, #4]
100088f8:	2180      	movs	r1, #128	; 0x80
100088fa:	00c9      	lsls	r1, r1, #3
100088fc:	430a      	orrs	r2, r1
100088fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008900:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10008902:	e1b6      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008904:	4baa      	ldr	r3, [pc, #680]	; (10008bb0 <system_peripheral_reset+0x390>)
10008906:	6859      	ldr	r1, [r3, #4]
10008908:	4aad      	ldr	r2, [pc, #692]	; (10008bc0 <system_peripheral_reset+0x3a0>)
1000890a:	400a      	ands	r2, r1
1000890c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000890e:	685a      	ldr	r2, [r3, #4]
10008910:	2180      	movs	r1, #128	; 0x80
10008912:	0109      	lsls	r1, r1, #4
10008914:	430a      	orrs	r2, r1
10008916:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008918:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
1000891a:	e1aa      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000891c:	4ba4      	ldr	r3, [pc, #656]	; (10008bb0 <system_peripheral_reset+0x390>)
1000891e:	6859      	ldr	r1, [r3, #4]
10008920:	4aa8      	ldr	r2, [pc, #672]	; (10008bc4 <system_peripheral_reset+0x3a4>)
10008922:	400a      	ands	r2, r1
10008924:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008926:	685a      	ldr	r2, [r3, #4]
10008928:	2180      	movs	r1, #128	; 0x80
1000892a:	0149      	lsls	r1, r1, #5
1000892c:	430a      	orrs	r2, r1
1000892e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008930:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
10008932:	e19e      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008934:	4b9e      	ldr	r3, [pc, #632]	; (10008bb0 <system_peripheral_reset+0x390>)
10008936:	6859      	ldr	r1, [r3, #4]
10008938:	4aa3      	ldr	r2, [pc, #652]	; (10008bc8 <system_peripheral_reset+0x3a8>)
1000893a:	400a      	ands	r2, r1
1000893c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000893e:	685a      	ldr	r2, [r3, #4]
10008940:	2180      	movs	r1, #128	; 0x80
10008942:	0189      	lsls	r1, r1, #6
10008944:	430a      	orrs	r2, r1
10008946:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008948:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
1000894a:	e192      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000894c:	4b98      	ldr	r3, [pc, #608]	; (10008bb0 <system_peripheral_reset+0x390>)
1000894e:	6859      	ldr	r1, [r3, #4]
10008950:	4a9e      	ldr	r2, [pc, #632]	; (10008bcc <system_peripheral_reset+0x3ac>)
10008952:	400a      	ands	r2, r1
10008954:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008956:	685a      	ldr	r2, [r3, #4]
10008958:	2180      	movs	r1, #128	; 0x80
1000895a:	01c9      	lsls	r1, r1, #7
1000895c:	430a      	orrs	r2, r1
1000895e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008960:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
10008962:	e186      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008964:	4b92      	ldr	r3, [pc, #584]	; (10008bb0 <system_peripheral_reset+0x390>)
10008966:	6859      	ldr	r1, [r3, #4]
10008968:	4a99      	ldr	r2, [pc, #612]	; (10008bd0 <system_peripheral_reset+0x3b0>)
1000896a:	400a      	ands	r2, r1
1000896c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000896e:	685a      	ldr	r2, [r3, #4]
10008970:	2180      	movs	r1, #128	; 0x80
10008972:	0209      	lsls	r1, r1, #8
10008974:	430a      	orrs	r2, r1
10008976:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008978:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
1000897a:	e17a      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000897c:	4b8c      	ldr	r3, [pc, #560]	; (10008bb0 <system_peripheral_reset+0x390>)
1000897e:	6859      	ldr	r1, [r3, #4]
10008980:	4a94      	ldr	r2, [pc, #592]	; (10008bd4 <system_peripheral_reset+0x3b4>)
10008982:	400a      	ands	r2, r1
10008984:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008986:	685a      	ldr	r2, [r3, #4]
10008988:	2180      	movs	r1, #128	; 0x80
1000898a:	0249      	lsls	r1, r1, #9
1000898c:	430a      	orrs	r2, r1
1000898e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008990:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
10008992:	e16e      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008994:	4b86      	ldr	r3, [pc, #536]	; (10008bb0 <system_peripheral_reset+0x390>)
10008996:	6859      	ldr	r1, [r3, #4]
10008998:	4a8f      	ldr	r2, [pc, #572]	; (10008bd8 <system_peripheral_reset+0x3b8>)
1000899a:	400a      	ands	r2, r1
1000899c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000899e:	685a      	ldr	r2, [r3, #4]
100089a0:	2180      	movs	r1, #128	; 0x80
100089a2:	0289      	lsls	r1, r1, #10
100089a4:	430a      	orrs	r2, r1
100089a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089a8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
100089aa:	e162      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100089ac:	4b80      	ldr	r3, [pc, #512]	; (10008bb0 <system_peripheral_reset+0x390>)
100089ae:	6859      	ldr	r1, [r3, #4]
100089b0:	4a8a      	ldr	r2, [pc, #552]	; (10008bdc <system_peripheral_reset+0x3bc>)
100089b2:	400a      	ands	r2, r1
100089b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089b6:	685a      	ldr	r2, [r3, #4]
100089b8:	2180      	movs	r1, #128	; 0x80
100089ba:	02c9      	lsls	r1, r1, #11
100089bc:	430a      	orrs	r2, r1
100089be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089c0:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
100089c2:	e156      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100089c4:	4b7a      	ldr	r3, [pc, #488]	; (10008bb0 <system_peripheral_reset+0x390>)
100089c6:	6859      	ldr	r1, [r3, #4]
100089c8:	4a85      	ldr	r2, [pc, #532]	; (10008be0 <system_peripheral_reset+0x3c0>)
100089ca:	400a      	ands	r2, r1
100089cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089ce:	685a      	ldr	r2, [r3, #4]
100089d0:	2180      	movs	r1, #128	; 0x80
100089d2:	0309      	lsls	r1, r1, #12
100089d4:	430a      	orrs	r2, r1
100089d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089d8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
100089da:	e14a      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100089dc:	4b74      	ldr	r3, [pc, #464]	; (10008bb0 <system_peripheral_reset+0x390>)
100089de:	6859      	ldr	r1, [r3, #4]
100089e0:	4a80      	ldr	r2, [pc, #512]	; (10008be4 <system_peripheral_reset+0x3c4>)
100089e2:	400a      	ands	r2, r1
100089e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089e6:	685a      	ldr	r2, [r3, #4]
100089e8:	2180      	movs	r1, #128	; 0x80
100089ea:	0349      	lsls	r1, r1, #13
100089ec:	430a      	orrs	r2, r1
100089ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089f0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
100089f2:	e13e      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100089f4:	4b6e      	ldr	r3, [pc, #440]	; (10008bb0 <system_peripheral_reset+0x390>)
100089f6:	6859      	ldr	r1, [r3, #4]
100089f8:	4a7b      	ldr	r2, [pc, #492]	; (10008be8 <system_peripheral_reset+0x3c8>)
100089fa:	400a      	ands	r2, r1
100089fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089fe:	685a      	ldr	r2, [r3, #4]
10008a00:	2180      	movs	r1, #128	; 0x80
10008a02:	0389      	lsls	r1, r1, #14
10008a04:	430a      	orrs	r2, r1
10008a06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a08:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10008a0a:	e132      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a0c:	4b68      	ldr	r3, [pc, #416]	; (10008bb0 <system_peripheral_reset+0x390>)
10008a0e:	6859      	ldr	r1, [r3, #4]
10008a10:	4a76      	ldr	r2, [pc, #472]	; (10008bec <system_peripheral_reset+0x3cc>)
10008a12:	400a      	ands	r2, r1
10008a14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a16:	685a      	ldr	r2, [r3, #4]
10008a18:	2180      	movs	r1, #128	; 0x80
10008a1a:	03c9      	lsls	r1, r1, #15
10008a1c:	430a      	orrs	r2, r1
10008a1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a20:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10008a22:	e126      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a24:	4b62      	ldr	r3, [pc, #392]	; (10008bb0 <system_peripheral_reset+0x390>)
10008a26:	6859      	ldr	r1, [r3, #4]
10008a28:	4a71      	ldr	r2, [pc, #452]	; (10008bf0 <system_peripheral_reset+0x3d0>)
10008a2a:	400a      	ands	r2, r1
10008a2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a2e:	685a      	ldr	r2, [r3, #4]
10008a30:	2180      	movs	r1, #128	; 0x80
10008a32:	0409      	lsls	r1, r1, #16
10008a34:	430a      	orrs	r2, r1
10008a36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a38:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10008a3a:	e11a      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a3c:	4b5c      	ldr	r3, [pc, #368]	; (10008bb0 <system_peripheral_reset+0x390>)
10008a3e:	6859      	ldr	r1, [r3, #4]
10008a40:	4a6c      	ldr	r2, [pc, #432]	; (10008bf4 <system_peripheral_reset+0x3d4>)
10008a42:	400a      	ands	r2, r1
10008a44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a46:	685a      	ldr	r2, [r3, #4]
10008a48:	2180      	movs	r1, #128	; 0x80
10008a4a:	0449      	lsls	r1, r1, #17
10008a4c:	430a      	orrs	r2, r1
10008a4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a50:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10008a52:	e10e      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a54:	4b56      	ldr	r3, [pc, #344]	; (10008bb0 <system_peripheral_reset+0x390>)
10008a56:	6859      	ldr	r1, [r3, #4]
10008a58:	4a67      	ldr	r2, [pc, #412]	; (10008bf8 <system_peripheral_reset+0x3d8>)
10008a5a:	400a      	ands	r2, r1
10008a5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a5e:	685a      	ldr	r2, [r3, #4]
10008a60:	2180      	movs	r1, #128	; 0x80
10008a62:	0489      	lsls	r1, r1, #18
10008a64:	430a      	orrs	r2, r1
10008a66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a68:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
10008a6a:	e102      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a6c:	4b50      	ldr	r3, [pc, #320]	; (10008bb0 <system_peripheral_reset+0x390>)
10008a6e:	6859      	ldr	r1, [r3, #4]
10008a70:	4a62      	ldr	r2, [pc, #392]	; (10008bfc <system_peripheral_reset+0x3dc>)
10008a72:	400a      	ands	r2, r1
10008a74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a76:	685a      	ldr	r2, [r3, #4]
10008a78:	2180      	movs	r1, #128	; 0x80
10008a7a:	04c9      	lsls	r1, r1, #19
10008a7c:	430a      	orrs	r2, r1
10008a7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a80:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
10008a82:	e0f6      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a84:	4b4a      	ldr	r3, [pc, #296]	; (10008bb0 <system_peripheral_reset+0x390>)
10008a86:	6859      	ldr	r1, [r3, #4]
10008a88:	4a5d      	ldr	r2, [pc, #372]	; (10008c00 <system_peripheral_reset+0x3e0>)
10008a8a:	400a      	ands	r2, r1
10008a8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a8e:	685a      	ldr	r2, [r3, #4]
10008a90:	2180      	movs	r1, #128	; 0x80
10008a92:	0509      	lsls	r1, r1, #20
10008a94:	430a      	orrs	r2, r1
10008a96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a98:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
10008a9a:	e0ea      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a9c:	4b44      	ldr	r3, [pc, #272]	; (10008bb0 <system_peripheral_reset+0x390>)
10008a9e:	6859      	ldr	r1, [r3, #4]
10008aa0:	4a58      	ldr	r2, [pc, #352]	; (10008c04 <system_peripheral_reset+0x3e4>)
10008aa2:	400a      	ands	r2, r1
10008aa4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008aa6:	685a      	ldr	r2, [r3, #4]
10008aa8:	2180      	movs	r1, #128	; 0x80
10008aaa:	0549      	lsls	r1, r1, #21
10008aac:	430a      	orrs	r2, r1
10008aae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ab0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
10008ab2:	e0de      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ab4:	4b3e      	ldr	r3, [pc, #248]	; (10008bb0 <system_peripheral_reset+0x390>)
10008ab6:	6859      	ldr	r1, [r3, #4]
10008ab8:	4a53      	ldr	r2, [pc, #332]	; (10008c08 <system_peripheral_reset+0x3e8>)
10008aba:	400a      	ands	r2, r1
10008abc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008abe:	685a      	ldr	r2, [r3, #4]
10008ac0:	2180      	movs	r1, #128	; 0x80
10008ac2:	0589      	lsls	r1, r1, #22
10008ac4:	430a      	orrs	r2, r1
10008ac6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ac8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
10008aca:	e0d2      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008acc:	4b38      	ldr	r3, [pc, #224]	; (10008bb0 <system_peripheral_reset+0x390>)
10008ace:	6859      	ldr	r1, [r3, #4]
10008ad0:	4a4e      	ldr	r2, [pc, #312]	; (10008c0c <system_peripheral_reset+0x3ec>)
10008ad2:	400a      	ands	r2, r1
10008ad4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ad6:	685a      	ldr	r2, [r3, #4]
10008ad8:	2180      	movs	r1, #128	; 0x80
10008ada:	05c9      	lsls	r1, r1, #23
10008adc:	430a      	orrs	r2, r1
10008ade:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ae0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10008ae2:	e0c6      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ae4:	4a32      	ldr	r2, [pc, #200]	; (10008bb0 <system_peripheral_reset+0x390>)
10008ae6:	6853      	ldr	r3, [r2, #4]
10008ae8:	005b      	lsls	r3, r3, #1
10008aea:	085b      	lsrs	r3, r3, #1
10008aec:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008aee:	6853      	ldr	r3, [r2, #4]
10008af0:	2180      	movs	r1, #128	; 0x80
10008af2:	0609      	lsls	r1, r1, #24
10008af4:	430b      	orrs	r3, r1
10008af6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008af8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
10008afa:	e0ba      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008afc:	4b2c      	ldr	r3, [pc, #176]	; (10008bb0 <system_peripheral_reset+0x390>)
10008afe:	891a      	ldrh	r2, [r3, #8]
10008b00:	2101      	movs	r1, #1
10008b02:	438a      	bics	r2, r1
10008b04:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008b06:	8919      	ldrh	r1, [r3, #8]
10008b08:	2201      	movs	r2, #1
10008b0a:	430a      	orrs	r2, r1
10008b0c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b0e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10008b10:	e0af      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008b12:	4b27      	ldr	r3, [pc, #156]	; (10008bb0 <system_peripheral_reset+0x390>)
10008b14:	891a      	ldrh	r2, [r3, #8]
10008b16:	2102      	movs	r1, #2
10008b18:	438a      	bics	r2, r1
10008b1a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008b1c:	8919      	ldrh	r1, [r3, #8]
10008b1e:	2202      	movs	r2, #2
10008b20:	430a      	orrs	r2, r1
10008b22:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b24:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
10008b26:	e0a4      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008b28:	4b21      	ldr	r3, [pc, #132]	; (10008bb0 <system_peripheral_reset+0x390>)
10008b2a:	891a      	ldrh	r2, [r3, #8]
10008b2c:	2104      	movs	r1, #4
10008b2e:	438a      	bics	r2, r1
10008b30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008b32:	8919      	ldrh	r1, [r3, #8]
10008b34:	2204      	movs	r2, #4
10008b36:	430a      	orrs	r2, r1
10008b38:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b3a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10008b3c:	e099      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008b3e:	4b1c      	ldr	r3, [pc, #112]	; (10008bb0 <system_peripheral_reset+0x390>)
10008b40:	891a      	ldrh	r2, [r3, #8]
10008b42:	2108      	movs	r1, #8
10008b44:	438a      	bics	r2, r1
10008b46:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008b48:	8919      	ldrh	r1, [r3, #8]
10008b4a:	2208      	movs	r2, #8
10008b4c:	430a      	orrs	r2, r1
10008b4e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b50:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10008b52:	e08e      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008b54:	4b16      	ldr	r3, [pc, #88]	; (10008bb0 <system_peripheral_reset+0x390>)
10008b56:	891a      	ldrh	r2, [r3, #8]
10008b58:	2110      	movs	r1, #16
10008b5a:	438a      	bics	r2, r1
10008b5c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008b5e:	8919      	ldrh	r1, [r3, #8]
10008b60:	2210      	movs	r2, #16
10008b62:	430a      	orrs	r2, r1
10008b64:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b66:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10008b68:	e083      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008b6a:	4b11      	ldr	r3, [pc, #68]	; (10008bb0 <system_peripheral_reset+0x390>)
10008b6c:	891a      	ldrh	r2, [r3, #8]
10008b6e:	2120      	movs	r1, #32
10008b70:	438a      	bics	r2, r1
10008b72:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008b74:	8919      	ldrh	r1, [r3, #8]
10008b76:	2220      	movs	r2, #32
10008b78:	430a      	orrs	r2, r1
10008b7a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b7c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10008b7e:	e078      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008b80:	4b0b      	ldr	r3, [pc, #44]	; (10008bb0 <system_peripheral_reset+0x390>)
10008b82:	891a      	ldrh	r2, [r3, #8]
10008b84:	2140      	movs	r1, #64	; 0x40
10008b86:	438a      	bics	r2, r1
10008b88:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008b8a:	8919      	ldrh	r1, [r3, #8]
10008b8c:	2240      	movs	r2, #64	; 0x40
10008b8e:	430a      	orrs	r2, r1
10008b90:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b92:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10008b94:	e06d      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008b96:	4b06      	ldr	r3, [pc, #24]	; (10008bb0 <system_peripheral_reset+0x390>)
10008b98:	891a      	ldrh	r2, [r3, #8]
10008b9a:	2180      	movs	r1, #128	; 0x80
10008b9c:	438a      	bics	r2, r1
10008b9e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008ba0:	8919      	ldrh	r1, [r3, #8]
10008ba2:	2280      	movs	r2, #128	; 0x80
10008ba4:	430a      	orrs	r2, r1
10008ba6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ba8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
10008baa:	e062      	b.n	10008c72 <system_peripheral_reset+0x452>
10008bac:	10010a48 	.word	0x10010a48
10008bb0:	4000b000 	.word	0x4000b000
10008bb4:	fffffeff 	.word	0xfffffeff
10008bb8:	fffffdff 	.word	0xfffffdff
10008bbc:	fffffbff 	.word	0xfffffbff
10008bc0:	fffff7ff 	.word	0xfffff7ff
10008bc4:	ffffefff 	.word	0xffffefff
10008bc8:	ffffdfff 	.word	0xffffdfff
10008bcc:	ffffbfff 	.word	0xffffbfff
10008bd0:	ffff7fff 	.word	0xffff7fff
10008bd4:	fffeffff 	.word	0xfffeffff
10008bd8:	fffdffff 	.word	0xfffdffff
10008bdc:	fffbffff 	.word	0xfffbffff
10008be0:	fff7ffff 	.word	0xfff7ffff
10008be4:	ffefffff 	.word	0xffefffff
10008be8:	ffdfffff 	.word	0xffdfffff
10008bec:	ffbfffff 	.word	0xffbfffff
10008bf0:	ff7fffff 	.word	0xff7fffff
10008bf4:	feffffff 	.word	0xfeffffff
10008bf8:	fdffffff 	.word	0xfdffffff
10008bfc:	fbffffff 	.word	0xfbffffff
10008c00:	f7ffffff 	.word	0xf7ffffff
10008c04:	efffffff 	.word	0xefffffff
10008c08:	dfffffff 	.word	0xdfffffff
10008c0c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c10:	4b18      	ldr	r3, [pc, #96]	; (10008c74 <system_peripheral_reset+0x454>)
10008c12:	8919      	ldrh	r1, [r3, #8]
10008c14:	4a18      	ldr	r2, [pc, #96]	; (10008c78 <system_peripheral_reset+0x458>)
10008c16:	400a      	ands	r2, r1
10008c18:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c1a:	8919      	ldrh	r1, [r3, #8]
10008c1c:	2280      	movs	r2, #128	; 0x80
10008c1e:	0052      	lsls	r2, r2, #1
10008c20:	430a      	orrs	r2, r1
10008c22:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c24:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
10008c26:	e024      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c28:	4b12      	ldr	r3, [pc, #72]	; (10008c74 <system_peripheral_reset+0x454>)
10008c2a:	8919      	ldrh	r1, [r3, #8]
10008c2c:	4a13      	ldr	r2, [pc, #76]	; (10008c7c <system_peripheral_reset+0x45c>)
10008c2e:	400a      	ands	r2, r1
10008c30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c32:	8919      	ldrh	r1, [r3, #8]
10008c34:	2280      	movs	r2, #128	; 0x80
10008c36:	0092      	lsls	r2, r2, #2
10008c38:	430a      	orrs	r2, r1
10008c3a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c3c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10008c3e:	e018      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c40:	4b0c      	ldr	r3, [pc, #48]	; (10008c74 <system_peripheral_reset+0x454>)
10008c42:	8919      	ldrh	r1, [r3, #8]
10008c44:	4a0e      	ldr	r2, [pc, #56]	; (10008c80 <system_peripheral_reset+0x460>)
10008c46:	400a      	ands	r2, r1
10008c48:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c4a:	8919      	ldrh	r1, [r3, #8]
10008c4c:	2280      	movs	r2, #128	; 0x80
10008c4e:	00d2      	lsls	r2, r2, #3
10008c50:	430a      	orrs	r2, r1
10008c52:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c54:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10008c56:	e00c      	b.n	10008c72 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c58:	4b06      	ldr	r3, [pc, #24]	; (10008c74 <system_peripheral_reset+0x454>)
10008c5a:	8919      	ldrh	r1, [r3, #8]
10008c5c:	4a09      	ldr	r2, [pc, #36]	; (10008c84 <system_peripheral_reset+0x464>)
10008c5e:	400a      	ands	r2, r1
10008c60:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c62:	8919      	ldrh	r1, [r3, #8]
10008c64:	2280      	movs	r2, #128	; 0x80
10008c66:	0112      	lsls	r2, r2, #4
10008c68:	430a      	orrs	r2, r1
10008c6a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c6c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
10008c6e:	e000      	b.n	10008c72 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10008c70:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008c72:	bd00      	pop	{pc}
10008c74:	4000b000 	.word	0x4000b000
10008c78:	fffffeff 	.word	0xfffffeff
10008c7c:	fffffdff 	.word	0xfffffdff
10008c80:	fffffbff 	.word	0xfffffbff
10008c84:	fffff7ff 	.word	0xfffff7ff

10008c88 <system_register_isr>:
 */
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
10008c88:	2380      	movs	r3, #128	; 0x80
10008c8a:	04db      	lsls	r3, r3, #19
10008c8c:	469c      	mov	ip, r3
10008c8e:	4460      	add	r0, ip
	*temp = isr_address;
10008c90:	0080      	lsls	r0, r0, #2
10008c92:	6001      	str	r1, [r0, #0]
}
10008c94:	4770      	bx	lr
10008c96:	46c0      	nop			; (mov r8, r8)

10008c98 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10008c98:	b538      	push	{r3, r4, r5, lr}
	struct uart_module *module = _uart_instances[0];
10008c9a:	4b20      	ldr	r3, [pc, #128]	; (10008d1c <uart_rx0_isr_handler+0x84>)
10008c9c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008c9e:	6823      	ldr	r3, [r4, #0]
10008ca0:	7d1d      	ldrb	r5, [r3, #20]
10008ca2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10008ca4:	066a      	lsls	r2, r5, #25
10008ca6:	d513      	bpl.n	10008cd0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10008ca8:	211e      	movs	r1, #30
10008caa:	2222      	movs	r2, #34	; 0x22
10008cac:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10008cae:	7e1a      	ldrb	r2, [r3, #24]
10008cb0:	3123      	adds	r1, #35	; 0x23
10008cb2:	438a      	bics	r2, r1
10008cb4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008cb6:	2321      	movs	r3, #33	; 0x21
10008cb8:	5ce3      	ldrb	r3, [r4, r3]
10008cba:	071b      	lsls	r3, r3, #28
10008cbc:	d506      	bpl.n	10008ccc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10008cbe:	2320      	movs	r3, #32
10008cc0:	5ce3      	ldrb	r3, [r4, r3]
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008cc2:	071b      	lsls	r3, r3, #28
10008cc4:	d502      	bpl.n	10008ccc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10008cc6:	1c20      	adds	r0, r4, #0
10008cc8:	6923      	ldr	r3, [r4, #16]
10008cca:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10008ccc:	6823      	ldr	r3, [r4, #0]
10008cce:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008cd0:	07eb      	lsls	r3, r5, #31
10008cd2:	d522      	bpl.n	10008d1a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10008cd4:	6823      	ldr	r3, [r4, #0]
10008cd6:	7c1b      	ldrb	r3, [r3, #16]
10008cd8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008cda:	6962      	ldr	r2, [r4, #20]
10008cdc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008cde:	6963      	ldr	r3, [r4, #20]
10008ce0:	3301      	adds	r3, #1
10008ce2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008ce4:	8ba3      	ldrh	r3, [r4, #28]
10008ce6:	3b01      	subs	r3, #1
10008ce8:	b29b      	uxth	r3, r3
10008cea:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10008cec:	8ba3      	ldrh	r3, [r4, #28]
10008cee:	b29b      	uxth	r3, r3
10008cf0:	2b00      	cmp	r3, #0
10008cf2:	d112      	bne.n	10008d1a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008cf4:	3321      	adds	r3, #33	; 0x21
10008cf6:	5ce3      	ldrb	r3, [r4, r3]
10008cf8:	075b      	lsls	r3, r3, #29
10008cfa:	d50e      	bpl.n	10008d1a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10008cfc:	2320      	movs	r3, #32
10008cfe:	5ce3      	ldrb	r3, [r4, r3]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008d00:	075b      	lsls	r3, r3, #29
10008d02:	d50a      	bpl.n	10008d1a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10008d04:	2200      	movs	r2, #0
10008d06:	2322      	movs	r3, #34	; 0x22
10008d08:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10008d0a:	6822      	ldr	r2, [r4, #0]
10008d0c:	7e13      	ldrb	r3, [r2, #24]
10008d0e:	2101      	movs	r1, #1
10008d10:	438b      	bics	r3, r1
10008d12:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10008d14:	68e3      	ldr	r3, [r4, #12]
10008d16:	1c20      	adds	r0, r4, #0
10008d18:	4798      	blx	r3
			}
		}
	}
}
10008d1a:	bd38      	pop	{r3, r4, r5, pc}
10008d1c:	10012050 	.word	0x10012050

10008d20 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10008d20:	b538      	push	{r3, r4, r5, lr}
	struct uart_module *module = _uart_instances[0];
10008d22:	4b21      	ldr	r3, [pc, #132]	; (10008da8 <uart_tx0_isr_handler+0x88>)
10008d24:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10008d26:	6823      	ldr	r3, [r4, #0]
10008d28:	791d      	ldrb	r5, [r3, #4]
10008d2a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10008d2c:	07ea      	lsls	r2, r5, #31
10008d2e:	d517      	bpl.n	10008d60 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10008d30:	69a2      	ldr	r2, [r4, #24]
10008d32:	7811      	ldrb	r1, [r2, #0]
10008d34:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008d36:	3201      	adds	r2, #1
10008d38:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10008d3a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008d3c:	8be3      	ldrh	r3, [r4, #30]
10008d3e:	3b01      	subs	r3, #1
10008d40:	b29b      	uxth	r3, r3
10008d42:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10008d44:	8be3      	ldrh	r3, [r4, #30]
10008d46:	b29b      	uxth	r3, r3
10008d48:	2b00      	cmp	r3, #0
10008d4a:	d109      	bne.n	10008d60 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10008d4c:	6822      	ldr	r2, [r4, #0]
10008d4e:	7a13      	ldrb	r3, [r2, #8]
10008d50:	2101      	movs	r1, #1
10008d52:	438b      	bics	r3, r1
10008d54:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10008d56:	6822      	ldr	r2, [r4, #0]
10008d58:	7a11      	ldrb	r1, [r2, #8]
10008d5a:	2310      	movs	r3, #16
10008d5c:	430b      	orrs	r3, r1
10008d5e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008d60:	06eb      	lsls	r3, r5, #27
10008d62:	d512      	bpl.n	10008d8a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10008d64:	2321      	movs	r3, #33	; 0x21
10008d66:	5ce3      	ldrb	r3, [r4, r3]
10008d68:	07db      	lsls	r3, r3, #31
10008d6a:	d50e      	bpl.n	10008d8a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10008d6c:	2320      	movs	r3, #32
10008d6e:	5ce3      	ldrb	r3, [r4, r3]
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10008d70:	07db      	lsls	r3, r3, #31
10008d72:	d50a      	bpl.n	10008d8a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10008d74:	2200      	movs	r2, #0
10008d76:	2322      	movs	r3, #34	; 0x22
10008d78:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10008d7a:	6822      	ldr	r2, [r4, #0]
10008d7c:	7a13      	ldrb	r3, [r2, #8]
10008d7e:	2110      	movs	r1, #16
10008d80:	438b      	bics	r3, r1
10008d82:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10008d84:	1c20      	adds	r0, r4, #0
10008d86:	6863      	ldr	r3, [r4, #4]
10008d88:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10008d8a:	06ab      	lsls	r3, r5, #26
10008d8c:	d50a      	bpl.n	10008da4 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10008d8e:	2321      	movs	r3, #33	; 0x21
10008d90:	5ce3      	ldrb	r3, [r4, r3]
10008d92:	079b      	lsls	r3, r3, #30
10008d94:	d506      	bpl.n	10008da4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10008d96:	2320      	movs	r3, #32
10008d98:	5ce3      	ldrb	r3, [r4, r3]
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10008d9a:	079b      	lsls	r3, r3, #30
10008d9c:	d502      	bpl.n	10008da4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10008d9e:	68a3      	ldr	r3, [r4, #8]
10008da0:	1c20      	adds	r0, r4, #0
10008da2:	4798      	blx	r3
		}

	}
}
10008da4:	bd38      	pop	{r3, r4, r5, pc}
10008da6:	46c0      	nop			; (mov r8, r8)
10008da8:	10012050 	.word	0x10012050

10008dac <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10008dac:	b538      	push	{r3, r4, r5, lr}
	struct uart_module *module = _uart_instances[1];
10008dae:	4b20      	ldr	r3, [pc, #128]	; (10008e30 <uart_rx1_isr_handler+0x84>)
10008db0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008db2:	6823      	ldr	r3, [r4, #0]
10008db4:	7d1d      	ldrb	r5, [r3, #20]
10008db6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10008db8:	066a      	lsls	r2, r5, #25
10008dba:	d513      	bpl.n	10008de4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10008dbc:	211e      	movs	r1, #30
10008dbe:	2222      	movs	r2, #34	; 0x22
10008dc0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10008dc2:	7e1a      	ldrb	r2, [r3, #24]
10008dc4:	3123      	adds	r1, #35	; 0x23
10008dc6:	438a      	bics	r2, r1
10008dc8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008dca:	2321      	movs	r3, #33	; 0x21
10008dcc:	5ce3      	ldrb	r3, [r4, r3]
10008dce:	071b      	lsls	r3, r3, #28
10008dd0:	d506      	bpl.n	10008de0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10008dd2:	2320      	movs	r3, #32
10008dd4:	5ce3      	ldrb	r3, [r4, r3]
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008dd6:	071b      	lsls	r3, r3, #28
10008dd8:	d502      	bpl.n	10008de0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10008dda:	1c20      	adds	r0, r4, #0
10008ddc:	6923      	ldr	r3, [r4, #16]
10008dde:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10008de0:	6823      	ldr	r3, [r4, #0]
10008de2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008de4:	07eb      	lsls	r3, r5, #31
10008de6:	d522      	bpl.n	10008e2e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10008de8:	6823      	ldr	r3, [r4, #0]
10008dea:	7c1b      	ldrb	r3, [r3, #16]
10008dec:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008dee:	6962      	ldr	r2, [r4, #20]
10008df0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008df2:	6963      	ldr	r3, [r4, #20]
10008df4:	3301      	adds	r3, #1
10008df6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008df8:	8ba3      	ldrh	r3, [r4, #28]
10008dfa:	3b01      	subs	r3, #1
10008dfc:	b29b      	uxth	r3, r3
10008dfe:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10008e00:	8ba3      	ldrh	r3, [r4, #28]
10008e02:	b29b      	uxth	r3, r3
10008e04:	2b00      	cmp	r3, #0
10008e06:	d112      	bne.n	10008e2e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008e08:	3321      	adds	r3, #33	; 0x21
10008e0a:	5ce3      	ldrb	r3, [r4, r3]
10008e0c:	075b      	lsls	r3, r3, #29
10008e0e:	d50e      	bpl.n	10008e2e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10008e10:	2320      	movs	r3, #32
10008e12:	5ce3      	ldrb	r3, [r4, r3]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008e14:	075b      	lsls	r3, r3, #29
10008e16:	d50a      	bpl.n	10008e2e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10008e18:	2200      	movs	r2, #0
10008e1a:	2322      	movs	r3, #34	; 0x22
10008e1c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10008e1e:	6822      	ldr	r2, [r4, #0]
10008e20:	7e13      	ldrb	r3, [r2, #24]
10008e22:	2101      	movs	r1, #1
10008e24:	438b      	bics	r3, r1
10008e26:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10008e28:	68e3      	ldr	r3, [r4, #12]
10008e2a:	1c20      	adds	r0, r4, #0
10008e2c:	4798      	blx	r3
			}
		}
	}
}
10008e2e:	bd38      	pop	{r3, r4, r5, pc}
10008e30:	10012050 	.word	0x10012050

10008e34 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10008e34:	b538      	push	{r3, r4, r5, lr}
	struct uart_module *module = _uart_instances[1];
10008e36:	4b21      	ldr	r3, [pc, #132]	; (10008ebc <uart_tx1_isr_handler+0x88>)
10008e38:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10008e3a:	6823      	ldr	r3, [r4, #0]
10008e3c:	791d      	ldrb	r5, [r3, #4]
10008e3e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10008e40:	07ea      	lsls	r2, r5, #31
10008e42:	d517      	bpl.n	10008e74 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10008e44:	69a2      	ldr	r2, [r4, #24]
10008e46:	7811      	ldrb	r1, [r2, #0]
10008e48:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008e4a:	3201      	adds	r2, #1
10008e4c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10008e4e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008e50:	8be3      	ldrh	r3, [r4, #30]
10008e52:	3b01      	subs	r3, #1
10008e54:	b29b      	uxth	r3, r3
10008e56:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10008e58:	8be3      	ldrh	r3, [r4, #30]
10008e5a:	b29b      	uxth	r3, r3
10008e5c:	2b00      	cmp	r3, #0
10008e5e:	d109      	bne.n	10008e74 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10008e60:	6822      	ldr	r2, [r4, #0]
10008e62:	7a13      	ldrb	r3, [r2, #8]
10008e64:	2101      	movs	r1, #1
10008e66:	438b      	bics	r3, r1
10008e68:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10008e6a:	6822      	ldr	r2, [r4, #0]
10008e6c:	7a11      	ldrb	r1, [r2, #8]
10008e6e:	2310      	movs	r3, #16
10008e70:	430b      	orrs	r3, r1
10008e72:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008e74:	06eb      	lsls	r3, r5, #27
10008e76:	d512      	bpl.n	10008e9e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10008e78:	2321      	movs	r3, #33	; 0x21
10008e7a:	5ce3      	ldrb	r3, [r4, r3]
10008e7c:	07db      	lsls	r3, r3, #31
10008e7e:	d50e      	bpl.n	10008e9e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10008e80:	2320      	movs	r3, #32
10008e82:	5ce3      	ldrb	r3, [r4, r3]
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10008e84:	07db      	lsls	r3, r3, #31
10008e86:	d50a      	bpl.n	10008e9e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10008e88:	2200      	movs	r2, #0
10008e8a:	2322      	movs	r3, #34	; 0x22
10008e8c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10008e8e:	6822      	ldr	r2, [r4, #0]
10008e90:	7a13      	ldrb	r3, [r2, #8]
10008e92:	2110      	movs	r1, #16
10008e94:	438b      	bics	r3, r1
10008e96:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10008e98:	1c20      	adds	r0, r4, #0
10008e9a:	6863      	ldr	r3, [r4, #4]
10008e9c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10008e9e:	06ab      	lsls	r3, r5, #26
10008ea0:	d50a      	bpl.n	10008eb8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10008ea2:	2321      	movs	r3, #33	; 0x21
10008ea4:	5ce3      	ldrb	r3, [r4, r3]
10008ea6:	079b      	lsls	r3, r3, #30
10008ea8:	d506      	bpl.n	10008eb8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10008eaa:	2320      	movs	r3, #32
10008eac:	5ce3      	ldrb	r3, [r4, r3]
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10008eae:	079b      	lsls	r3, r3, #30
10008eb0:	d502      	bpl.n	10008eb8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10008eb2:	68a3      	ldr	r3, [r4, #8]
10008eb4:	1c20      	adds	r0, r4, #0
10008eb6:	4798      	blx	r3
		}

	}
}
10008eb8:	bd38      	pop	{r3, r4, r5, pc}
10008eba:	46c0      	nop			; (mov r8, r8)
10008ebc:	10012050 	.word	0x10012050

10008ec0 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10008ec0:	23e1      	movs	r3, #225	; 0xe1
10008ec2:	025b      	lsls	r3, r3, #9
10008ec4:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10008ec6:	2300      	movs	r3, #0
10008ec8:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10008eca:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10008ecc:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10008ece:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10008ed0:	3302      	adds	r3, #2
10008ed2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
10008ed4:	2203      	movs	r2, #3
10008ed6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10008ed8:	3201      	adds	r2, #1
10008eda:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10008edc:	3201      	adds	r2, #1
10008ede:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10008ee0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
10008ee2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10008ee4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
10008ee6:	6243      	str	r3, [r0, #36]	; 0x24
}
10008ee8:	4770      	bx	lr
10008eea:	46c0      	nop			; (mov r8, r8)

10008eec <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008eee:	464f      	mov	r7, r9
10008ef0:	4646      	mov	r6, r8
10008ef2:	b4c0      	push	{r6, r7}
10008ef4:	1c05      	adds	r5, r0, #0
10008ef6:	1c17      	adds	r7, r2, #0

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10008ef8:	6001      	str	r1, [r0, #0]

	if (hw == UART0) {
10008efa:	4b55      	ldr	r3, [pc, #340]	; (10009050 <uart_init+0x164>)
10008efc:	4299      	cmp	r1, r3
10008efe:	d118      	bne.n	10008f32 <uart_init+0x46>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10008f00:	2009      	movs	r0, #9
10008f02:	4c54      	ldr	r4, [pc, #336]	; (10009054 <uart_init+0x168>)
10008f04:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
10008f06:	200a      	movs	r0, #10
10008f08:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
10008f0a:	2009      	movs	r0, #9
10008f0c:	4c52      	ldr	r4, [pc, #328]	; (10009058 <uart_init+0x16c>)
10008f0e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10008f10:	200a      	movs	r0, #10
10008f12:	47a0      	blx	r4
		_uart_instances[0] = module;
10008f14:	4b51      	ldr	r3, [pc, #324]	; (1000905c <uart_init+0x170>)
10008f16:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10008f18:	2010      	movs	r0, #16
10008f1a:	4951      	ldr	r1, [pc, #324]	; (10009060 <uart_init+0x174>)
10008f1c:	4c51      	ldr	r4, [pc, #324]	; (10009064 <uart_init+0x178>)
10008f1e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10008f20:	2011      	movs	r0, #17
10008f22:	4951      	ldr	r1, [pc, #324]	; (10009068 <uart_init+0x17c>)
10008f24:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008f26:	4b51      	ldr	r3, [pc, #324]	; (1000906c <uart_init+0x180>)
10008f28:	2201      	movs	r2, #1
10008f2a:	601a      	str	r2, [r3, #0]
10008f2c:	3201      	adds	r2, #1
10008f2e:	601a      	str	r2, [r3, #0]
10008f30:	e01a      	b.n	10008f68 <uart_init+0x7c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10008f32:	4b4f      	ldr	r3, [pc, #316]	; (10009070 <uart_init+0x184>)
10008f34:	4299      	cmp	r1, r3
10008f36:	d117      	bne.n	10008f68 <uart_init+0x7c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10008f38:	200b      	movs	r0, #11
10008f3a:	4c46      	ldr	r4, [pc, #280]	; (10009054 <uart_init+0x168>)
10008f3c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10008f3e:	200c      	movs	r0, #12
10008f40:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10008f42:	200b      	movs	r0, #11
10008f44:	4c44      	ldr	r4, [pc, #272]	; (10009058 <uart_init+0x16c>)
10008f46:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10008f48:	200c      	movs	r0, #12
10008f4a:	47a0      	blx	r4
		_uart_instances[1] = module;
10008f4c:	4b43      	ldr	r3, [pc, #268]	; (1000905c <uart_init+0x170>)
10008f4e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10008f50:	2012      	movs	r0, #18
10008f52:	4948      	ldr	r1, [pc, #288]	; (10009074 <uart_init+0x188>)
10008f54:	4c43      	ldr	r4, [pc, #268]	; (10009064 <uart_init+0x178>)
10008f56:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
10008f58:	2013      	movs	r0, #19
10008f5a:	4947      	ldr	r1, [pc, #284]	; (10009078 <uart_init+0x18c>)
10008f5c:	47a0      	blx	r4
10008f5e:	4b43      	ldr	r3, [pc, #268]	; (1000906c <uart_init+0x180>)
10008f60:	2204      	movs	r2, #4
10008f62:	601a      	str	r2, [r3, #0]
10008f64:	3204      	adds	r2, #4
10008f66:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10008f68:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
10008f6a:	2204      	movs	r2, #4
10008f6c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10008f6e:	2b00      	cmp	r3, #0
10008f70:	d152      	bne.n	10009018 <uart_init+0x12c>
		index = 4;
	} else {
		index = 2;
10008f72:	3302      	adds	r3, #2
10008f74:	4698      	mov	r8, r3
10008f76:	e04f      	b.n	10009018 <uart_init+0x12c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10008f78:	7830      	ldrb	r0, [r6, #0]
10008f7a:	8a31      	ldrh	r1, [r6, #16]
10008f7c:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10008f7e:	3401      	adds	r4, #1
10008f80:	b2e4      	uxtb	r4, r4
10008f82:	3604      	adds	r6, #4
10008f84:	4544      	cmp	r4, r8
10008f86:	d3f7      	bcc.n	10008f78 <uart_init+0x8c>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008f88:	682b      	ldr	r3, [r5, #0]
10008f8a:	7d1a      	ldrb	r2, [r3, #20]
10008f8c:	07d2      	lsls	r2, r2, #31
10008f8e:	d504      	bpl.n	10008f9a <uart_init+0xae>
10008f90:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10008f92:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008f94:	7d1a      	ldrb	r2, [r3, #20]
10008f96:	420a      	tst	r2, r1
10008f98:	d1fb      	bne.n	10008f92 <uart_init+0xa6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
10008f9a:	2100      	movs	r1, #0
10008f9c:	2220      	movs	r2, #32
10008f9e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10008fa0:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10008fa2:	1e59      	subs	r1, r3, #1
10008fa4:	418b      	sbcs	r3, r1
10008fa6:	0159      	lsls	r1, r3, #5
10008fa8:	797b      	ldrb	r3, [r7, #5]
10008faa:	793a      	ldrb	r2, [r7, #4]
10008fac:	4313      	orrs	r3, r2
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10008fae:	430b      	orrs	r3, r1
	switch(config->parity) {
10008fb0:	79ba      	ldrb	r2, [r7, #6]
10008fb2:	2a02      	cmp	r2, #2
10008fb4:	d00d      	beq.n	10008fd2 <uart_init+0xe6>
10008fb6:	b2d1      	uxtb	r1, r2
10008fb8:	2902      	cmp	r1, #2
10008fba:	d802      	bhi.n	10008fc2 <uart_init+0xd6>
10008fbc:	2a01      	cmp	r2, #1
10008fbe:	d005      	beq.n	10008fcc <uart_init+0xe0>
10008fc0:	e00f      	b.n	10008fe2 <uart_init+0xf6>
10008fc2:	2a03      	cmp	r2, #3
10008fc4:	d008      	beq.n	10008fd8 <uart_init+0xec>
10008fc6:	2a04      	cmp	r2, #4
10008fc8:	d009      	beq.n	10008fde <uart_init+0xf2>
10008fca:	e00a      	b.n	10008fe2 <uart_init+0xf6>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10008fcc:	2202      	movs	r2, #2
10008fce:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
10008fd0:	e007      	b.n	10008fe2 <uart_init+0xf6>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
10008fd2:	2206      	movs	r2, #6
10008fd4:	4313      	orrs	r3, r2
			break;
10008fd6:	e004      	b.n	10008fe2 <uart_init+0xf6>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
10008fd8:	220a      	movs	r2, #10
10008fda:	4313      	orrs	r3, r2
			break;
10008fdc:	e001      	b.n	10008fe2 <uart_init+0xf6>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
10008fde:	220e      	movs	r2, #14
10008fe0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10008fe2:	2220      	movs	r2, #32
10008fe4:	6829      	ldr	r1, [r5, #0]
10008fe6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10008fe8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
10008fea:	4b24      	ldr	r3, [pc, #144]	; (1000907c <uart_init+0x190>)
10008fec:	4798      	blx	r3
10008fee:	1c04      	adds	r4, r0, #0
	integerpart = clock / baud_rate;
10008ff0:	1c31      	adds	r1, r6, #0
10008ff2:	4b23      	ldr	r3, [pc, #140]	; (10009080 <uart_init+0x194>)
10008ff4:	4798      	blx	r3
10008ff6:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10008ff8:	0400      	lsls	r0, r0, #16
10008ffa:	0c00      	lsrs	r0, r0, #16
10008ffc:	4370      	muls	r0, r6
10008ffe:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009000:	0931      	lsrs	r1, r6, #4
10009002:	4288      	cmp	r0, r1
10009004:	d906      	bls.n	10009014 <uart_init+0x128>
10009006:	2300      	movs	r3, #0
		i++;
10009008:	3301      	adds	r3, #1
1000900a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000900c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000900e:	4288      	cmp	r0, r1
10009010:	d8fa      	bhi.n	10009008 <uart_init+0x11c>
10009012:	e007      	b.n	10009024 <uart_init+0x138>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009014:	2300      	movs	r3, #0
10009016:	e005      	b.n	10009024 <uart_init+0x138>
10009018:	1c3e      	adds	r6, r7, #0
1000901a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000901c:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000901e:	4b19      	ldr	r3, [pc, #100]	; (10009084 <uart_init+0x198>)
10009020:	4699      	mov	r9, r3
10009022:	e7a9      	b.n	10008f78 <uart_init+0x8c>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009024:	2100      	movs	r1, #0
10009026:	2028      	movs	r0, #40	; 0x28
10009028:	682c      	ldr	r4, [r5, #0]
1000902a:	5421      	strb	r1, [r4, r0]
	i = 0;
	while(diff > (baud_rate / 16)) {
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;
1000902c:	3301      	adds	r3, #1

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
	module->hw->UART_BAUD_RATE.reg =
1000902e:	071b      	lsls	r3, r3, #28
10009030:	0f5b      	lsrs	r3, r3, #29
10009032:	00d2      	lsls	r2, r2, #3
10009034:	4313      	orrs	r3, r2
10009036:	b29b      	uxth	r3, r3
10009038:	682a      	ldr	r2, [r5, #0]
1000903a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000903c:	682b      	ldr	r3, [r5, #0]
1000903e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009040:	682b      	ldr	r3, [r5, #0]
10009042:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009044:	2000      	movs	r0, #0
10009046:	bc0c      	pop	{r2, r3}
10009048:	4690      	mov	r8, r2
1000904a:	4699      	mov	r9, r3
1000904c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000904e:	46c0      	nop			; (mov r8, r8)
10009050:	40004000 	.word	0x40004000
10009054:	10008821 	.word	0x10008821
10009058:	100084c5 	.word	0x100084c5
1000905c:	10012050 	.word	0x10012050
10009060:	10008c99 	.word	0x10008c99
10009064:	10008c89 	.word	0x10008c89
10009068:	10008d21 	.word	0x10008d21
1000906c:	e000e100 	.word	0xe000e100
10009070:	40005000 	.word	0x40005000
10009074:	10008dad 	.word	0x10008dad
10009078:	10008e35 	.word	0x10008e35
1000907c:	100084b9 	.word	0x100084b9
10009080:	1000e629 	.word	0x1000e629
10009084:	100082dd 	.word	0x100082dd

10009088 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009088:	6802      	ldr	r2, [r0, #0]
1000908a:	2001      	movs	r0, #1
1000908c:	7913      	ldrb	r3, [r2, #4]
1000908e:	4203      	tst	r3, r0
10009090:	d0fc      	beq.n	1000908c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009092:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009094:	2000      	movs	r0, #0
10009096:	4770      	bx	lr

10009098 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009098:	6802      	ldr	r2, [r0, #0]
1000909a:	2001      	movs	r0, #1
1000909c:	7d13      	ldrb	r3, [r2, #20]
1000909e:	4203      	tst	r3, r0
100090a0:	d0fc      	beq.n	1000909c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
100090a2:	7c13      	ldrb	r3, [r2, #16]
100090a4:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
100090a6:	2000      	movs	r0, #0
100090a8:	4770      	bx	lr
100090aa:	46c0      	nop			; (mov r8, r8)

100090ac <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100090ac:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
100090ae:	2a00      	cmp	r2, #0
100090b0:	d00d      	beq.n	100090ce <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
100090b2:	330b      	adds	r3, #11
100090b4:	5cc3      	ldrb	r3, [r0, r3]
100090b6:	b2db      	uxtb	r3, r3
100090b8:	2b05      	cmp	r3, #5
100090ba:	d008      	beq.n	100090ce <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
100090bc:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
100090be:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
100090c0:	2205      	movs	r2, #5
100090c2:	2322      	movs	r3, #34	; 0x22
100090c4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
100090c6:	6803      	ldr	r3, [r0, #0]
100090c8:	3a04      	subs	r2, #4
100090ca:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
100090cc:	2300      	movs	r3, #0
}
100090ce:	1c18      	adds	r0, r3, #0
100090d0:	4770      	bx	lr
100090d2:	46c0      	nop			; (mov r8, r8)

100090d4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
100090d4:	0093      	lsls	r3, r2, #2
100090d6:	18c3      	adds	r3, r0, r3
100090d8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
100090da:	2301      	movs	r3, #1
100090dc:	4093      	lsls	r3, r2
100090de:	1c1a      	adds	r2, r3, #0
100090e0:	2120      	movs	r1, #32
100090e2:	5c43      	ldrb	r3, [r0, r1]
100090e4:	431a      	orrs	r2, r3
100090e6:	5442      	strb	r2, [r0, r1]
}
100090e8:	4770      	bx	lr
100090ea:	46c0      	nop			; (mov r8, r8)

100090ec <uart_unregister_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
100090ec:	008b      	lsls	r3, r1, #2
100090ee:	18c3      	adds	r3, r0, r3
100090f0:	2200      	movs	r2, #0
100090f2:	605a      	str	r2, [r3, #4]
	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
100090f4:	2301      	movs	r3, #1
100090f6:	408b      	lsls	r3, r1
100090f8:	1c19      	adds	r1, r3, #0
100090fa:	3220      	adds	r2, #32
100090fc:	5c83      	ldrb	r3, [r0, r2]
100090fe:	438b      	bics	r3, r1
10009100:	5483      	strb	r3, [r0, r2]
}
10009102:	4770      	bx	lr

10009104 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009104:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009106:	2301      	movs	r3, #1
10009108:	408b      	lsls	r3, r1
1000910a:	2421      	movs	r4, #33	; 0x21
1000910c:	5d02      	ldrb	r2, [r0, r4]
1000910e:	4313      	orrs	r3, r2
10009110:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009112:	2901      	cmp	r1, #1
10009114:	d104      	bne.n	10009120 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009116:	6802      	ldr	r2, [r0, #0]
10009118:	7a11      	ldrb	r1, [r2, #8]
1000911a:	2320      	movs	r3, #32
1000911c:	430b      	orrs	r3, r1
1000911e:	7213      	strb	r3, [r2, #8]
	}
}
10009120:	bd10      	pop	{r4, pc}
10009122:	46c0      	nop			; (mov r8, r8)

10009124 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009124:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009126:	2201      	movs	r2, #1
10009128:	408a      	lsls	r2, r1
1000912a:	2421      	movs	r4, #33	; 0x21
1000912c:	5d03      	ldrb	r3, [r0, r4]
1000912e:	4393      	bics	r3, r2
10009130:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009132:	2901      	cmp	r1, #1
10009134:	d104      	bne.n	10009140 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009136:	6802      	ldr	r2, [r0, #0]
10009138:	7a13      	ldrb	r3, [r2, #8]
1000913a:	311f      	adds	r1, #31
1000913c:	438b      	bics	r3, r1
1000913e:	7213      	strb	r3, [r2, #8]
	}

}
10009140:	bd10      	pop	{r4, pc}
10009142:	46c0      	nop			; (mov r8, r8)

10009144 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009144:	b5f0      	push	{r4, r5, r6, r7, lr}
10009146:	4647      	mov	r7, r8
10009148:	b480      	push	{r7}
1000914a:	1c0c      	adds	r4, r1, #0
1000914c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000914e:	2800      	cmp	r0, #0
10009150:	d110      	bne.n	10009174 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
10009152:	2a00      	cmp	r2, #0
10009154:	dd0a      	ble.n	1000916c <_read+0x28>
10009156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009158:	4e09      	ldr	r6, [pc, #36]	; (10009180 <_read+0x3c>)
1000915a:	4d0a      	ldr	r5, [pc, #40]	; (10009184 <_read+0x40>)
1000915c:	6830      	ldr	r0, [r6, #0]
1000915e:	1c21      	adds	r1, r4, #0
10009160:	682b      	ldr	r3, [r5, #0]
10009162:	4798      	blx	r3
		ptr++;
10009164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009166:	42bc      	cmp	r4, r7
10009168:	d1f8      	bne.n	1000915c <_read+0x18>
1000916a:	e001      	b.n	10009170 <_read+0x2c>
1000916c:	2300      	movs	r3, #0
1000916e:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
10009170:	4640      	mov	r0, r8
10009172:	e001      	b.n	10009178 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009174:	2001      	movs	r0, #1
10009176:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009178:	bc04      	pop	{r2}
1000917a:	4690      	mov	r8, r2
1000917c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000917e:	46c0      	nop			; (mov r8, r8)
10009180:	10012060 	.word	0x10012060
10009184:	10012058 	.word	0x10012058

10009188 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009188:	b5f0      	push	{r4, r5, r6, r7, lr}
1000918a:	4647      	mov	r7, r8
1000918c:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000918e:	3801      	subs	r0, #1
10009190:	2802      	cmp	r0, #2
10009192:	d815      	bhi.n	100091c0 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
10009194:	2a00      	cmp	r2, #0
10009196:	d010      	beq.n	100091ba <_write+0x32>
10009198:	1c15      	adds	r5, r2, #0
1000919a:	1c0e      	adds	r6, r1, #0
1000919c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000919e:	4b0c      	ldr	r3, [pc, #48]	; (100091d0 <_write+0x48>)
100091a0:	4698      	mov	r8, r3
100091a2:	4f0c      	ldr	r7, [pc, #48]	; (100091d4 <_write+0x4c>)
100091a4:	4643      	mov	r3, r8
100091a6:	6818      	ldr	r0, [r3, #0]
100091a8:	5d31      	ldrb	r1, [r6, r4]
100091aa:	683b      	ldr	r3, [r7, #0]
100091ac:	4798      	blx	r3
100091ae:	2800      	cmp	r0, #0
100091b0:	db09      	blt.n	100091c6 <_write+0x3e>
			return -1;
		}
		++nChars;
100091b2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
100091b4:	42a5      	cmp	r5, r4
100091b6:	d1f5      	bne.n	100091a4 <_write+0x1c>
100091b8:	e000      	b.n	100091bc <_write+0x34>
100091ba:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
100091bc:	1c20      	adds	r0, r4, #0
100091be:	e004      	b.n	100091ca <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
100091c0:	2001      	movs	r0, #1
100091c2:	4240      	negs	r0, r0
100091c4:	e001      	b.n	100091ca <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
100091c6:	2001      	movs	r0, #1
100091c8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
100091ca:	bc04      	pop	{r2}
100091cc:	4690      	mov	r8, r2
100091ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100091d0:	10012060 	.word	0x10012060
100091d4:	1001205c 	.word	0x1001205c

100091d8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100091d8:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100091da:	4a06      	ldr	r2, [pc, #24]	; (100091f4 <_sbrk+0x1c>)
100091dc:	6812      	ldr	r2, [r2, #0]
100091de:	2a00      	cmp	r2, #0
100091e0:	d102      	bne.n	100091e8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
100091e2:	4905      	ldr	r1, [pc, #20]	; (100091f8 <_sbrk+0x20>)
100091e4:	4a03      	ldr	r2, [pc, #12]	; (100091f4 <_sbrk+0x1c>)
100091e6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
100091e8:	4a02      	ldr	r2, [pc, #8]	; (100091f4 <_sbrk+0x1c>)
100091ea:	6810      	ldr	r0, [r2, #0]

	heap += incr;
100091ec:	18c3      	adds	r3, r0, r3
100091ee:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
100091f0:	4770      	bx	lr
100091f2:	46c0      	nop			; (mov r8, r8)
100091f4:	1001192c 	.word	0x1001192c
100091f8:	10013bc8 	.word	0x10013bc8

100091fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
100091fc:	2001      	movs	r0, #1
100091fe:	4240      	negs	r0, r0
10009200:	4770      	bx	lr
10009202:	46c0      	nop			; (mov r8, r8)

10009204 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009204:	2380      	movs	r3, #128	; 0x80
10009206:	019b      	lsls	r3, r3, #6
10009208:	604b      	str	r3, [r1, #4]

	return 0;
}
1000920a:	2000      	movs	r0, #0
1000920c:	4770      	bx	lr
1000920e:	46c0      	nop			; (mov r8, r8)

10009210 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009210:	2001      	movs	r0, #1
10009212:	4770      	bx	lr

10009214 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009214:	2000      	movs	r0, #0
10009216:	4770      	bx	lr

10009218 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009218:	2000      	movs	r0, #0
1000921a:	4770      	bx	lr

1000921c <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000921c:	2000      	movs	r0, #0
1000921e:	4770      	bx	lr

10009220 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009220:	78c0      	ldrb	r0, [r0, #3]
10009222:	2800      	cmp	r0, #0
10009224:	d000      	beq.n	10009228 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009226:	20e2      	movs	r0, #226	; 0xe2
}
10009228:	4770      	bx	lr
1000922a:	46c0      	nop			; (mov r8, r8)

1000922c <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000922c:	2000      	movs	r0, #0
1000922e:	4770      	bx	lr

10009230 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009230:	b508      	push	{r3, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009232:	7800      	ldrb	r0, [r0, #0]
10009234:	2800      	cmp	r0, #0
10009236:	d006      	beq.n	10009246 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009238:	4803      	ldr	r0, [pc, #12]	; (10009248 <ble_scan_report_handler+0x18>)
1000923a:	4b04      	ldr	r3, [pc, #16]	; (1000924c <ble_scan_report_handler+0x1c>)
1000923c:	4798      	blx	r3
1000923e:	4804      	ldr	r0, [pc, #16]	; (10009250 <ble_scan_report_handler+0x20>)
10009240:	4b04      	ldr	r3, [pc, #16]	; (10009254 <ble_scan_report_handler+0x24>)
10009242:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009244:	20e2      	movs	r0, #226	; 0xe2
}
10009246:	bd08      	pop	{r3, pc}
10009248:	10010cc8 	.word	0x10010cc8
1000924c:	1000f919 	.word	0x1000f919
10009250:	10010ccc 	.word	0x10010ccc
10009254:	1000f7f9 	.word	0x1000f7f9

10009258 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009258:	b510      	push	{r4, lr}
1000925a:	1c03      	adds	r3, r0, #0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000925c:	78c0      	ldrb	r0, [r0, #3]
1000925e:	2800      	cmp	r0, #0
10009260:	d009      	beq.n	10009276 <ble_mtu_changed_cmd_complete_handler+0x1e>
10009262:	1c1c      	adds	r4, r3, #0
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009264:	4804      	ldr	r0, [pc, #16]	; (10009278 <ble_mtu_changed_cmd_complete_handler+0x20>)
10009266:	4b05      	ldr	r3, [pc, #20]	; (1000927c <ble_mtu_changed_cmd_complete_handler+0x24>)
10009268:	4798      	blx	r3
1000926a:	8821      	ldrh	r1, [r4, #0]
1000926c:	78a2      	ldrb	r2, [r4, #2]
1000926e:	4804      	ldr	r0, [pc, #16]	; (10009280 <ble_mtu_changed_cmd_complete_handler+0x28>)
10009270:	4b04      	ldr	r3, [pc, #16]	; (10009284 <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009272:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009274:	20e2      	movs	r0, #226	; 0xe2
}
10009276:	bd10      	pop	{r4, pc}
10009278:	10010cc8 	.word	0x10010cc8
1000927c:	1000f919 	.word	0x1000f919
10009280:	10010ce0 	.word	0x10010ce0
10009284:	1000f7f9 	.word	0x1000f7f9

10009288 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000928a:	1c04      	adds	r4, r0, #0
1000928c:	4b19      	ldr	r3, [pc, #100]	; (100092f4 <ble_disconnected_state_handler+0x6c>)
1000928e:	229b      	movs	r2, #155	; 0x9b
10009290:	0092      	lsls	r2, r2, #2
10009292:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009294:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009296:	2600      	movs	r6, #0
10009298:	1c18      	adds	r0, r3, #0
1000929a:	1c1a      	adds	r2, r3, #0
1000929c:	3a56      	subs	r2, #86	; 0x56
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000929e:	8811      	ldrh	r1, [r2, #0]
100092a0:	8822      	ldrh	r2, [r4, #0]
100092a2:	4291      	cmp	r1, r2
100092a4:	d119      	bne.n	100092da <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
100092a6:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
100092a8:	2a05      	cmp	r2, #5
100092aa:	d001      	beq.n	100092b0 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
100092ac:	2a08      	cmp	r2, #8
100092ae:	d101      	bne.n	100092b4 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
100092b0:	7007      	strb	r7, [r0, #0]
100092b2:	e012      	b.n	100092da <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
100092b4:	2a07      	cmp	r2, #7
100092b6:	d80f      	bhi.n	100092d8 <ble_disconnected_state_handler+0x50>
100092b8:	0092      	lsls	r2, r2, #2
100092ba:	490f      	ldr	r1, [pc, #60]	; (100092f8 <ble_disconnected_state_handler+0x70>)
100092bc:	588a      	ldr	r2, [r1, r2]
100092be:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100092c0:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
100092c2:	4a0e      	ldr	r2, [pc, #56]	; (100092fc <ble_disconnected_state_handler+0x74>)
100092c4:	7812      	ldrb	r2, [r2, #0]
100092c6:	2a00      	cmp	r2, #0
100092c8:	d007      	beq.n	100092da <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
100092ca:	4a0c      	ldr	r2, [pc, #48]	; (100092fc <ble_disconnected_state_handler+0x74>)
100092cc:	7812      	ldrb	r2, [r2, #0]
100092ce:	3a01      	subs	r2, #1
100092d0:	b2d2      	uxtb	r2, r2
100092d2:	490a      	ldr	r1, [pc, #40]	; (100092fc <ble_disconnected_state_handler+0x74>)
100092d4:	700a      	strb	r2, [r1, #0]
100092d6:	e000      	b.n	100092da <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100092d8:	7006      	strb	r6, [r0, #0]
100092da:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100092dc:	42ab      	cmp	r3, r5
100092de:	d1db      	bne.n	10009298 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
100092e0:	4807      	ldr	r0, [pc, #28]	; (10009300 <ble_disconnected_state_handler+0x78>)
100092e2:	4b08      	ldr	r3, [pc, #32]	; (10009304 <ble_disconnected_state_handler+0x7c>)
100092e4:	4798      	blx	r3
100092e6:	78a1      	ldrb	r1, [r4, #2]
100092e8:	8822      	ldrh	r2, [r4, #0]
100092ea:	4807      	ldr	r0, [pc, #28]	; (10009308 <ble_disconnected_state_handler+0x80>)
100092ec:	4b07      	ldr	r3, [pc, #28]	; (1000930c <ble_disconnected_state_handler+0x84>)
100092ee:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
100092f0:	2000      	movs	r0, #0
100092f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100092f4:	100120da 	.word	0x100120da
100092f8:	10010b58 	.word	0x10010b58
100092fc:	100122e8 	.word	0x100122e8
10009300:	10010cc8 	.word	0x10010cc8
10009304:	1000f919 	.word	0x1000f919
10009308:	10010d18 	.word	0x10010d18
1000930c:	1000f7f9 	.word	0x1000f7f9

10009310 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009310:	b570      	push	{r4, r5, r6, lr}
10009312:	1c06      	adds	r6, r0, #0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009314:	8801      	ldrh	r1, [r0, #0]
10009316:	4b26      	ldr	r3, [pc, #152]	; (100093b0 <ble_encryption_status_change_handler+0xa0>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009318:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000931a:	891a      	ldrh	r2, [r3, #8]
1000931c:	428a      	cmp	r2, r1
1000931e:	d104      	bne.n	1000932a <ble_encryption_status_change_handler+0x1a>
10009320:	1c1a      	adds	r2, r3, #0
10009322:	325e      	adds	r2, #94	; 0x5e
10009324:	7812      	ldrb	r2, [r2, #0]
10009326:	2a06      	cmp	r2, #6
10009328:	d02a      	beq.n	10009380 <ble_encryption_status_change_handler+0x70>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000932a:	3401      	adds	r4, #1
1000932c:	b2e4      	uxtb	r4, r4
1000932e:	337c      	adds	r3, #124	; 0x7c
10009330:	2c05      	cmp	r4, #5
10009332:	d1f2      	bne.n	1000931a <ble_encryption_status_change_handler+0xa>
10009334:	e035      	b.n	100093a2 <ble_encryption_status_change_handler+0x92>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009336:	491e      	ldr	r1, [pc, #120]	; (100093b0 <ble_encryption_status_change_handler+0xa0>)
10009338:	0163      	lsls	r3, r4, #5
1000933a:	1b1a      	subs	r2, r3, r4
1000933c:	0092      	lsls	r2, r2, #2
1000933e:	188a      	adds	r2, r1, r2
10009340:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009342:	1c13      	adds	r3, r2, #0
10009344:	3358      	adds	r3, #88	; 0x58
10009346:	2207      	movs	r2, #7
10009348:	719a      	strb	r2, [r3, #6]
		DBG_LOG("Encryption failed");
1000934a:	481a      	ldr	r0, [pc, #104]	; (100093b4 <ble_encryption_status_change_handler+0xa4>)
1000934c:	4b1a      	ldr	r3, [pc, #104]	; (100093b8 <ble_encryption_status_change_handler+0xa8>)
1000934e:	4798      	blx	r3
10009350:	481a      	ldr	r0, [pc, #104]	; (100093bc <ble_encryption_status_change_handler+0xac>)
10009352:	4b1b      	ldr	r3, [pc, #108]	; (100093c0 <ble_encryption_status_change_handler+0xb0>)
10009354:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009356:	25e2      	movs	r5, #226	; 0xe2
10009358:	e027      	b.n	100093aa <ble_encryption_status_change_handler+0x9a>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000935a:	4816      	ldr	r0, [pc, #88]	; (100093b4 <ble_encryption_status_change_handler+0xa4>)
1000935c:	4b16      	ldr	r3, [pc, #88]	; (100093b8 <ble_encryption_status_change_handler+0xa8>)
1000935e:	4798      	blx	r3
10009360:	4818      	ldr	r0, [pc, #96]	; (100093c4 <ble_encryption_status_change_handler+0xb4>)
10009362:	4b17      	ldr	r3, [pc, #92]	; (100093c0 <ble_encryption_status_change_handler+0xb0>)
10009364:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009366:	237c      	movs	r3, #124	; 0x7c
10009368:	435c      	muls	r4, r3
1000936a:	4b11      	ldr	r3, [pc, #68]	; (100093b0 <ble_encryption_status_change_handler+0xa0>)
1000936c:	191b      	adds	r3, r3, r4
1000936e:	1c1a      	adds	r2, r3, #0
10009370:	3258      	adds	r2, #88	; 0x58
10009372:	2108      	movs	r1, #8
10009374:	7191      	strb	r1, [r2, #6]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009376:	78f2      	ldrb	r2, [r6, #3]
10009378:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000937a:	78b2      	ldrb	r2, [r6, #2]
1000937c:	761a      	strb	r2, [r3, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000937e:	e014      	b.n	100093aa <ble_encryption_status_change_handler+0x9a>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009380:	78b5      	ldrb	r5, [r6, #2]
10009382:	2d00      	cmp	r5, #0
10009384:	d1d7      	bne.n	10009336 <ble_encryption_status_change_handler+0x26>
10009386:	e7e8      	b.n	1000935a <ble_encryption_status_change_handler+0x4a>
	{
		DBG_LOG("Encryption completed successfully");
10009388:	4e0a      	ldr	r6, [pc, #40]	; (100093b4 <ble_encryption_status_change_handler+0xa4>)
1000938a:	1c30      	adds	r0, r6, #0
1000938c:	4d0a      	ldr	r5, [pc, #40]	; (100093b8 <ble_encryption_status_change_handler+0xa8>)
1000938e:	47a8      	blx	r5
10009390:	480c      	ldr	r0, [pc, #48]	; (100093c4 <ble_encryption_status_change_handler+0xb4>)
10009392:	4c0b      	ldr	r4, [pc, #44]	; (100093c0 <ble_encryption_status_change_handler+0xb0>)
10009394:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009396:	1c30      	adds	r0, r6, #0
10009398:	47a8      	blx	r5
1000939a:	480b      	ldr	r0, [pc, #44]	; (100093c8 <ble_encryption_status_change_handler+0xb8>)
1000939c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000939e:	25e2      	movs	r5, #226	; 0xe2
100093a0:	e003      	b.n	100093aa <ble_encryption_status_change_handler+0x9a>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
100093a2:	78b5      	ldrb	r5, [r6, #2]
100093a4:	2d00      	cmp	r5, #0
100093a6:	d1c6      	bne.n	10009336 <ble_encryption_status_change_handler+0x26>
100093a8:	e7ee      	b.n	10009388 <ble_encryption_status_change_handler+0x78>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
100093aa:	1c28      	adds	r0, r5, #0
100093ac:	bd70      	pop	{r4, r5, r6, pc}
100093ae:	46c0      	nop			; (mov r8, r8)
100093b0:	1001207c 	.word	0x1001207c
100093b4:	10010cc8 	.word	0x10010cc8
100093b8:	1000f919 	.word	0x1000f919
100093bc:	10010d48 	.word	0x10010d48
100093c0:	1000f7f9 	.word	0x1000f7f9
100093c4:	10010d5c 	.word	0x10010d5c
100093c8:	10010d80 	.word	0x10010d80

100093cc <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
100093cc:	b510      	push	{r4, lr}
100093ce:	1c01      	adds	r1, r0, #0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
100093d0:	4b15      	ldr	r3, [pc, #84]	; (10009428 <ble_scan_info_handler+0x5c>)
100093d2:	781b      	ldrb	r3, [r3, #0]
100093d4:	b2db      	uxtb	r3, r3
100093d6:	2b13      	cmp	r3, #19
100093d8:	d812      	bhi.n	10009400 <ble_scan_info_handler+0x34>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
100093da:	4c13      	ldr	r4, [pc, #76]	; (10009428 <ble_scan_info_handler+0x5c>)
100093dc:	7823      	ldrb	r3, [r4, #0]
100093de:	b2db      	uxtb	r3, r3
100093e0:	0098      	lsls	r0, r3, #2
100093e2:	18c0      	adds	r0, r0, r3
100093e4:	00c0      	lsls	r0, r0, #3
100093e6:	18c3      	adds	r3, r0, r3
100093e8:	4810      	ldr	r0, [pc, #64]	; (1000942c <ble_scan_info_handler+0x60>)
100093ea:	18c0      	adds	r0, r0, r3
100093ec:	2229      	movs	r2, #41	; 0x29
100093ee:	4b10      	ldr	r3, [pc, #64]	; (10009430 <ble_scan_info_handler+0x64>)
100093f0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
100093f2:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
100093f4:	7823      	ldrb	r3, [r4, #0]
100093f6:	3301      	adds	r3, #1
100093f8:	b2db      	uxtb	r3, r3
100093fa:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
100093fc:	2000      	movs	r0, #0
100093fe:	e012      	b.n	10009426 <ble_scan_info_handler+0x5a>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009400:	480c      	ldr	r0, [pc, #48]	; (10009434 <ble_scan_info_handler+0x68>)
10009402:	4b0d      	ldr	r3, [pc, #52]	; (10009438 <ble_scan_info_handler+0x6c>)
10009404:	4798      	blx	r3
10009406:	480d      	ldr	r0, [pc, #52]	; (1000943c <ble_scan_info_handler+0x70>)
10009408:	4b0d      	ldr	r3, [pc, #52]	; (10009440 <ble_scan_info_handler+0x74>)
1000940a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000940c:	4b0d      	ldr	r3, [pc, #52]	; (10009444 <ble_scan_info_handler+0x78>)
1000940e:	4798      	blx	r3
10009410:	1c03      	adds	r3, r0, #0
		{
			DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
10009412:	20e2      	movs	r0, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009414:	2b00      	cmp	r3, #0
10009416:	d006      	beq.n	10009426 <ble_scan_info_handler+0x5a>
		{
			DBG_LOG("Failed to stop scanning");
10009418:	4806      	ldr	r0, [pc, #24]	; (10009434 <ble_scan_info_handler+0x68>)
1000941a:	4b07      	ldr	r3, [pc, #28]	; (10009438 <ble_scan_info_handler+0x6c>)
1000941c:	4798      	blx	r3
1000941e:	480a      	ldr	r0, [pc, #40]	; (10009448 <ble_scan_info_handler+0x7c>)
10009420:	4b07      	ldr	r3, [pc, #28]	; (10009440 <ble_scan_info_handler+0x74>)
10009422:	4798      	blx	r3
		}
		
		return AT_BLE_FAILURE;
10009424:	20e2      	movs	r0, #226	; 0xe2
	}
}
10009426:	bd10      	pop	{r4, pc}
10009428:	10011e14 	.word	0x10011e14
1000942c:	10012350 	.word	0x10012350
10009430:	1000f7d7 	.word	0x1000f7d7
10009434:	10010cc8 	.word	0x10010cc8
10009438:	1000f919 	.word	0x1000f919
1000943c:	10010da8 	.word	0x10010da8
10009440:	1000f7f9 	.word	0x1000f7f9
10009444:	1000c4c5 	.word	0x1000c4c5
10009448:	10010de0 	.word	0x10010de0

1000944c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000944e:	464f      	mov	r7, r9
10009450:	4646      	mov	r6, r8
10009452:	b4c0      	push	{r6, r7}
10009454:	1c05      	adds	r5, r0, #0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009456:	8841      	ldrh	r1, [r0, #2]
10009458:	4b38      	ldr	r3, [pc, #224]	; (1000953c <ble_pair_done_handler+0xf0>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000945a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000945c:	891a      	ldrh	r2, [r3, #8]
1000945e:	428a      	cmp	r2, r1
10009460:	d104      	bne.n	1000946c <ble_pair_done_handler+0x20>
10009462:	1c1a      	adds	r2, r3, #0
10009464:	325e      	adds	r2, #94	; 0x5e
10009466:	7812      	ldrb	r2, [r2, #0]
10009468:	2a03      	cmp	r2, #3
1000946a:	d05e      	beq.n	1000952a <ble_pair_done_handler+0xde>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000946c:	3401      	adds	r4, #1
1000946e:	b2e4      	uxtb	r4, r4
10009470:	337c      	adds	r3, #124	; 0x7c
10009472:	2c05      	cmp	r4, #5
10009474:	d1f2      	bne.n	1000945c <ble_pair_done_handler+0x10>
10009476:	e02b      	b.n	100094d0 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009478:	0163      	lsls	r3, r4, #5
1000947a:	1b1c      	subs	r4, r3, r4
1000947c:	00a4      	lsls	r4, r4, #2
1000947e:	4b2f      	ldr	r3, [pc, #188]	; (1000953c <ble_pair_done_handler+0xf0>)
10009480:	191c      	adds	r4, r3, r4
10009482:	3458      	adds	r4, #88	; 0x58
10009484:	79a3      	ldrb	r3, [r4, #6]
10009486:	2b01      	cmp	r3, #1
10009488:	d913      	bls.n	100094b2 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000948a:	482d      	ldr	r0, [pc, #180]	; (10009540 <ble_pair_done_handler+0xf4>)
1000948c:	4b2d      	ldr	r3, [pc, #180]	; (10009544 <ble_pair_done_handler+0xf8>)
1000948e:	4798      	blx	r3
10009490:	482d      	ldr	r0, [pc, #180]	; (10009548 <ble_pair_done_handler+0xfc>)
10009492:	4b2e      	ldr	r3, [pc, #184]	; (1000954c <ble_pair_done_handler+0x100>)
10009494:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009496:	8868      	ldrh	r0, [r5, #2]
10009498:	2113      	movs	r1, #19
1000949a:	4b2d      	ldr	r3, [pc, #180]	; (10009550 <ble_pair_done_handler+0x104>)
1000949c:	4798      	blx	r3
1000949e:	1e06      	subs	r6, r0, #0
100094a0:	d047      	beq.n	10009532 <ble_pair_done_handler+0xe6>
			{
				DBG_LOG("Disconnect Request Failed");
100094a2:	4827      	ldr	r0, [pc, #156]	; (10009540 <ble_pair_done_handler+0xf4>)
100094a4:	4b27      	ldr	r3, [pc, #156]	; (10009544 <ble_pair_done_handler+0xf8>)
100094a6:	4798      	blx	r3
100094a8:	482a      	ldr	r0, [pc, #168]	; (10009554 <ble_pair_done_handler+0x108>)
100094aa:	4b28      	ldr	r3, [pc, #160]	; (1000954c <ble_pair_done_handler+0x100>)
100094ac:	4798      	blx	r3
				return AT_BLE_FAILURE;
100094ae:	26e2      	movs	r6, #226	; 0xe2
100094b0:	e03f      	b.n	10009532 <ble_pair_done_handler+0xe6>
			}
		}
	}
	return AT_BLE_SUCCESS;
100094b2:	2600      	movs	r6, #0
100094b4:	e03d      	b.n	10009532 <ble_pair_done_handler+0xe6>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
100094b6:	4e22      	ldr	r6, [pc, #136]	; (10009540 <ble_pair_done_handler+0xf4>)
100094b8:	1c30      	adds	r0, r6, #0
100094ba:	4d22      	ldr	r5, [pc, #136]	; (10009544 <ble_pair_done_handler+0xf8>)
100094bc:	47a8      	blx	r5
100094be:	4826      	ldr	r0, [pc, #152]	; (10009558 <ble_pair_done_handler+0x10c>)
100094c0:	4c22      	ldr	r4, [pc, #136]	; (1000954c <ble_pair_done_handler+0x100>)
100094c2:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
100094c4:	1c30      	adds	r0, r6, #0
100094c6:	47a8      	blx	r5
100094c8:	4824      	ldr	r0, [pc, #144]	; (1000955c <ble_pair_done_handler+0x110>)
100094ca:	47a0      	blx	r4
			return AT_BLE_FAILURE;
100094cc:	26e2      	movs	r6, #226	; 0xe2
100094ce:	e030      	b.n	10009532 <ble_pair_done_handler+0xe6>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
100094d0:	792b      	ldrb	r3, [r5, #4]
100094d2:	2b00      	cmp	r3, #0
100094d4:	d1d0      	bne.n	10009478 <ble_pair_done_handler+0x2c>
100094d6:	e7ee      	b.n	100094b6 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
100094d8:	4819      	ldr	r0, [pc, #100]	; (10009540 <ble_pair_done_handler+0xf4>)
100094da:	4b1a      	ldr	r3, [pc, #104]	; (10009544 <ble_pair_done_handler+0xf8>)
100094dc:	4798      	blx	r3
100094de:	481e      	ldr	r0, [pc, #120]	; (10009558 <ble_pair_done_handler+0x10c>)
100094e0:	4b1a      	ldr	r3, [pc, #104]	; (1000954c <ble_pair_done_handler+0x100>)
100094e2:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
100094e4:	782a      	ldrb	r2, [r5, #0]
100094e6:	4b15      	ldr	r3, [pc, #84]	; (1000953c <ble_pair_done_handler+0xf0>)
100094e8:	4699      	mov	r9, r3
100094ea:	237c      	movs	r3, #124	; 0x7c
100094ec:	435c      	muls	r4, r3
100094ee:	464b      	mov	r3, r9
100094f0:	191f      	adds	r7, r3, r4
100094f2:	1c3b      	adds	r3, r7, #0
100094f4:	753a      	strb	r2, [r7, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
100094f6:	792a      	ldrb	r2, [r5, #4]
100094f8:	763a      	strb	r2, [r7, #24]
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
100094fa:	3310      	adds	r3, #16
			ble_dev_info[idx].bond_info.status = pairing_params->status;
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
100094fc:	3348      	adds	r3, #72	; 0x48
100094fe:	2205      	movs	r2, #5
10009500:	719a      	strb	r2, [r3, #6]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009502:	1c38      	adds	r0, r7, #0
10009504:	3036      	adds	r0, #54	; 0x36
10009506:	1c29      	adds	r1, r5, #0
10009508:	3122      	adds	r1, #34	; 0x22
1000950a:	320b      	adds	r2, #11
1000950c:	4b14      	ldr	r3, [pc, #80]	; (10009560 <ble_pair_done_handler+0x114>)
1000950e:	4698      	mov	r8, r3
10009510:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009512:	1c38      	adds	r0, r7, #0
10009514:	3046      	adds	r0, #70	; 0x46
10009516:	1c29      	adds	r1, r5, #0
10009518:	3132      	adds	r1, #50	; 0x32
1000951a:	2217      	movs	r2, #23
1000951c:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000951e:	1c38      	adds	r0, r7, #0
10009520:	301a      	adds	r0, #26
10009522:	1da9      	adds	r1, r5, #6
10009524:	221c      	movs	r2, #28
10009526:	47c0      	blx	r8
10009528:	e003      	b.n	10009532 <ble_pair_done_handler+0xe6>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000952a:	792e      	ldrb	r6, [r5, #4]
1000952c:	2e00      	cmp	r6, #0
1000952e:	d1a3      	bne.n	10009478 <ble_pair_done_handler+0x2c>
10009530:	e7d2      	b.n	100094d8 <ble_pair_done_handler+0x8c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009532:	1c30      	adds	r0, r6, #0
10009534:	bc0c      	pop	{r2, r3}
10009536:	4690      	mov	r8, r2
10009538:	4699      	mov	r9, r3
1000953a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000953c:	1001207c 	.word	0x1001207c
10009540:	10010cc8 	.word	0x10010cc8
10009544:	1000f919 	.word	0x1000f919
10009548:	10010df8 	.word	0x10010df8
1000954c:	1000f7f9 	.word	0x1000f7f9
10009550:	1000c5bd 	.word	0x1000c5bd
10009554:	10010e18 	.word	0x10010e18
10009558:	10010e34 	.word	0x10010e34
1000955c:	10010e60 	.word	0x10010e60
10009560:	1000f7d7 	.word	0x1000f7d7

10009564 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009564:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009566:	8800      	ldrh	r0, [r0, #0]
10009568:	2101      	movs	r1, #1
1000956a:	2201      	movs	r2, #1
1000956c:	2378      	movs	r3, #120	; 0x78
1000956e:	4c02      	ldr	r4, [pc, #8]	; (10009578 <ble_conn_param_update_req+0x14>)
10009570:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009572:	2000      	movs	r0, #0
10009574:	bd10      	pop	{r4, pc}
10009576:	46c0      	nop			; (mov r8, r8)
10009578:	1000c5dd 	.word	0x1000c5dd

1000957c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000957c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000957e:	4657      	mov	r7, sl
10009580:	464e      	mov	r6, r9
10009582:	4645      	mov	r5, r8
10009584:	b4e0      	push	{r5, r6, r7}
10009586:	b084      	sub	sp, #16
10009588:	1c04      	adds	r4, r0, #0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000958a:	aa01      	add	r2, sp, #4
1000958c:	2300      	movs	r3, #0
1000958e:	9301      	str	r3, [sp, #4]
10009590:	9302      	str	r3, [sp, #8]
10009592:	7213      	strb	r3, [r2, #8]
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009594:	8806      	ldrh	r6, [r0, #0]
10009596:	496b      	ldr	r1, [pc, #428]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
10009598:	1c0a      	adds	r2, r1, #0
1000959a:	b2dd      	uxtb	r5, r3
1000959c:	1c1f      	adds	r7, r3, #0
1000959e:	8910      	ldrh	r0, [r2, #8]
100095a0:	42b0      	cmp	r0, r6
100095a2:	d114      	bne.n	100095ce <ble_slave_security_request_handler+0x52>
100095a4:	1c10      	adds	r0, r2, #0
100095a6:	305e      	adds	r0, #94	; 0x5e
100095a8:	7800      	ldrb	r0, [r0, #0]
100095aa:	2802      	cmp	r0, #2
100095ac:	d10f      	bne.n	100095ce <ble_slave_security_request_handler+0x52>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
100095ae:	4a65      	ldr	r2, [pc, #404]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
100095b0:	015b      	lsls	r3, r3, #5
100095b2:	1bdb      	subs	r3, r3, r7
100095b4:	009b      	lsls	r3, r3, #2
100095b6:	18d3      	adds	r3, r2, r3
100095b8:	3358      	adds	r3, #88	; 0x58
100095ba:	3004      	adds	r0, #4
100095bc:	7198      	strb	r0, [r3, #6]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
100095be:	016b      	lsls	r3, r5, #5
100095c0:	1b5b      	subs	r3, r3, r5
100095c2:	009b      	lsls	r3, r3, #2
100095c4:	18d3      	adds	r3, r2, r3
100095c6:	7d1a      	ldrb	r2, [r3, #20]
100095c8:	07d3      	lsls	r3, r2, #31
100095ca:	d405      	bmi.n	100095d8 <ble_slave_security_request_handler+0x5c>
100095cc:	e01b      	b.n	10009606 <ble_slave_security_request_handler+0x8a>
100095ce:	3301      	adds	r3, #1
100095d0:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100095d2:	2b05      	cmp	r3, #5
100095d4:	d1e1      	bne.n	1000959a <ble_slave_security_request_handler+0x1e>
100095d6:	e01e      	b.n	10009616 <ble_slave_security_request_handler+0x9a>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
100095d8:	78e3      	ldrb	r3, [r4, #3]
100095da:	2b00      	cmp	r3, #0
100095dc:	d013      	beq.n	10009606 <ble_slave_security_request_handler+0x8a>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
100095de:	8820      	ldrh	r0, [r4, #0]
100095e0:	0169      	lsls	r1, r5, #5
100095e2:	1b49      	subs	r1, r1, r5
100095e4:	008d      	lsls	r5, r1, #2
100095e6:	4957      	ldr	r1, [pc, #348]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
100095e8:	1949      	adds	r1, r1, r5
100095ea:	311a      	adds	r1, #26
100095ec:	4b56      	ldr	r3, [pc, #344]	; (10009748 <ble_slave_security_request_handler+0x1cc>)
100095ee:	4798      	blx	r3
100095f0:	2800      	cmp	r0, #0
100095f2:	d100      	bne.n	100095f6 <ble_slave_security_request_handler+0x7a>
100095f4:	e0a0      	b.n	10009738 <ble_slave_security_request_handler+0x1bc>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
100095f6:	4855      	ldr	r0, [pc, #340]	; (1000974c <ble_slave_security_request_handler+0x1d0>)
100095f8:	4b55      	ldr	r3, [pc, #340]	; (10009750 <ble_slave_security_request_handler+0x1d4>)
100095fa:	4798      	blx	r3
100095fc:	4855      	ldr	r0, [pc, #340]	; (10009754 <ble_slave_security_request_handler+0x1d8>)
100095fe:	4b56      	ldr	r3, [pc, #344]	; (10009758 <ble_slave_security_request_handler+0x1dc>)
10009600:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009602:	20e2      	movs	r0, #226	; 0xe2
10009604:	e098      	b.n	10009738 <ble_slave_security_request_handler+0x1bc>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009606:	016b      	lsls	r3, r5, #5
10009608:	1b5d      	subs	r5, r3, r5
1000960a:	00ad      	lsls	r5, r5, #2
1000960c:	4b4d      	ldr	r3, [pc, #308]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
1000960e:	195d      	adds	r5, r3, r5
10009610:	3558      	adds	r5, #88	; 0x58
10009612:	2302      	movs	r3, #2
10009614:	71ab      	strb	r3, [r5, #6]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009616:	8825      	ldrh	r5, [r4, #0]
10009618:	2200      	movs	r2, #0
1000961a:	b2d3      	uxtb	r3, r2
1000961c:	1c16      	adds	r6, r2, #0
1000961e:	8908      	ldrh	r0, [r1, #8]
10009620:	42a8      	cmp	r0, r5
10009622:	d10d      	bne.n	10009640 <ble_slave_security_request_handler+0xc4>
10009624:	1c08      	adds	r0, r1, #0
10009626:	305e      	adds	r0, #94	; 0x5e
10009628:	7800      	ldrb	r0, [r0, #0]
1000962a:	2802      	cmp	r0, #2
1000962c:	d108      	bne.n	10009640 <ble_slave_security_request_handler+0xc4>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000962e:	0152      	lsls	r2, r2, #5
10009630:	1b92      	subs	r2, r2, r6
10009632:	0096      	lsls	r6, r2, #2
10009634:	4a43      	ldr	r2, [pc, #268]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
10009636:	1992      	adds	r2, r2, r6
10009638:	3258      	adds	r2, #88	; 0x58
1000963a:	2103      	movs	r1, #3
1000963c:	7191      	strb	r1, [r2, #6]
			break;
1000963e:	e005      	b.n	1000964c <ble_slave_security_request_handler+0xd0>
10009640:	3301      	adds	r3, #1
10009642:	b2db      	uxtb	r3, r3
10009644:	3201      	adds	r2, #1
10009646:	317c      	adds	r1, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009648:	2a05      	cmp	r2, #5
1000964a:	d1e6      	bne.n	1000961a <ble_slave_security_request_handler+0x9e>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000964c:	aa01      	add	r2, sp, #4
1000964e:	2102      	movs	r1, #2
10009650:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
10009652:	78e1      	ldrb	r1, [r4, #3]
10009654:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
10009656:	2101      	movs	r1, #1
10009658:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000965a:	3103      	adds	r1, #3
1000965c:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000965e:	1c1f      	adds	r7, r3, #0
10009660:	015a      	lsls	r2, r3, #5
10009662:	1ad2      	subs	r2, r2, r3
10009664:	0092      	lsls	r2, r2, #2
10009666:	4937      	ldr	r1, [pc, #220]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
10009668:	5c52      	ldrb	r2, [r2, r1]
1000966a:	2a02      	cmp	r2, #2
1000966c:	d104      	bne.n	10009678 <ble_slave_security_request_handler+0xfc>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000966e:	aa01      	add	r2, sp, #4
10009670:	2103      	movs	r1, #3
10009672:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009674:	71d1      	strb	r1, [r2, #7]
10009676:	e044      	b.n	10009702 <ble_slave_security_request_handler+0x186>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009678:	aa01      	add	r2, sp, #4
1000967a:	2101      	movs	r1, #1
1000967c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000967e:	71d1      	strb	r1, [r2, #7]
10009680:	e03f      	b.n	10009702 <ble_slave_security_request_handler+0x186>
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009682:	47c8      	blx	r9
10009684:	4643      	mov	r3, r8
10009686:	4018      	ands	r0, r3
10009688:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000968a:	47c8      	blx	r9
1000968c:	4643      	mov	r3, r8
1000968e:	4018      	ands	r0, r3
10009690:	74b0      	strb	r0, [r6, #18]
10009692:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009694:	42ae      	cmp	r6, r5
10009696:	d1f4      	bne.n	10009682 <ble_slave_security_request_handler+0x106>
10009698:	4653      	mov	r3, sl
1000969a:	3370      	adds	r3, #112	; 0x70
1000969c:	4a29      	ldr	r2, [pc, #164]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
1000969e:	189e      	adds	r6, r3, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
100096a0:	4b2e      	ldr	r3, [pc, #184]	; (1000975c <ble_slave_security_request_handler+0x1e0>)
100096a2:	4699      	mov	r9, r3
100096a4:	230f      	movs	r3, #15
100096a6:	4698      	mov	r8, r3
100096a8:	47c8      	blx	r9
100096aa:	4643      	mov	r3, r8
100096ac:	4018      	ands	r0, r3
100096ae:	7028      	strb	r0, [r5, #0]
100096b0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
100096b2:	42b5      	cmp	r5, r6
100096b4:	d1f8      	bne.n	100096a8 <ble_slave_security_request_handler+0x12c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
100096b6:	4b29      	ldr	r3, [pc, #164]	; (1000975c <ble_slave_security_request_handler+0x1e0>)
100096b8:	4798      	blx	r3
100096ba:	017b      	lsls	r3, r7, #5
100096bc:	1bdb      	subs	r3, r3, r7
100096be:	009b      	lsls	r3, r3, #2
100096c0:	4a20      	ldr	r2, [pc, #128]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
100096c2:	18d3      	adds	r3, r2, r3
100096c4:	1c1a      	adds	r2, r3, #0
100096c6:	3270      	adds	r2, #112	; 0x70
100096c8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
100096ca:	3378      	adds	r3, #120	; 0x78
100096cc:	2210      	movs	r2, #16
100096ce:	709a      	strb	r2, [r3, #2]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
100096d0:	8820      	ldrh	r0, [r4, #0]
100096d2:	017a      	lsls	r2, r7, #5
100096d4:	1bd7      	subs	r7, r2, r7
100096d6:	00bf      	lsls	r7, r7, #2
100096d8:	3760      	adds	r7, #96	; 0x60
100096da:	4a1a      	ldr	r2, [pc, #104]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
100096dc:	18ba      	adds	r2, r7, r2
100096de:	a901      	add	r1, sp, #4
100096e0:	2300      	movs	r3, #0
100096e2:	4c1f      	ldr	r4, [pc, #124]	; (10009760 <ble_slave_security_request_handler+0x1e4>)
100096e4:	47a0      	blx	r4
100096e6:	2800      	cmp	r0, #0
100096e8:	d026      	beq.n	10009738 <ble_slave_security_request_handler+0x1bc>
	{
		features.bond = false;
100096ea:	ab01      	add	r3, sp, #4
100096ec:	2200      	movs	r2, #0
100096ee:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
100096f0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
100096f2:	4816      	ldr	r0, [pc, #88]	; (1000974c <ble_slave_security_request_handler+0x1d0>)
100096f4:	4b16      	ldr	r3, [pc, #88]	; (10009750 <ble_slave_security_request_handler+0x1d4>)
100096f6:	4798      	blx	r3
100096f8:	481a      	ldr	r0, [pc, #104]	; (10009764 <ble_slave_security_request_handler+0x1e8>)
100096fa:	4b17      	ldr	r3, [pc, #92]	; (10009758 <ble_slave_security_request_handler+0x1dc>)
100096fc:	4798      	blx	r3
		return AT_BLE_FAILURE;
100096fe:	20e2      	movs	r0, #226	; 0xe2
10009700:	e01a      	b.n	10009738 <ble_slave_security_request_handler+0x1bc>
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
	}
	features.max_key_size = 16;
10009702:	aa01      	add	r2, sp, #4
10009704:	2110      	movs	r1, #16
10009706:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009708:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000970a:	017a      	lsls	r2, r7, #5
1000970c:	1bd2      	subs	r2, r2, r7
1000970e:	0092      	lsls	r2, r2, #2
10009710:	490c      	ldr	r1, [pc, #48]	; (10009744 <ble_slave_security_request_handler+0x1c8>)
10009712:	188a      	adds	r2, r1, r2
10009714:	7e12      	ldrb	r2, [r2, #24]
10009716:	2a40      	cmp	r2, #64	; 0x40
10009718:	d1da      	bne.n	100096d0 <ble_slave_security_request_handler+0x154>
1000971a:	015a      	lsls	r2, r3, #5
1000971c:	1ad3      	subs	r3, r2, r3
1000971e:	009b      	lsls	r3, r3, #2
10009720:	469a      	mov	sl, r3
10009722:	1c1e      	adds	r6, r3, #0
10009724:	3660      	adds	r6, #96	; 0x60
10009726:	1876      	adds	r6, r6, r1
10009728:	4655      	mov	r5, sl
1000972a:	3568      	adds	r5, #104	; 0x68
1000972c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000972e:	4b0b      	ldr	r3, [pc, #44]	; (1000975c <ble_slave_security_request_handler+0x1e0>)
10009730:	4699      	mov	r9, r3
10009732:	230f      	movs	r3, #15
10009734:	4698      	mov	r8, r3
10009736:	e7a4      	b.n	10009682 <ble_slave_security_request_handler+0x106>
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009738:	b004      	add	sp, #16
1000973a:	bc1c      	pop	{r2, r3, r4}
1000973c:	4690      	mov	r8, r2
1000973e:	4699      	mov	r9, r3
10009740:	46a2      	mov	sl, r4
10009742:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009744:	1001207c 	.word	0x1001207c
10009748:	1000cba5 	.word	0x1000cba5
1000974c:	10010cc8 	.word	0x10010cc8
10009750:	1000f919 	.word	0x1000f919
10009754:	10010e90 	.word	0x10010e90
10009758:	1000f7f9 	.word	0x1000f7f9
1000975c:	1000f92d 	.word	0x1000f92d
10009760:	1000c9b9 	.word	0x1000c9b9
10009764:	10010ea8 	.word	0x10010ea8

10009768 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009768:	b5f0      	push	{r4, r5, r6, r7, lr}
1000976a:	4657      	mov	r7, sl
1000976c:	464e      	mov	r6, r9
1000976e:	4645      	mov	r5, r8
10009770:	b4e0      	push	{r5, r6, r7}
10009772:	b084      	sub	sp, #16
10009774:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009776:	8804      	ldrh	r4, [r0, #0]
10009778:	4949      	ldr	r1, [pc, #292]	; (100098a0 <ble_pair_request_handler+0x138>)
1000977a:	2200      	movs	r2, #0
1000977c:	b2d3      	uxtb	r3, r2
1000977e:	1c15      	adds	r5, r2, #0
10009780:	8908      	ldrh	r0, [r1, #8]
10009782:	42a0      	cmp	r0, r4
10009784:	d10d      	bne.n	100097a2 <ble_pair_request_handler+0x3a>
10009786:	1c08      	adds	r0, r1, #0
10009788:	305e      	adds	r0, #94	; 0x5e
1000978a:	7800      	ldrb	r0, [r0, #0]
1000978c:	2802      	cmp	r0, #2
1000978e:	d108      	bne.n	100097a2 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009790:	0152      	lsls	r2, r2, #5
10009792:	1b52      	subs	r2, r2, r5
10009794:	0095      	lsls	r5, r2, #2
10009796:	4a42      	ldr	r2, [pc, #264]	; (100098a0 <ble_pair_request_handler+0x138>)
10009798:	1952      	adds	r2, r2, r5
1000979a:	3258      	adds	r2, #88	; 0x58
1000979c:	2103      	movs	r1, #3
1000979e:	7191      	strb	r1, [r2, #6]
			break;
100097a0:	e005      	b.n	100097ae <ble_pair_request_handler+0x46>
100097a2:	3301      	adds	r3, #1
100097a4:	b2db      	uxtb	r3, r3
100097a6:	3201      	adds	r2, #1
100097a8:	317c      	adds	r1, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100097aa:	2a05      	cmp	r2, #5
100097ac:	d1e6      	bne.n	1000977c <ble_pair_request_handler+0x14>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
100097ae:	aa01      	add	r2, sp, #4
100097b0:	2102      	movs	r1, #2
100097b2:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
100097b4:	3901      	subs	r1, #1
100097b6:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
100097b8:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
100097ba:	2100      	movs	r1, #0
100097bc:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
100097be:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
100097c0:	1c1f      	adds	r7, r3, #0
100097c2:	015a      	lsls	r2, r3, #5
100097c4:	1ad2      	subs	r2, r2, r3
100097c6:	0092      	lsls	r2, r2, #2
100097c8:	4935      	ldr	r1, [pc, #212]	; (100098a0 <ble_pair_request_handler+0x138>)
100097ca:	5c52      	ldrb	r2, [r2, r1]
100097cc:	2a02      	cmp	r2, #2
100097ce:	d104      	bne.n	100097da <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
100097d0:	aa01      	add	r2, sp, #4
100097d2:	2103      	movs	r1, #3
100097d4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
100097d6:	71d1      	strb	r1, [r2, #7]
100097d8:	e041      	b.n	1000985e <ble_pair_request_handler+0xf6>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
100097da:	aa01      	add	r2, sp, #4
100097dc:	2101      	movs	r1, #1
100097de:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
100097e0:	71d1      	strb	r1, [r2, #7]
100097e2:	e03c      	b.n	1000985e <ble_pair_request_handler+0xf6>
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
100097e4:	47c8      	blx	r9
100097e6:	4030      	ands	r0, r6
100097e8:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
100097ea:	47c8      	blx	r9
100097ec:	4030      	ands	r0, r6
100097ee:	74a8      	strb	r0, [r5, #18]
100097f0:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
100097f2:	42a5      	cmp	r5, r4
100097f4:	d1f6      	bne.n	100097e4 <ble_pair_request_handler+0x7c>
100097f6:	4653      	mov	r3, sl
100097f8:	3370      	adds	r3, #112	; 0x70
100097fa:	4a29      	ldr	r2, [pc, #164]	; (100098a0 <ble_pair_request_handler+0x138>)
100097fc:	189d      	adds	r5, r3, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
100097fe:	4b29      	ldr	r3, [pc, #164]	; (100098a4 <ble_pair_request_handler+0x13c>)
10009800:	4699      	mov	r9, r3
10009802:	260f      	movs	r6, #15
10009804:	47c8      	blx	r9
10009806:	4030      	ands	r0, r6
10009808:	7020      	strb	r0, [r4, #0]
1000980a:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000980c:	42ac      	cmp	r4, r5
1000980e:	d1f9      	bne.n	10009804 <ble_pair_request_handler+0x9c>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009810:	4b24      	ldr	r3, [pc, #144]	; (100098a4 <ble_pair_request_handler+0x13c>)
10009812:	4798      	blx	r3
10009814:	017b      	lsls	r3, r7, #5
10009816:	1bdb      	subs	r3, r3, r7
10009818:	009b      	lsls	r3, r3, #2
1000981a:	4a21      	ldr	r2, [pc, #132]	; (100098a0 <ble_pair_request_handler+0x138>)
1000981c:	18d3      	adds	r3, r2, r3
1000981e:	1c1a      	adds	r2, r3, #0
10009820:	3270      	adds	r2, #112	; 0x70
10009822:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009824:	3378      	adds	r3, #120	; 0x78
10009826:	2210      	movs	r2, #16
10009828:	709a      	strb	r2, [r3, #2]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000982a:	4643      	mov	r3, r8
1000982c:	8818      	ldrh	r0, [r3, #0]
1000982e:	017a      	lsls	r2, r7, #5
10009830:	1bd7      	subs	r7, r2, r7
10009832:	00bf      	lsls	r7, r7, #2
10009834:	3760      	adds	r7, #96	; 0x60
10009836:	4a1a      	ldr	r2, [pc, #104]	; (100098a0 <ble_pair_request_handler+0x138>)
10009838:	18ba      	adds	r2, r7, r2
1000983a:	a901      	add	r1, sp, #4
1000983c:	2300      	movs	r3, #0
1000983e:	4c1a      	ldr	r4, [pc, #104]	; (100098a8 <ble_pair_request_handler+0x140>)
10009840:	47a0      	blx	r4
10009842:	2800      	cmp	r0, #0
10009844:	d025      	beq.n	10009892 <ble_pair_request_handler+0x12a>
	{
		features.bond = false;
10009846:	ab01      	add	r3, sp, #4
10009848:	2200      	movs	r2, #0
1000984a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000984c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000984e:	4817      	ldr	r0, [pc, #92]	; (100098ac <ble_pair_request_handler+0x144>)
10009850:	4b17      	ldr	r3, [pc, #92]	; (100098b0 <ble_pair_request_handler+0x148>)
10009852:	4798      	blx	r3
10009854:	4817      	ldr	r0, [pc, #92]	; (100098b4 <ble_pair_request_handler+0x14c>)
10009856:	4b18      	ldr	r3, [pc, #96]	; (100098b8 <ble_pair_request_handler+0x150>)
10009858:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000985a:	20e2      	movs	r0, #226	; 0xe2
1000985c:	e019      	b.n	10009892 <ble_pair_request_handler+0x12a>
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
	}
			
	features.max_key_size = 16;
1000985e:	aa01      	add	r2, sp, #4
10009860:	2110      	movs	r1, #16
10009862:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009864:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009866:	017a      	lsls	r2, r7, #5
10009868:	1bd2      	subs	r2, r2, r7
1000986a:	0092      	lsls	r2, r2, #2
1000986c:	490c      	ldr	r1, [pc, #48]	; (100098a0 <ble_pair_request_handler+0x138>)
1000986e:	188a      	adds	r2, r1, r2
10009870:	7e12      	ldrb	r2, [r2, #24]
10009872:	2a40      	cmp	r2, #64	; 0x40
10009874:	d1d9      	bne.n	1000982a <ble_pair_request_handler+0xc2>
10009876:	015a      	lsls	r2, r3, #5
10009878:	1ad3      	subs	r3, r2, r3
1000987a:	009b      	lsls	r3, r3, #2
1000987c:	469a      	mov	sl, r3
1000987e:	1c1d      	adds	r5, r3, #0
10009880:	3560      	adds	r5, #96	; 0x60
10009882:	186d      	adds	r5, r5, r1
10009884:	4654      	mov	r4, sl
10009886:	3468      	adds	r4, #104	; 0x68
10009888:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000988a:	4b06      	ldr	r3, [pc, #24]	; (100098a4 <ble_pair_request_handler+0x13c>)
1000988c:	4699      	mov	r9, r3
1000988e:	260f      	movs	r6, #15
10009890:	e7a8      	b.n	100097e4 <ble_pair_request_handler+0x7c>
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009892:	b004      	add	sp, #16
10009894:	bc1c      	pop	{r2, r3, r4}
10009896:	4690      	mov	r8, r2
10009898:	4699      	mov	r9, r3
1000989a:	46a2      	mov	sl, r4
1000989c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000989e:	46c0      	nop			; (mov r8, r8)
100098a0:	1001207c 	.word	0x1001207c
100098a4:	1000f92d 	.word	0x1000f92d
100098a8:	1000c9b9 	.word	0x1000c9b9
100098ac:	10010cc8 	.word	0x10010cc8
100098b0:	1000f919 	.word	0x1000f919
100098b4:	10010ed4 	.word	0x10010ed4
100098b8:	1000f7f9 	.word	0x1000f7f9

100098bc <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
100098bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100098be:	4647      	mov	r7, r8
100098c0:	b480      	push	{r7}
100098c2:	b084      	sub	sp, #16
100098c4:	1c05      	adds	r5, r0, #0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
100098c6:	a802      	add	r0, sp, #8
100098c8:	4943      	ldr	r1, [pc, #268]	; (100099d8 <ble_pair_key_request_handler+0x11c>)
100098ca:	2206      	movs	r2, #6
100098cc:	4e43      	ldr	r6, [pc, #268]	; (100099dc <ble_pair_key_request_handler+0x120>)
100098ce:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
100098d0:	ac01      	add	r4, sp, #4
100098d2:	1c20      	adds	r0, r4, #0
100098d4:	1c29      	adds	r1, r5, #0
100098d6:	2204      	movs	r2, #4
100098d8:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
100098da:	78e3      	ldrb	r3, [r4, #3]
100098dc:	2b00      	cmp	r3, #0
100098de:	d167      	bne.n	100099b0 <ble_pair_key_request_handler+0xf4>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
100098e0:	483f      	ldr	r0, [pc, #252]	; (100099e0 <ble_pair_key_request_handler+0x124>)
100098e2:	4b40      	ldr	r3, [pc, #256]	; (100099e4 <ble_pair_key_request_handler+0x128>)
100098e4:	4798      	blx	r3
100098e6:	4840      	ldr	r0, [pc, #256]	; (100099e8 <ble_pair_key_request_handler+0x12c>)
100098e8:	4b40      	ldr	r3, [pc, #256]	; (100099ec <ble_pair_key_request_handler+0x130>)
100098ea:	4798      	blx	r3
100098ec:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
100098ee:	4c40      	ldr	r4, [pc, #256]	; (100099f0 <ble_pair_key_request_handler+0x134>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
100098f0:	23ff      	movs	r3, #255	; 0xff
100098f2:	4698      	mov	r8, r3
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
100098f4:	b2f7      	uxtb	r7, r6
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
100098f6:	201e      	movs	r0, #30
100098f8:	47a0      	blx	r4
100098fa:	b2c3      	uxtb	r3, r0

			if (!pin) {
100098fc:	2b00      	cmp	r3, #0
100098fe:	d11a      	bne.n	10009936 <ble_pair_key_request_handler+0x7a>
			DBG_LOG("Pin Timeout");
10009900:	4f37      	ldr	r7, [pc, #220]	; (100099e0 <ble_pair_key_request_handler+0x124>)
10009902:	1c38      	adds	r0, r7, #0
10009904:	4e37      	ldr	r6, [pc, #220]	; (100099e4 <ble_pair_key_request_handler+0x128>)
10009906:	47b0      	blx	r6
10009908:	483a      	ldr	r0, [pc, #232]	; (100099f4 <ble_pair_key_request_handler+0x138>)
1000990a:	4c38      	ldr	r4, [pc, #224]	; (100099ec <ble_pair_key_request_handler+0x130>)
1000990c:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000990e:	1c38      	adds	r0, r7, #0
10009910:	47b0      	blx	r6
10009912:	4839      	ldr	r0, [pc, #228]	; (100099f8 <ble_pair_key_request_handler+0x13c>)
10009914:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
10009916:	8828      	ldrh	r0, [r5, #0]
10009918:	2113      	movs	r1, #19
1000991a:	4b38      	ldr	r3, [pc, #224]	; (100099fc <ble_pair_key_request_handler+0x140>)
1000991c:	4798      	blx	r3
1000991e:	1c03      	adds	r3, r0, #0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
10009920:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
10009922:	2b00      	cmp	r3, #0
10009924:	d053      	beq.n	100099ce <ble_pair_key_request_handler+0x112>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
10009926:	482e      	ldr	r0, [pc, #184]	; (100099e0 <ble_pair_key_request_handler+0x124>)
10009928:	4b2e      	ldr	r3, [pc, #184]	; (100099e4 <ble_pair_key_request_handler+0x128>)
1000992a:	4798      	blx	r3
1000992c:	4834      	ldr	r0, [pc, #208]	; (10009a00 <ble_pair_key_request_handler+0x144>)
1000992e:	4b2f      	ldr	r3, [pc, #188]	; (100099ec <ble_pair_key_request_handler+0x130>)
10009930:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
10009932:	20e2      	movs	r0, #226	; 0xe2
10009934:	e04b      	b.n	100099ce <ble_pair_key_request_handler+0x112>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
10009936:	1c1a      	adds	r2, r3, #0
10009938:	3a30      	subs	r2, #48	; 0x30
1000993a:	2a09      	cmp	r2, #9
1000993c:	d809      	bhi.n	10009952 <ble_pair_key_request_handler+0x96>
			  passkey[idx++] = pin;
1000993e:	aa02      	add	r2, sp, #8
10009940:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
10009942:	4643      	mov	r3, r8
10009944:	4018      	ands	r0, r3
10009946:	4b2f      	ldr	r3, [pc, #188]	; (10009a04 <ble_pair_key_request_handler+0x148>)
10009948:	4798      	blx	r3
1000994a:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000994c:	2e06      	cmp	r6, #6
1000994e:	d028      	beq.n	100099a2 <ble_pair_key_request_handler+0xe6>
10009950:	e7d0      	b.n	100098f4 <ble_pair_key_request_handler+0x38>
10009952:	2f05      	cmp	r7, #5
10009954:	d9cf      	bls.n	100098f6 <ble_pair_key_request_handler+0x3a>
10009956:	e024      	b.n	100099a2 <ble_pair_key_request_handler+0xe6>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
10009958:	4821      	ldr	r0, [pc, #132]	; (100099e0 <ble_pair_key_request_handler+0x124>)
1000995a:	4b22      	ldr	r3, [pc, #136]	; (100099e4 <ble_pair_key_request_handler+0x128>)
1000995c:	4798      	blx	r3
1000995e:	482a      	ldr	r0, [pc, #168]	; (10009a08 <ble_pair_key_request_handler+0x14c>)
10009960:	4b22      	ldr	r3, [pc, #136]	; (100099ec <ble_pair_key_request_handler+0x130>)
10009962:	4798      	blx	r3
10009964:	e02b      	b.n	100099be <ble_pair_key_request_handler+0x102>
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
10009966:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
10009968:	5ce0      	ldrb	r0, [r4, r3]
1000996a:	47b0      	blx	r6
1000996c:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000996e:	2c06      	cmp	r4, #6
10009970:	d1f9      	bne.n	10009966 <ble_pair_key_request_handler+0xaa>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
10009972:	8828      	ldrh	r0, [r5, #0]
10009974:	ab01      	add	r3, sp, #4
10009976:	7899      	ldrb	r1, [r3, #2]
10009978:	aa02      	add	r2, sp, #8
1000997a:	4b24      	ldr	r3, [pc, #144]	; (10009a0c <ble_pair_key_request_handler+0x150>)
1000997c:	4798      	blx	r3
1000997e:	2800      	cmp	r0, #0
10009980:	d025      	beq.n	100099ce <ble_pair_key_request_handler+0x112>
          {
                  DBG_LOG("Pair-key reply failed");
10009982:	4817      	ldr	r0, [pc, #92]	; (100099e0 <ble_pair_key_request_handler+0x124>)
10009984:	4b17      	ldr	r3, [pc, #92]	; (100099e4 <ble_pair_key_request_handler+0x128>)
10009986:	4798      	blx	r3
10009988:	4821      	ldr	r0, [pc, #132]	; (10009a10 <ble_pair_key_request_handler+0x154>)
1000998a:	4b18      	ldr	r3, [pc, #96]	; (100099ec <ble_pair_key_request_handler+0x130>)
1000998c:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000998e:	2000      	movs	r0, #0
10009990:	e01d      	b.n	100099ce <ble_pair_key_request_handler+0x112>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
10009992:	4813      	ldr	r0, [pc, #76]	; (100099e0 <ble_pair_key_request_handler+0x124>)
10009994:	4b13      	ldr	r3, [pc, #76]	; (100099e4 <ble_pair_key_request_handler+0x128>)
10009996:	4798      	blx	r3
10009998:	481e      	ldr	r0, [pc, #120]	; (10009a14 <ble_pair_key_request_handler+0x158>)
1000999a:	4b14      	ldr	r3, [pc, #80]	; (100099ec <ble_pair_key_request_handler+0x130>)
1000999c:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000999e:	2000      	movs	r0, #0
100099a0:	e015      	b.n	100099ce <ble_pair_key_request_handler+0x112>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
100099a2:	480f      	ldr	r0, [pc, #60]	; (100099e0 <ble_pair_key_request_handler+0x124>)
100099a4:	4b0f      	ldr	r3, [pc, #60]	; (100099e4 <ble_pair_key_request_handler+0x128>)
100099a6:	4798      	blx	r3
100099a8:	481b      	ldr	r0, [pc, #108]	; (10009a18 <ble_pair_key_request_handler+0x15c>)
100099aa:	4b10      	ldr	r3, [pc, #64]	; (100099ec <ble_pair_key_request_handler+0x130>)
100099ac:	4798      	blx	r3
100099ae:	e006      	b.n	100099be <ble_pair_key_request_handler+0x102>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
100099b0:	ab01      	add	r3, sp, #4
100099b2:	885a      	ldrh	r2, [r3, #2]
100099b4:	2380      	movs	r3, #128	; 0x80
100099b6:	005b      	lsls	r3, r3, #1
100099b8:	429a      	cmp	r2, r3
100099ba:	d103      	bne.n	100099c4 <ble_pair_key_request_handler+0x108>
100099bc:	e7cc      	b.n	10009958 <ble_pair_key_request_handler+0x9c>
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
100099be:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
100099c0:	4e10      	ldr	r6, [pc, #64]	; (10009a04 <ble_pair_key_request_handler+0x148>)
100099c2:	e7d0      	b.n	10009966 <ble_pair_key_request_handler+0xaa>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
100099c4:	ab01      	add	r3, sp, #4
100099c6:	789b      	ldrb	r3, [r3, #2]
100099c8:	2b01      	cmp	r3, #1
100099ca:	d0e2      	beq.n	10009992 <ble_pair_key_request_handler+0xd6>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
100099cc:	2000      	movs	r0, #0
}
100099ce:	b004      	add	sp, #16
100099d0:	bc04      	pop	{r2}
100099d2:	4690      	mov	r8, r2
100099d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099d6:	46c0      	nop			; (mov r8, r8)
100099d8:	10010c84 	.word	0x10010c84
100099dc:	1000f7d7 	.word	0x1000f7d7
100099e0:	10010cc8 	.word	0x10010cc8
100099e4:	1000f919 	.word	0x1000f919
100099e8:	10010efc 	.word	0x10010efc
100099ec:	1000f7f9 	.word	0x1000f7f9
100099f0:	1000a675 	.word	0x1000a675
100099f4:	10010f24 	.word	0x10010f24
100099f8:	10010f30 	.word	0x10010f30
100099fc:	1000c5bd 	.word	0x1000c5bd
10009a00:	10010e18 	.word	0x10010e18
10009a04:	1000f82d 	.word	0x1000f82d
10009a08:	10010f44 	.word	0x10010f44
10009a0c:	1000cae9 	.word	0x1000cae9
10009a10:	10010f7c 	.word	0x10010f7c
10009a14:	10010f94 	.word	0x10010f94
10009a18:	10010fb0 	.word	0x10010fb0

10009a1c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
10009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009a1e:	1c06      	adds	r6, r0, #0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009a20:	8801      	ldrh	r1, [r0, #0]
10009a22:	4b30      	ldr	r3, [pc, #192]	; (10009ae4 <ble_encryption_request_handler+0xc8>)
10009a24:	2400      	movs	r4, #0
10009a26:	b2e5      	uxtb	r5, r4
10009a28:	891a      	ldrh	r2, [r3, #8]
10009a2a:	428a      	cmp	r2, r1
10009a2c:	d116      	bne.n	10009a5c <ble_encryption_request_handler+0x40>
10009a2e:	1c1a      	adds	r2, r3, #0
10009a30:	325e      	adds	r2, #94	; 0x5e
10009a32:	7812      	ldrb	r2, [r2, #0]
10009a34:	2a01      	cmp	r2, #1
10009a36:	d911      	bls.n	10009a5c <ble_encryption_request_handler+0x40>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009a38:	492a      	ldr	r1, [pc, #168]	; (10009ae4 <ble_encryption_request_handler+0xc8>)
10009a3a:	0162      	lsls	r2, r4, #5
10009a3c:	1b12      	subs	r2, r2, r4
10009a3e:	0092      	lsls	r2, r2, #2
10009a40:	188a      	adds	r2, r1, r2
10009a42:	3258      	adds	r2, #88	; 0x58
10009a44:	2306      	movs	r3, #6
10009a46:	7193      	strb	r3, [r2, #6]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
10009a48:	016b      	lsls	r3, r5, #5
10009a4a:	1b5b      	subs	r3, r3, r5
10009a4c:	009b      	lsls	r3, r3, #2
10009a4e:	18cb      	adds	r3, r1, r3
10009a50:	3370      	adds	r3, #112	; 0x70
10009a52:	881a      	ldrh	r2, [r3, #0]
10009a54:	8873      	ldrh	r3, [r6, #2]
10009a56:	429a      	cmp	r2, r3
10009a58:	d113      	bne.n	10009a82 <ble_encryption_request_handler+0x66>
10009a5a:	e006      	b.n	10009a6a <ble_encryption_request_handler+0x4e>
10009a5c:	3501      	adds	r5, #1
10009a5e:	b2ed      	uxtb	r5, r5
10009a60:	3401      	adds	r4, #1
10009a62:	337c      	adds	r3, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009a64:	2c05      	cmp	r4, #5
10009a66:	d1de      	bne.n	10009a26 <ble_encryption_request_handler+0xa>
10009a68:	e00b      	b.n	10009a82 <ble_encryption_request_handler+0x66>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
10009a6a:	1d30      	adds	r0, r6, #4
10009a6c:	0169      	lsls	r1, r5, #5
10009a6e:	1b49      	subs	r1, r1, r5
10009a70:	0089      	lsls	r1, r1, #2
10009a72:	4b1c      	ldr	r3, [pc, #112]	; (10009ae4 <ble_encryption_request_handler+0xc8>)
10009a74:	1859      	adds	r1, r3, r1
10009a76:	3172      	adds	r1, #114	; 0x72
10009a78:	2208      	movs	r2, #8
10009a7a:	4b1b      	ldr	r3, [pc, #108]	; (10009ae8 <ble_encryption_request_handler+0xcc>)
10009a7c:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
10009a7e:	2800      	cmp	r0, #0
10009a80:	d015      	beq.n	10009aae <ble_encryption_request_handler+0x92>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
10009a82:	4f1a      	ldr	r7, [pc, #104]	; (10009aec <ble_encryption_request_handler+0xd0>)
10009a84:	1c38      	adds	r0, r7, #0
10009a86:	4e1a      	ldr	r6, [pc, #104]	; (10009af0 <ble_encryption_request_handler+0xd4>)
10009a88:	47b0      	blx	r6
10009a8a:	481a      	ldr	r0, [pc, #104]	; (10009af4 <ble_encryption_request_handler+0xd8>)
10009a8c:	4c1a      	ldr	r4, [pc, #104]	; (10009af8 <ble_encryption_request_handler+0xdc>)
10009a8e:	47a0      	blx	r4
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
10009a90:	1c38      	adds	r0, r7, #0
10009a92:	47b0      	blx	r6
10009a94:	4819      	ldr	r0, [pc, #100]	; (10009afc <ble_encryption_request_handler+0xe0>)
10009a96:	47a0      	blx	r4
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
10009a98:	016b      	lsls	r3, r5, #5
10009a9a:	1b5d      	subs	r5, r3, r5
10009a9c:	00ad      	lsls	r5, r5, #2
10009a9e:	4b11      	ldr	r3, [pc, #68]	; (10009ae4 <ble_encryption_request_handler+0xc8>)
10009aa0:	195d      	adds	r5, r3, r5
10009aa2:	8928      	ldrh	r0, [r5, #8]
10009aa4:	2105      	movs	r1, #5
10009aa6:	4b16      	ldr	r3, [pc, #88]	; (10009b00 <ble_encryption_request_handler+0xe4>)
10009aa8:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009aaa:	20e2      	movs	r0, #226	; 0xe2
10009aac:	e018      	b.n	10009ae0 <ble_encryption_request_handler+0xc4>
10009aae:	23ff      	movs	r3, #255	; 0xff
10009ab0:	401c      	ands	r4, r3
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
10009ab2:	8830      	ldrh	r0, [r6, #0]
10009ab4:	4b0b      	ldr	r3, [pc, #44]	; (10009ae4 <ble_encryption_request_handler+0xc8>)
10009ab6:	0162      	lsls	r2, r4, #5
10009ab8:	1b11      	subs	r1, r2, r4
10009aba:	0089      	lsls	r1, r1, #2
10009abc:	1859      	adds	r1, r3, r1
10009abe:	7d09      	ldrb	r1, [r1, #20]
10009ac0:	1b14      	subs	r4, r2, r4
10009ac2:	00a4      	lsls	r4, r4, #2
10009ac4:	3460      	adds	r4, #96	; 0x60
10009ac6:	18e3      	adds	r3, r4, r3
10009ac8:	2201      	movs	r2, #1
10009aca:	4c0e      	ldr	r4, [pc, #56]	; (10009b04 <ble_encryption_request_handler+0xe8>)
10009acc:	47a0      	blx	r4
10009ace:	2800      	cmp	r0, #0
10009ad0:	d006      	beq.n	10009ae0 <ble_encryption_request_handler+0xc4>
	{
		DBG_LOG("Encryption Request Reply Failed");
10009ad2:	4806      	ldr	r0, [pc, #24]	; (10009aec <ble_encryption_request_handler+0xd0>)
10009ad4:	4b06      	ldr	r3, [pc, #24]	; (10009af0 <ble_encryption_request_handler+0xd4>)
10009ad6:	4798      	blx	r3
10009ad8:	480b      	ldr	r0, [pc, #44]	; (10009b08 <ble_encryption_request_handler+0xec>)
10009ada:	4b07      	ldr	r3, [pc, #28]	; (10009af8 <ble_encryption_request_handler+0xdc>)
10009adc:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
10009ade:	2000      	movs	r0, #0
}
10009ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009ae2:	46c0      	nop			; (mov r8, r8)
10009ae4:	1001207c 	.word	0x1001207c
10009ae8:	1000f7b9 	.word	0x1000f7b9
10009aec:	10010cc8 	.word	0x10010cc8
10009af0:	1000f919 	.word	0x1000f919
10009af4:	10010fc4 	.word	0x10010fc4
10009af8:	1000f7f9 	.word	0x1000f7f9
10009afc:	10010ffc 	.word	0x10010ffc
10009b00:	1000c5bd 	.word	0x1000c5bd
10009b04:	1000cc1d 	.word	0x1000cc1d
10009b08:	10011054 	.word	0x10011054

10009b0c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
10009b0c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
10009b0e:	2a00      	cmp	r2, #0
10009b10:	d047      	beq.n	10009ba2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
10009b12:	2906      	cmp	r1, #6
10009b14:	d847      	bhi.n	10009ba6 <ble_mgr_events_callback_handler+0x9a>
10009b16:	0089      	lsls	r1, r1, #2
10009b18:	4b28      	ldr	r3, [pc, #160]	; (10009bbc <ble_mgr_events_callback_handler+0xb0>)
10009b1a:	585b      	ldr	r3, [r3, r1]
10009b1c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
10009b1e:	4b28      	ldr	r3, [pc, #160]	; (10009bc0 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
10009b20:	2405      	movs	r4, #5
10009b22:	e00a      	b.n	10009b3a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
10009b24:	4b27      	ldr	r3, [pc, #156]	; (10009bc4 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
10009b26:	2401      	movs	r4, #1
			}
			break;
10009b28:	e007      	b.n	10009b3a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
10009b2a:	4b27      	ldr	r3, [pc, #156]	; (10009bc8 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
10009b2c:	2405      	movs	r4, #5
			}
			break;
10009b2e:	e004      	b.n	10009b3a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
10009b30:	4b26      	ldr	r3, [pc, #152]	; (10009bcc <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
10009b32:	2401      	movs	r4, #1
			}
			break;
10009b34:	e001      	b.n	10009b3a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
10009b36:	4b26      	ldr	r3, [pc, #152]	; (10009bd0 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
10009b38:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
10009b3a:	2800      	cmp	r0, #0
10009b3c:	d116      	bne.n	10009b6c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009b3e:	6819      	ldr	r1, [r3, #0]
10009b40:	2900      	cmp	r1, #0
10009b42:	d10b      	bne.n	10009b5c <ble_mgr_events_callback_handler+0x50>
10009b44:	e006      	b.n	10009b54 <ble_mgr_events_callback_handler+0x48>
10009b46:	1c1d      	adds	r5, r3, #0
10009b48:	3304      	adds	r3, #4
10009b4a:	1f18      	subs	r0, r3, #4
10009b4c:	6800      	ldr	r0, [r0, #0]
10009b4e:	2800      	cmp	r0, #0
10009b50:	d106      	bne.n	10009b60 <ble_mgr_events_callback_handler+0x54>
10009b52:	e000      	b.n	10009b56 <ble_mgr_events_callback_handler+0x4a>
10009b54:	1c1d      	adds	r5, r3, #0
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
10009b56:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
10009b58:	2101      	movs	r1, #1
						break;
10009b5a:	e02c      	b.n	10009bb6 <ble_mgr_events_callback_handler+0xaa>
10009b5c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009b5e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10009b60:	3101      	adds	r1, #1
10009b62:	b2c9      	uxtb	r1, r1
10009b64:	42a1      	cmp	r1, r4
10009b66:	d3ee      	bcc.n	10009b46 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10009b68:	2100      	movs	r1, #0
10009b6a:	e024      	b.n	10009bb6 <ble_mgr_events_callback_handler+0xaa>
10009b6c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
10009b6e:	2801      	cmp	r0, #1
10009b70:	d121      	bne.n	10009bb6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10009b72:	6819      	ldr	r1, [r3, #0]
10009b74:	4291      	cmp	r1, r2
10009b76:	d10c      	bne.n	10009b92 <ble_mgr_events_callback_handler+0x86>
10009b78:	e006      	b.n	10009b88 <ble_mgr_events_callback_handler+0x7c>
10009b7a:	1c1d      	adds	r5, r3, #0
10009b7c:	3304      	adds	r3, #4
10009b7e:	1f18      	subs	r0, r3, #4
10009b80:	6800      	ldr	r0, [r0, #0]
10009b82:	4290      	cmp	r0, r2
10009b84:	d107      	bne.n	10009b96 <ble_mgr_events_callback_handler+0x8a>
10009b86:	e000      	b.n	10009b8a <ble_mgr_events_callback_handler+0x7e>
10009b88:	1c1d      	adds	r5, r3, #0
					{
						ble_event_cb_ptr[idx] = NULL;
10009b8a:	2300      	movs	r3, #0
10009b8c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
10009b8e:	2101      	movs	r1, #1
						break;
10009b90:	e011      	b.n	10009bb6 <ble_mgr_events_callback_handler+0xaa>
10009b92:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10009b94:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10009b96:	3101      	adds	r1, #1
10009b98:	b2c9      	uxtb	r1, r1
10009b9a:	42a1      	cmp	r1, r4
10009b9c:	d3ed      	bcc.n	10009b7a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10009b9e:	2100      	movs	r1, #0
10009ba0:	e009      	b.n	10009bb6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
10009ba2:	2100      	movs	r1, #0
10009ba4:	e007      	b.n	10009bb6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
10009ba6:	2100      	movs	r1, #0
10009ba8:	e005      	b.n	10009bb6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
10009baa:	4b0a      	ldr	r3, [pc, #40]	; (10009bd4 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
10009bac:	2405      	movs	r4, #5
10009bae:	e7c4      	b.n	10009b3a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
10009bb0:	4b09      	ldr	r3, [pc, #36]	; (10009bd8 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
10009bb2:	2401      	movs	r4, #1
10009bb4:	e7c1      	b.n	10009b3a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
10009bb6:	1c08      	adds	r0, r1, #0
10009bb8:	bd30      	pop	{r4, r5, pc}
10009bba:	46c0      	nop			; (mov r8, r8)
10009bbc:	10010b78 	.word	0x10010b78
10009bc0:	10012068 	.word	0x10012068
10009bc4:	10012064 	.word	0x10012064
10009bc8:	100122ec 	.word	0x100122ec
10009bcc:	10012890 	.word	0x10012890
10009bd0:	10012300 	.word	0x10012300
10009bd4:	10012314 	.word	0x10012314
10009bd8:	1001234c 	.word	0x1001234c

10009bdc <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
10009bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009bde:	4647      	mov	r7, r8
10009be0:	b480      	push	{r7}
10009be2:	b090      	sub	sp, #64	; 0x40
10009be4:	1c05      	adds	r5, r0, #0
/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

static void init_global_var(void)
{
	ble_user_event_cb = 0;
10009be6:	2400      	movs	r4, #0
10009be8:	4b76      	ldr	r3, [pc, #472]	; (10009dc4 <ble_device_init+0x1e8>)
10009bea:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
10009bec:	4b76      	ldr	r3, [pc, #472]	; (10009dc8 <ble_device_init+0x1ec>)
10009bee:	601c      	str	r4, [r3, #0]
10009bf0:	2700      	movs	r7, #0
10009bf2:	809c      	strh	r4, [r3, #4]
10009bf4:	719f      	strb	r7, [r3, #6]
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
10009bf6:	4b75      	ldr	r3, [pc, #468]	; (10009dcc <ble_device_init+0x1f0>)
10009bf8:	801c      	strh	r4, [r3, #0]
10009bfa:	805c      	strh	r4, [r3, #2]
10009bfc:	809c      	strh	r4, [r3, #4]
10009bfe:	80dc      	strh	r4, [r3, #6]
10009c00:	811c      	strh	r4, [r3, #8]
10009c02:	815c      	strh	r4, [r3, #10]
10009c04:	819c      	strh	r4, [r3, #12]
10009c06:	81dc      	strh	r4, [r3, #14]
10009c08:	821c      	strh	r4, [r3, #16]
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
10009c0a:	4871      	ldr	r0, [pc, #452]	; (10009dd0 <ble_device_init+0x1f4>)
10009c0c:	2100      	movs	r1, #0
10009c0e:	4a71      	ldr	r2, [pc, #452]	; (10009dd4 <ble_device_init+0x1f8>)
10009c10:	4e71      	ldr	r6, [pc, #452]	; (10009dd8 <ble_device_init+0x1fc>)
10009c12:	47b0      	blx	r6
#endif

	scan_response_count = 0;
10009c14:	4b71      	ldr	r3, [pc, #452]	; (10009ddc <ble_device_init+0x200>)
10009c16:	701f      	strb	r7, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
10009c18:	4871      	ldr	r0, [pc, #452]	; (10009de0 <ble_device_init+0x204>)
10009c1a:	2100      	movs	r1, #0
10009c1c:	22cd      	movs	r2, #205	; 0xcd
10009c1e:	0092      	lsls	r2, r2, #2
10009c20:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
10009c22:	4b70      	ldr	r3, [pc, #448]	; (10009de4 <ble_device_init+0x208>)
10009c24:	701f      	strb	r7, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
10009c26:	4870      	ldr	r0, [pc, #448]	; (10009de8 <ble_device_init+0x20c>)
10009c28:	2100      	movs	r1, #0
10009c2a:	2283      	movs	r2, #131	; 0x83
10009c2c:	0092      	lsls	r2, r2, #2
10009c2e:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset(&pf_cfg, 0, sizeof(pf_cfg));
10009c30:	4b6e      	ldr	r3, [pc, #440]	; (10009dec <ble_device_init+0x210>)
10009c32:	601c      	str	r4, [r3, #0]
10009c34:	605c      	str	r4, [r3, #4]
10009c36:	609c      	str	r4, [r3, #8]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
10009c38:	4b6d      	ldr	r3, [pc, #436]	; (10009df0 <ble_device_init+0x214>)
10009c3a:	601c      	str	r4, [r3, #0]
10009c3c:	605c      	str	r4, [r3, #4]
10009c3e:	609c      	str	r4, [r3, #8]
10009c40:	60dc      	str	r4, [r3, #12]
10009c42:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
10009c44:	4b6b      	ldr	r3, [pc, #428]	; (10009df4 <ble_device_init+0x218>)
10009c46:	601c      	str	r4, [r3, #0]
10009c48:	605c      	str	r4, [r3, #4]
10009c4a:	609c      	str	r4, [r3, #8]
10009c4c:	60dc      	str	r4, [r3, #12]
10009c4e:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
10009c50:	4b69      	ldr	r3, [pc, #420]	; (10009df8 <ble_device_init+0x21c>)
10009c52:	601c      	str	r4, [r3, #0]
10009c54:	605c      	str	r4, [r3, #4]
10009c56:	609c      	str	r4, [r3, #8]
10009c58:	60dc      	str	r4, [r3, #12]
10009c5a:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
10009c5c:	4b67      	ldr	r3, [pc, #412]	; (10009dfc <ble_device_init+0x220>)
10009c5e:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
10009c60:	4b67      	ldr	r3, [pc, #412]	; (10009e00 <ble_device_init+0x224>)
10009c62:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
10009c64:	4b67      	ldr	r3, [pc, #412]	; (10009e04 <ble_device_init+0x228>)
10009c66:	601c      	str	r4, [r3, #0]
10009c68:	605c      	str	r4, [r3, #4]
10009c6a:	609c      	str	r4, [r3, #8]
10009c6c:	60dc      	str	r4, [r3, #12]
10009c6e:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
10009c70:	4b65      	ldr	r3, [pc, #404]	; (10009e08 <ble_device_init+0x22c>)
10009c72:	601c      	str	r4, [r3, #0]
10009c74:	4c65      	ldr	r4, [pc, #404]	; (10009e0c <ble_device_init+0x230>)
10009c76:	239b      	movs	r3, #155	; 0x9b
10009c78:	009b      	lsls	r3, r3, #2
10009c7a:	4698      	mov	r8, r3
10009c7c:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10009c7e:	4f56      	ldr	r7, [pc, #344]	; (10009dd8 <ble_device_init+0x1fc>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
10009c80:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10009c82:	1c20      	adds	r0, r4, #0
10009c84:	2100      	movs	r1, #0
10009c86:	227c      	movs	r2, #124	; 0x7c
10009c88:	47b8      	blx	r7
10009c8a:	1c23      	adds	r3, r4, #0
10009c8c:	335e      	adds	r3, #94	; 0x5e
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c8e:	2200      	movs	r2, #0
10009c90:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
10009c92:	7626      	strb	r6, [r4, #24]
10009c94:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c96:	4544      	cmp	r4, r8
10009c98:	d1f3      	bne.n	10009c82 <ble_device_init+0xa6>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
10009c9a:	4b5d      	ldr	r3, [pc, #372]	; (10009e10 <ble_device_init+0x234>)
10009c9c:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
10009c9e:	4c53      	ldr	r4, [pc, #332]	; (10009dec <ble_device_init+0x210>)
10009ca0:	4b4c      	ldr	r3, [pc, #304]	; (10009dd4 <ble_device_init+0x1f8>)
10009ca2:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)&att_db_data;
10009ca4:	4b4a      	ldr	r3, [pc, #296]	; (10009dd0 <ble_device_init+0x1f4>)
10009ca6:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
10009ca8:	485a      	ldr	r0, [pc, #360]	; (10009e14 <ble_device_init+0x238>)
10009caa:	4b5b      	ldr	r3, [pc, #364]	; (10009e18 <ble_device_init+0x23c>)
10009cac:	4798      	blx	r3
10009cae:	485b      	ldr	r0, [pc, #364]	; (10009e1c <ble_device_init+0x240>)
10009cb0:	4b5b      	ldr	r3, [pc, #364]	; (10009e20 <ble_device_init+0x244>)
10009cb2:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
10009cb4:	1c20      	adds	r0, r4, #0
10009cb6:	4b5b      	ldr	r3, [pc, #364]	; (10009e24 <ble_device_init+0x248>)
10009cb8:	4798      	blx	r3
10009cba:	2800      	cmp	r0, #0
10009cbc:	d00b      	beq.n	10009cd6 <ble_device_init+0xfa>
	{
		DBG_LOG("SAMB11 Initialization failed");
10009cbe:	4e55      	ldr	r6, [pc, #340]	; (10009e14 <ble_device_init+0x238>)
10009cc0:	1c30      	adds	r0, r6, #0
10009cc2:	4d55      	ldr	r5, [pc, #340]	; (10009e18 <ble_device_init+0x23c>)
10009cc4:	47a8      	blx	r5
10009cc6:	4858      	ldr	r0, [pc, #352]	; (10009e28 <ble_device_init+0x24c>)
10009cc8:	4c55      	ldr	r4, [pc, #340]	; (10009e20 <ble_device_init+0x244>)
10009cca:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
10009ccc:	1c30      	adds	r0, r6, #0
10009cce:	47a8      	blx	r5
10009cd0:	4856      	ldr	r0, [pc, #344]	; (10009e2c <ble_device_init+0x250>)
10009cd2:	47a0      	blx	r4
10009cd4:	e7fe      	b.n	10009cd4 <ble_device_init+0xf8>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
10009cd6:	2000      	movs	r0, #0
10009cd8:	2100      	movs	r1, #0
10009cda:	4a55      	ldr	r2, [pc, #340]	; (10009e30 <ble_device_init+0x254>)
10009cdc:	4c55      	ldr	r4, [pc, #340]	; (10009e34 <ble_device_init+0x258>)
10009cde:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
10009ce0:	2000      	movs	r0, #0
10009ce2:	2102      	movs	r1, #2
10009ce4:	4a54      	ldr	r2, [pc, #336]	; (10009e38 <ble_device_init+0x25c>)
10009ce6:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
10009ce8:	4854      	ldr	r0, [pc, #336]	; (10009e3c <ble_device_init+0x260>)
10009cea:	2109      	movs	r1, #9
10009cec:	4b54      	ldr	r3, [pc, #336]	; (10009e40 <ble_device_init+0x264>)
10009cee:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
10009cf0:	2800      	cmp	r0, #0
10009cf2:	d005      	beq.n	10009d00 <ble_device_init+0x124>
	{
		DBG_LOG("Device name set failed");
10009cf4:	4847      	ldr	r0, [pc, #284]	; (10009e14 <ble_device_init+0x238>)
10009cf6:	4b48      	ldr	r3, [pc, #288]	; (10009e18 <ble_device_init+0x23c>)
10009cf8:	4798      	blx	r3
10009cfa:	4852      	ldr	r0, [pc, #328]	; (10009e44 <ble_device_init+0x268>)
10009cfc:	4b48      	ldr	r3, [pc, #288]	; (10009e20 <ble_device_init+0x244>)
10009cfe:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
10009d00:	a804      	add	r0, sp, #16
10009d02:	4951      	ldr	r1, [pc, #324]	; (10009e48 <ble_device_init+0x26c>)
10009d04:	3108      	adds	r1, #8
10009d06:	2207      	movs	r2, #7
10009d08:	4b50      	ldr	r3, [pc, #320]	; (10009e4c <ble_device_init+0x270>)
10009d0a:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
10009d0c:	aa06      	add	r2, sp, #24
10009d0e:	2300      	movs	r3, #0
10009d10:	9306      	str	r3, [sp, #24]
10009d12:	9307      	str	r3, [sp, #28]
10009d14:	9308      	str	r3, [sp, #32]
10009d16:	9309      	str	r3, [sp, #36]	; 0x24
10009d18:	930a      	str	r3, [sp, #40]	; 0x28
10009d1a:	930b      	str	r3, [sp, #44]	; 0x2c
10009d1c:	930c      	str	r3, [sp, #48]	; 0x30
10009d1e:	930d      	str	r3, [sp, #52]	; 0x34
10009d20:	930e      	str	r3, [sp, #56]	; 0x38
10009d22:	8493      	strh	r3, [r2, #36]	; 0x24
	
	if (addr == NULL)
10009d24:	2d00      	cmp	r5, #0
10009d26:	d10c      	bne.n	10009d42 <ble_device_init+0x166>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10009d28:	a804      	add	r0, sp, #16
10009d2a:	4b49      	ldr	r3, [pc, #292]	; (10009e50 <ble_device_init+0x274>)
10009d2c:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
10009d2e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10009d30:	2800      	cmp	r0, #0
10009d32:	d006      	beq.n	10009d42 <ble_device_init+0x166>
		{
			DBG_LOG("BD address get failed");
10009d34:	4837      	ldr	r0, [pc, #220]	; (10009e14 <ble_device_init+0x238>)
10009d36:	4b38      	ldr	r3, [pc, #224]	; (10009e18 <ble_device_init+0x23c>)
10009d38:	4798      	blx	r3
10009d3a:	4846      	ldr	r0, [pc, #280]	; (10009e54 <ble_device_init+0x278>)
10009d3c:	4b38      	ldr	r3, [pc, #224]	; (10009e20 <ble_device_init+0x244>)
10009d3e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
10009d40:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
10009d42:	4834      	ldr	r0, [pc, #208]	; (10009e14 <ble_device_init+0x238>)
10009d44:	4b34      	ldr	r3, [pc, #208]	; (10009e18 <ble_device_init+0x23c>)
10009d46:	4798      	blx	r3
10009d48:	79a9      	ldrb	r1, [r5, #6]
10009d4a:	796a      	ldrb	r2, [r5, #5]
10009d4c:	792b      	ldrb	r3, [r5, #4]
10009d4e:	78e8      	ldrb	r0, [r5, #3]
10009d50:	9000      	str	r0, [sp, #0]
10009d52:	78a8      	ldrb	r0, [r5, #2]
10009d54:	9001      	str	r0, [sp, #4]
10009d56:	7868      	ldrb	r0, [r5, #1]
10009d58:	9002      	str	r0, [sp, #8]
10009d5a:	7828      	ldrb	r0, [r5, #0]
10009d5c:	9003      	str	r0, [sp, #12]
10009d5e:	483e      	ldr	r0, [pc, #248]	; (10009e58 <ble_device_init+0x27c>)
10009d60:	4c2f      	ldr	r4, [pc, #188]	; (10009e20 <ble_device_init+0x244>)
10009d62:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
10009d64:	ac06      	add	r4, sp, #24
10009d66:	230f      	movs	r3, #15
10009d68:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
10009d6a:	4b3c      	ldr	r3, [pc, #240]	; (10009e5c <ble_device_init+0x280>)
10009d6c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
10009d6e:	a807      	add	r0, sp, #28
10009d70:	1c29      	adds	r1, r5, #0
10009d72:	2207      	movs	r2, #7
10009d74:	4b35      	ldr	r3, [pc, #212]	; (10009e4c <ble_device_init+0x270>)
10009d76:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
10009d78:	2300      	movs	r3, #0
10009d7a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
10009d7c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
10009d7e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
10009d80:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
10009d82:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
10009d84:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
10009d86:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
10009d88:	2380      	movs	r3, #128	; 0x80
10009d8a:	009b      	lsls	r3, r3, #2
10009d8c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
10009d8e:	1c20      	adds	r0, r4, #0
10009d90:	4b33      	ldr	r3, [pc, #204]	; (10009e60 <ble_device_init+0x284>)
10009d92:	4798      	blx	r3
10009d94:	2800      	cmp	r0, #0
10009d96:	d005      	beq.n	10009da4 <ble_device_init+0x1c8>
	{
		DBG_LOG("Set BLE Device configuration failed");
10009d98:	481e      	ldr	r0, [pc, #120]	; (10009e14 <ble_device_init+0x238>)
10009d9a:	4b1f      	ldr	r3, [pc, #124]	; (10009e18 <ble_device_init+0x23c>)
10009d9c:	4798      	blx	r3
10009d9e:	4831      	ldr	r0, [pc, #196]	; (10009e64 <ble_device_init+0x288>)
10009da0:	4b1f      	ldr	r3, [pc, #124]	; (10009e20 <ble_device_init+0x244>)
10009da2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
10009da4:	1c28      	adds	r0, r5, #0
10009da6:	4b30      	ldr	r3, [pc, #192]	; (10009e68 <ble_device_init+0x28c>)
10009da8:	4798      	blx	r3
10009daa:	2800      	cmp	r0, #0
10009dac:	d005      	beq.n	10009dba <ble_device_init+0x1de>
	{
		DBG_LOG("Set BLE Device Address failed");
10009dae:	4819      	ldr	r0, [pc, #100]	; (10009e14 <ble_device_init+0x238>)
10009db0:	4b19      	ldr	r3, [pc, #100]	; (10009e18 <ble_device_init+0x23c>)
10009db2:	4798      	blx	r3
10009db4:	482d      	ldr	r0, [pc, #180]	; (10009e6c <ble_device_init+0x290>)
10009db6:	4b1a      	ldr	r3, [pc, #104]	; (10009e20 <ble_device_init+0x244>)
10009db8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
10009dba:	b010      	add	sp, #64	; 0x40
10009dbc:	bc04      	pop	{r2}
10009dbe:	4690      	mov	r8, r2
10009dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009dc2:	46c0      	nop			; (mov r8, r8)
10009dc4:	10011e10 	.word	0x10011e10
10009dc8:	10011e18 	.word	0x10011e18
10009dcc:	10012328 	.word	0x10012328
10009dd0:	10011930 	.word	0x10011930
10009dd4:	000004e2 	.word	0x000004e2
10009dd8:	1000f7e9 	.word	0x1000f7e9
10009ddc:	10011e14 	.word	0x10011e14
10009de0:	10012350 	.word	0x10012350
10009de4:	10012348 	.word	0x10012348
10009de8:	10012684 	.word	0x10012684
10009dec:	1001233c 	.word	0x1001233c
10009df0:	10012300 	.word	0x10012300
10009df4:	10012314 	.word	0x10012314
10009df8:	10012068 	.word	0x10012068
10009dfc:	1001234c 	.word	0x1001234c
10009e00:	10012064 	.word	0x10012064
10009e04:	100122ec 	.word	0x100122ec
10009e08:	10012890 	.word	0x10012890
10009e0c:	1001207c 	.word	0x1001207c
10009e10:	100122e8 	.word	0x100122e8
10009e14:	10010cc8 	.word	0x10010cc8
10009e18:	1000f919 	.word	0x1000f919
10009e1c:	10011074 	.word	0x10011074
10009e20:	1000f7f9 	.word	0x1000f7f9
10009e24:	1000c249 	.word	0x1000c249
10009e28:	10011088 	.word	0x10011088
10009e2c:	100110a8 	.word	0x100110a8
10009e30:	100112e0 	.word	0x100112e0
10009e34:	10009b0d 	.word	0x10009b0d
10009e38:	10010ca0 	.word	0x10010ca0
10009e3c:	100110e4 	.word	0x100110e4
10009e40:	1000c161 	.word	0x1000c161
10009e44:	100110f0 	.word	0x100110f0
10009e48:	10010c84 	.word	0x10010c84
10009e4c:	1000f7d7 	.word	0x1000f7d7
10009e50:	1000c195 	.word	0x1000c195
10009e54:	10011108 	.word	0x10011108
10009e58:	10011120 	.word	0x10011120
10009e5c:	00003a98 	.word	0x00003a98
10009e60:	1000c1b9 	.word	0x1000c1b9
10009e64:	10011158 	.word	0x10011158
10009e68:	1000c3e1 	.word	0x1000c3e1
10009e6c:	1001117c 	.word	0x1001117c

10009e70 <gap_dev_connect>:
	return AT_BLE_SUCCESS;
}

/** @brief request the peer device for connection */
at_ble_status_t gap_dev_connect(at_ble_addr_t *dev_addr)
{
10009e70:	b510      	push	{r4, lr}
10009e72:	b086      	sub	sp, #24
10009e74:	1c04      	adds	r4, r0, #0
	at_ble_connection_params_t gap_conn_parameter;
	
	memcpy((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)dev_addr, sizeof(at_ble_addr_t));
10009e76:	480d      	ldr	r0, [pc, #52]	; (10009eac <gap_dev_connect+0x3c>)
10009e78:	1c21      	adds	r1, r4, #0
10009e7a:	2207      	movs	r2, #7
10009e7c:	4b0c      	ldr	r3, [pc, #48]	; (10009eb0 <gap_dev_connect+0x40>)
10009e7e:	4798      	blx	r3

	gap_conn_parameter.con_intv_min = GAP_CONN_INTERVAL_MIN;
10009e80:	ab03      	add	r3, sp, #12
10009e82:	2214      	movs	r2, #20
10009e84:	801a      	strh	r2, [r3, #0]
	gap_conn_parameter.con_intv_max = GAP_CONN_INTERVAL_MAX;
10009e86:	3214      	adds	r2, #20
10009e88:	805a      	strh	r2, [r3, #2]
	gap_conn_parameter.con_latency = GAP_CONN_SLAVE_LATENCY;
10009e8a:	2200      	movs	r2, #0
10009e8c:	809a      	strh	r2, [r3, #4]
	gap_conn_parameter.ce_len_min = GAP_CE_LEN_MIN;
10009e8e:	811a      	strh	r2, [r3, #8]
	gap_conn_parameter.ce_len_max = GAP_CE_LEN_MAX;
10009e90:	815a      	strh	r2, [r3, #10]
	gap_conn_parameter.superv_to = GAP_SUPERVISION_TIMOUT;
10009e92:	32f5      	adds	r2, #245	; 0xf5
10009e94:	32ff      	adds	r2, #255	; 0xff
10009e96:	80da      	strh	r2, [r3, #6]

	return (at_ble_connect(dev_addr, GAP_CONNECT_PEER_COUNT, SCAN_INTERVAL, SCAN_WINDOW, &gap_conn_parameter));
10009e98:	9300      	str	r3, [sp, #0]
10009e9a:	1c20      	adds	r0, r4, #0
10009e9c:	2101      	movs	r1, #1
10009e9e:	3a95      	subs	r2, #149	; 0x95
10009ea0:	3aff      	subs	r2, #255	; 0xff
10009ea2:	2360      	movs	r3, #96	; 0x60
10009ea4:	4c03      	ldr	r4, [pc, #12]	; (10009eb4 <gap_dev_connect+0x44>)
10009ea6:	47a0      	blx	r4
}
10009ea8:	b006      	add	sp, #24
10009eaa:	bd10      	pop	{r4, pc}
10009eac:	10011e18 	.word	0x10011e18
10009eb0:	1000f7d7 	.word	0x1000f7d7
10009eb4:	1000c4e5 	.word	0x1000c4e5

10009eb8 <gap_dev_scan>:

/** @brief instructs device to start scanning */
at_ble_status_t gap_dev_scan(void)
{
10009eb8:	b510      	push	{r4, lr}
10009eba:	b084      	sub	sp, #16
	/* Device Scan discover started*/
	DBG_LOG("Scanning...Please wait...");
10009ebc:	4809      	ldr	r0, [pc, #36]	; (10009ee4 <gap_dev_scan+0x2c>)
10009ebe:	4b0a      	ldr	r3, [pc, #40]	; (10009ee8 <gap_dev_scan+0x30>)
10009ec0:	4798      	blx	r3
10009ec2:	480a      	ldr	r0, [pc, #40]	; (10009eec <gap_dev_scan+0x34>)
10009ec4:	4b0a      	ldr	r3, [pc, #40]	; (10009ef0 <gap_dev_scan+0x38>)
10009ec6:	4798      	blx	r3
	/* make service discover counter to zero*/
	scan_response_count = 0;
10009ec8:	2300      	movs	r3, #0
10009eca:	4a0a      	ldr	r2, [pc, #40]	; (10009ef4 <gap_dev_scan+0x3c>)
10009ecc:	7013      	strb	r3, [r2, #0]
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
10009ece:	9300      	str	r3, [sp, #0]
10009ed0:	9301      	str	r3, [sp, #4]
10009ed2:	3301      	adds	r3, #1
10009ed4:	9302      	str	r3, [sp, #8]
10009ed6:	2060      	movs	r0, #96	; 0x60
10009ed8:	2160      	movs	r1, #96	; 0x60
10009eda:	2200      	movs	r2, #0
10009edc:	4c06      	ldr	r4, [pc, #24]	; (10009ef8 <gap_dev_scan+0x40>)
10009ede:	47a0      	blx	r4
}
10009ee0:	b004      	add	sp, #16
10009ee2:	bd10      	pop	{r4, pc}
10009ee4:	10010cc8 	.word	0x10010cc8
10009ee8:	1000f919 	.word	0x1000f919
10009eec:	1001119c 	.word	0x1001119c
10009ef0:	1000f7f9 	.word	0x1000f7f9
10009ef4:	10011e14 	.word	0x10011e14
10009ef8:	1000c435 	.word	0x1000c435

10009efc <scan_info_parse>:
}

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
10009efc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009efe:	465f      	mov	r7, fp
10009f00:	4656      	mov	r6, sl
10009f02:	464d      	mov	r5, r9
10009f04:	4644      	mov	r4, r8
10009f06:	b4f0      	push	{r4, r5, r6, r7}
10009f08:	b087      	sub	sp, #28
	if (scan_info_data->adv_data_len) {
10009f0a:	2327      	movs	r3, #39	; 0x27
10009f0c:	5cc6      	ldrb	r6, [r0, r3]
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
10009f0e:	33bb      	adds	r3, #187	; 0xbb

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
	if (scan_info_data->adv_data_len) {
10009f10:	2e00      	cmp	r6, #0
10009f12:	d065      	beq.n	10009fe0 <scan_info_parse+0xe4>
10009f14:	4692      	mov	sl, r2
10009f16:	9101      	str	r1, [sp, #4]
10009f18:	4680      	mov	r8, r0
		uint8_t index = 0;
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
10009f1a:	2200      	movs	r2, #0
10009f1c:	ab04      	add	r3, sp, #16
10009f1e:	701a      	strb	r2, [r3, #0]
10009f20:	2500      	movs	r5, #0
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
10009f22:	2301      	movs	r3, #1
10009f24:	425b      	negs	r3, r3
10009f26:	4699      	mov	r9, r3
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
10009f28:	1c0b      	adds	r3, r1, #0
10009f2a:	3301      	adds	r3, #1
10009f2c:	9300      	str	r3, [sp, #0]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
10009f2e:	4b30      	ldr	r3, [pc, #192]	; (10009ff0 <scan_info_parse+0xf4>)
10009f30:	469b      	mov	fp, r3
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
			adv_element_data.len = scan_info_data->adv_data[index];
10009f32:	4643      	mov	r3, r8
10009f34:	195a      	adds	r2, r3, r5
10009f36:	7a11      	ldrb	r1, [r2, #8]
10009f38:	ab04      	add	r3, sp, #16
10009f3a:	7019      	strb	r1, [r3, #0]
			adv_element_data.type
			= scan_info_data->adv_data[index + 1];
10009f3c:	7a52      	ldrb	r2, [r2, #9]
10009f3e:	705a      	strb	r2, [r3, #1]
			adv_element_data.data
			= &scan_info_data->adv_data[index + 2];
10009f40:	1c2a      	adds	r2, r5, #0
10009f42:	320a      	adds	r2, #10
10009f44:	4442      	add	r2, r8
10009f46:	9205      	str	r2, [sp, #20]
			adv_element_p = &adv_element_data;

			if (adv_element_p->type == adv_type) {
10009f48:	785b      	ldrb	r3, [r3, #1]
10009f4a:	b2db      	uxtb	r3, r3
10009f4c:	4553      	cmp	r3, sl
10009f4e:	d136      	bne.n	10009fbe <scan_info_parse+0xc2>
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
10009f50:	ab04      	add	r3, sp, #16
10009f52:	781c      	ldrb	r4, [r3, #0]
				/* actual size of the data	*/
				adv_type_size -= 1;
10009f54:	3c01      	subs	r4, #1
10009f56:	b2e4      	uxtb	r4, r4
				while (adv_type_size) {
10009f58:	2c00      	cmp	r4, #0
10009f5a:	d030      	beq.n	10009fbe <scan_info_parse+0xc2>
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
10009f5c:	9b01      	ldr	r3, [sp, #4]
10009f5e:	781f      	ldrb	r7, [r3, #0]
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
10009f60:	464b      	mov	r3, r9
10009f62:	9303      	str	r3, [sp, #12]
					if (ble_service_uuid->type ==
10009f64:	2f00      	cmp	r7, #0
10009f66:	d10a      	bne.n	10009f7e <scan_info_parse+0x82>
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
10009f68:	9805      	ldr	r0, [sp, #20]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
10009f6a:	9900      	ldr	r1, [sp, #0]
10009f6c:	2202      	movs	r2, #2
10009f6e:	47d8      	blx	fp
10009f70:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_16_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_16_LEN;
10009f72:	9b05      	ldr	r3, [sp, #20]
10009f74:	3302      	adds	r3, #2
10009f76:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
10009f78:	3c02      	subs	r4, #2
10009f7a:	b2e4      	uxtb	r4, r4
10009f7c:	e01a      	b.n	10009fb4 <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
10009f7e:	2f01      	cmp	r7, #1
10009f80:	d10b      	bne.n	10009f9a <scan_info_parse+0x9e>
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
10009f82:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_16_LEN;
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
10009f84:	9900      	ldr	r1, [sp, #0]
10009f86:	2204      	movs	r2, #4
10009f88:	4b19      	ldr	r3, [pc, #100]	; (10009ff0 <scan_info_parse+0xf4>)
10009f8a:	4798      	blx	r3
10009f8c:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_32_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
10009f8e:	9b05      	ldr	r3, [sp, #20]
10009f90:	3304      	adds	r3, #4
10009f92:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
10009f94:	3c04      	subs	r4, #4
10009f96:	b2e4      	uxtb	r4, r4
10009f98:	e00c      	b.n	10009fb4 <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
10009f9a:	2f02      	cmp	r7, #2
10009f9c:	d10a      	bne.n	10009fb4 <scan_info_parse+0xb8>
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
10009f9e:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
10009fa0:	9900      	ldr	r1, [sp, #0]
10009fa2:	2210      	movs	r2, #16
10009fa4:	4b12      	ldr	r3, [pc, #72]	; (10009ff0 <scan_info_parse+0xf4>)
10009fa6:	4798      	blx	r3
10009fa8:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_128_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
10009faa:	9b05      	ldr	r3, [sp, #20]
10009fac:	3310      	adds	r3, #16
10009fae:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
10009fb0:	3c04      	subs	r4, #4
10009fb2:	b2e4      	uxtb	r4, r4
					}

					if (cmp_status == 0) {
10009fb4:	9b03      	ldr	r3, [sp, #12]
10009fb6:	2b00      	cmp	r3, #0
10009fb8:	d011      	beq.n	10009fde <scan_info_parse+0xe2>
			if (adv_element_p->type == adv_type) {
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
10009fba:	2c00      	cmp	r4, #0
10009fbc:	d1d0      	bne.n	10009f60 <scan_info_parse+0x64>
						return AT_BLE_SUCCESS;
					}
				}
			}

			index += (adv_element_data.len + 1);
10009fbe:	aa04      	add	r2, sp, #16
10009fc0:	7813      	ldrb	r3, [r2, #0]
10009fc2:	3301      	adds	r3, #1
10009fc4:	18ed      	adds	r5, r5, r3
10009fc6:	b2ed      	uxtb	r5, r5
			adv_element_data.len += 1;
10009fc8:	7813      	ldrb	r3, [r2, #0]
10009fca:	3301      	adds	r3, #1
10009fcc:	b2db      	uxtb	r3, r3
10009fce:	7013      	strb	r3, [r2, #0]
			adv_data_size -= adv_element_data.len;
10009fd0:	7813      	ldrb	r3, [r2, #0]
10009fd2:	1af6      	subs	r6, r6, r3
10009fd4:	b2f6      	uxtb	r6, r6
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
10009fd6:	2e00      	cmp	r6, #0
10009fd8:	d1ab      	bne.n	10009f32 <scan_info_parse+0x36>
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
10009fda:	23e2      	movs	r3, #226	; 0xe2
10009fdc:	e000      	b.n	10009fe0 <scan_info_parse+0xe4>
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					}

					if (cmp_status == 0) {
						return AT_BLE_SUCCESS;
10009fde:	2300      	movs	r3, #0
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
}
10009fe0:	1c18      	adds	r0, r3, #0
10009fe2:	b007      	add	sp, #28
10009fe4:	bc3c      	pop	{r2, r3, r4, r5}
10009fe6:	4690      	mov	r8, r2
10009fe8:	4699      	mov	r9, r3
10009fea:	46a2      	mov	sl, r4
10009fec:	46ab      	mov	fp, r5
10009fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ff0:	1000f7b9 	.word	0x1000f7b9

10009ff4 <ble_send_slave_sec_request>:

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
10009ff4:	b508      	push	{r3, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
10009ff6:	2101      	movs	r1, #1
10009ff8:	2201      	movs	r2, #1
10009ffa:	4b06      	ldr	r3, [pc, #24]	; (1000a014 <ble_send_slave_sec_request+0x20>)
10009ffc:	4798      	blx	r3
10009ffe:	2800      	cmp	r0, #0
1000a000:	d006      	beq.n	1000a010 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a002:	4805      	ldr	r0, [pc, #20]	; (1000a018 <ble_send_slave_sec_request+0x24>)
1000a004:	4b05      	ldr	r3, [pc, #20]	; (1000a01c <ble_send_slave_sec_request+0x28>)
1000a006:	4798      	blx	r3
1000a008:	4805      	ldr	r0, [pc, #20]	; (1000a020 <ble_send_slave_sec_request+0x2c>)
1000a00a:	4b06      	ldr	r3, [pc, #24]	; (1000a024 <ble_send_slave_sec_request+0x30>)
1000a00c:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a00e:	20e2      	movs	r0, #226	; 0xe2
}
1000a010:	bd08      	pop	{r3, pc}
1000a012:	46c0      	nop			; (mov r8, r8)
1000a014:	1000cb65 	.word	0x1000cb65
1000a018:	10010cc8 	.word	0x10010cc8
1000a01c:	1000f919 	.word	0x1000f919
1000a020:	100111b8 	.word	0x100111b8
1000a024:	1000f7f9 	.word	0x1000f7f9

1000a028 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a028:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a02a:	464f      	mov	r7, r9
1000a02c:	4646      	mov	r6, r8
1000a02e:	b4c0      	push	{r6, r7}
1000a030:	b09b      	sub	sp, #108	; 0x6c
1000a032:	1c05      	adds	r5, r0, #0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a034:	7a86      	ldrb	r6, [r0, #10]
1000a036:	2e00      	cmp	r6, #0
1000a038:	d000      	beq.n	1000a03c <ble_connected_state_handler+0x14>
1000a03a:	e0c8      	b.n	1000a1ce <ble_connected_state_handler+0x1a6>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a03c:	4874      	ldr	r0, [pc, #464]	; (1000a210 <ble_connected_state_handler+0x1e8>)
1000a03e:	4f75      	ldr	r7, [pc, #468]	; (1000a214 <ble_connected_state_handler+0x1ec>)
1000a040:	47b8      	blx	r7
1000a042:	79a9      	ldrb	r1, [r5, #6]
1000a044:	796a      	ldrb	r2, [r5, #5]
1000a046:	792b      	ldrb	r3, [r5, #4]
1000a048:	78e8      	ldrb	r0, [r5, #3]
1000a04a:	9000      	str	r0, [sp, #0]
1000a04c:	78a8      	ldrb	r0, [r5, #2]
1000a04e:	9001      	str	r0, [sp, #4]
1000a050:	7868      	ldrb	r0, [r5, #1]
1000a052:	9002      	str	r0, [sp, #8]
1000a054:	4870      	ldr	r0, [pc, #448]	; (1000a218 <ble_connected_state_handler+0x1f0>)
1000a056:	4c71      	ldr	r4, [pc, #452]	; (1000a21c <ble_connected_state_handler+0x1f4>)
1000a058:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a05a:	486d      	ldr	r0, [pc, #436]	; (1000a210 <ble_connected_state_handler+0x1e8>)
1000a05c:	47b8      	blx	r7
1000a05e:	8929      	ldrh	r1, [r5, #8]
1000a060:	486f      	ldr	r0, [pc, #444]	; (1000a220 <ble_connected_state_handler+0x1f8>)
1000a062:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a064:	486f      	ldr	r0, [pc, #444]	; (1000a224 <ble_connected_state_handler+0x1fc>)
1000a066:	1c29      	adds	r1, r5, #0
1000a068:	2212      	movs	r2, #18
1000a06a:	4b6f      	ldr	r3, [pc, #444]	; (1000a228 <ble_connected_state_handler+0x200>)
1000a06c:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a06e:	9504      	str	r5, [sp, #16]
1000a070:	486e      	ldr	r0, [pc, #440]	; (1000a22c <ble_connected_state_handler+0x204>)
1000a072:	1c29      	adds	r1, r5, #0
1000a074:	2207      	movs	r2, #7
1000a076:	4b6e      	ldr	r3, [pc, #440]	; (1000a230 <ble_connected_state_handler+0x208>)
1000a078:	4798      	blx	r3
1000a07a:	2800      	cmp	r0, #0
1000a07c:	d100      	bne.n	1000a080 <ble_connected_state_handler+0x58>
1000a07e:	e0af      	b.n	1000a1e0 <ble_connected_state_handler+0x1b8>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a080:	782b      	ldrb	r3, [r5, #0]
1000a082:	2b02      	cmp	r3, #2
1000a084:	d000      	beq.n	1000a088 <ble_connected_state_handler+0x60>
1000a086:	e0ab      	b.n	1000a1e0 <ble_connected_state_handler+0x1b8>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a088:	a806      	add	r0, sp, #24
1000a08a:	2100      	movs	r1, #0
1000a08c:	2250      	movs	r2, #80	; 0x50
1000a08e:	4b69      	ldr	r3, [pc, #420]	; (1000a234 <ble_connected_state_handler+0x20c>)
1000a090:	4798      	blx	r3
1000a092:	4f69      	ldr	r7, [pc, #420]	; (1000a238 <ble_connected_state_handler+0x210>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a094:	2300      	movs	r3, #0
1000a096:	e00b      	b.n	1000a0b0 <ble_connected_state_handler+0x88>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a098:	1c59      	adds	r1, r3, #1
1000a09a:	7814      	ldrb	r4, [r2, #0]
1000a09c:	a806      	add	r0, sp, #24
1000a09e:	54c4      	strb	r4, [r0, r3]
1000a0a0:	3201      	adds	r2, #1
1000a0a2:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a0a4:	42b3      	cmp	r3, r6
1000a0a6:	d1f7      	bne.n	1000a098 <ble_connected_state_handler+0x70>
1000a0a8:	377c      	adds	r7, #124	; 0x7c
1000a0aa:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a0ac:	2b50      	cmp	r3, #80	; 0x50
1000a0ae:	d004      	beq.n	1000a0ba <ble_connected_state_handler+0x92>
1000a0b0:	1c1e      	adds	r6, r3, #0
1000a0b2:	3610      	adds	r6, #16
1000a0b4:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a0b6:	1c3a      	adds	r2, r7, #0
1000a0b8:	e7ee      	b.n	1000a098 <ble_connected_state_handler+0x70>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a0ba:	2005      	movs	r0, #5
1000a0bc:	1c29      	adds	r1, r5, #0
1000a0be:	aa06      	add	r2, sp, #24
1000a0c0:	4b5e      	ldr	r3, [pc, #376]	; (1000a23c <ble_connected_state_handler+0x214>)
1000a0c2:	4798      	blx	r3
1000a0c4:	1e06      	subs	r6, r0, #0
1000a0c6:	d100      	bne.n	1000a0ca <ble_connected_state_handler+0xa2>
1000a0c8:	e09c      	b.n	1000a204 <ble_connected_state_handler+0x1dc>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a0ca:	4851      	ldr	r0, [pc, #324]	; (1000a210 <ble_connected_state_handler+0x1e8>)
1000a0cc:	4b51      	ldr	r3, [pc, #324]	; (1000a214 <ble_connected_state_handler+0x1ec>)
1000a0ce:	4798      	blx	r3
1000a0d0:	485b      	ldr	r0, [pc, #364]	; (1000a240 <ble_connected_state_handler+0x218>)
1000a0d2:	4b52      	ldr	r3, [pc, #328]	; (1000a21c <ble_connected_state_handler+0x1f4>)
1000a0d4:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a0d6:	26e2      	movs	r6, #226	; 0xe2
1000a0d8:	e094      	b.n	1000a204 <ble_connected_state_handler+0x1dc>
1000a0da:	b2e3      	uxtb	r3, r4
1000a0dc:	4698      	mov	r8, r3
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a0de:	9405      	str	r4, [sp, #20]
1000a0e0:	1c38      	adds	r0, r7, #0
1000a0e2:	9904      	ldr	r1, [sp, #16]
1000a0e4:	2207      	movs	r2, #7
1000a0e6:	47c8      	blx	r9
1000a0e8:	2800      	cmp	r0, #0
1000a0ea:	d109      	bne.n	1000a100 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a0ec:	9a05      	ldr	r2, [sp, #20]
1000a0ee:	0153      	lsls	r3, r2, #5
1000a0f0:	1a9b      	subs	r3, r3, r2
1000a0f2:	009f      	lsls	r7, r3, #2
1000a0f4:	4b53      	ldr	r3, [pc, #332]	; (1000a244 <ble_connected_state_handler+0x21c>)
1000a0f6:	19db      	adds	r3, r3, r7
1000a0f8:	3358      	adds	r3, #88	; 0x58
1000a0fa:	2202      	movs	r2, #2
1000a0fc:	719a      	strb	r2, [r3, #6]
1000a0fe:	e02d      	b.n	1000a15c <ble_connected_state_handler+0x134>
1000a100:	3401      	adds	r4, #1
1000a102:	377c      	adds	r7, #124	; 0x7c
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a104:	2c05      	cmp	r4, #5
1000a106:	d1e8      	bne.n	1000a0da <ble_connected_state_handler+0xb2>
1000a108:	e074      	b.n	1000a1f4 <ble_connected_state_handler+0x1cc>
1000a10a:	b2d9      	uxtb	r1, r3
1000a10c:	4688      	mov	r8, r1
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a10e:	1c1c      	adds	r4, r3, #0
1000a110:	7811      	ldrb	r1, [r2, #0]
1000a112:	2900      	cmp	r1, #0
1000a114:	d11a      	bne.n	1000a14c <ble_connected_state_handler+0x124>
1000a116:	e002      	b.n	1000a11e <ble_connected_state_handler+0xf6>
1000a118:	2400      	movs	r4, #0
1000a11a:	2300      	movs	r3, #0
1000a11c:	4698      	mov	r8, r3
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a11e:	0163      	lsls	r3, r4, #5
1000a120:	4699      	mov	r9, r3
1000a122:	1b18      	subs	r0, r3, r4
1000a124:	0080      	lsls	r0, r0, #2
1000a126:	4f47      	ldr	r7, [pc, #284]	; (1000a244 <ble_connected_state_handler+0x21c>)
1000a128:	19c0      	adds	r0, r0, r7
1000a12a:	1c29      	adds	r1, r5, #0
1000a12c:	2212      	movs	r2, #18
1000a12e:	4b3e      	ldr	r3, [pc, #248]	; (1000a228 <ble_connected_state_handler+0x200>)
1000a130:	4798      	blx	r3
						ble_device_count++;
1000a132:	4a45      	ldr	r2, [pc, #276]	; (1000a248 <ble_connected_state_handler+0x220>)
1000a134:	7813      	ldrb	r3, [r2, #0]
1000a136:	3301      	adds	r3, #1
1000a138:	b2db      	uxtb	r3, r3
1000a13a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a13c:	464b      	mov	r3, r9
1000a13e:	1b1b      	subs	r3, r3, r4
1000a140:	009b      	lsls	r3, r3, #2
1000a142:	18fb      	adds	r3, r7, r3
1000a144:	3358      	adds	r3, #88	; 0x58
1000a146:	2202      	movs	r2, #2
1000a148:	719a      	strb	r2, [r3, #6]
						break;
1000a14a:	e007      	b.n	1000a15c <ble_connected_state_handler+0x134>
1000a14c:	4641      	mov	r1, r8
1000a14e:	3101      	adds	r1, #1
1000a150:	b2c9      	uxtb	r1, r1
1000a152:	4688      	mov	r8, r1
1000a154:	3301      	adds	r3, #1
1000a156:	327c      	adds	r2, #124	; 0x7c
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a158:	2b05      	cmp	r3, #5
1000a15a:	d1d6      	bne.n	1000a10a <ble_connected_state_handler+0xe2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a15c:	4833      	ldr	r0, [pc, #204]	; (1000a22c <ble_connected_state_handler+0x204>)
1000a15e:	1c29      	adds	r1, r5, #0
1000a160:	2207      	movs	r2, #7
1000a162:	4b33      	ldr	r3, [pc, #204]	; (1000a230 <ble_connected_state_handler+0x208>)
1000a164:	4798      	blx	r3
1000a166:	2800      	cmp	r0, #0
1000a168:	d10e      	bne.n	1000a188 <ble_connected_state_handler+0x160>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a16a:	4643      	mov	r3, r8
1000a16c:	015b      	lsls	r3, r3, #5
1000a16e:	4642      	mov	r2, r8
1000a170:	1a9b      	subs	r3, r3, r2
1000a172:	009b      	lsls	r3, r3, #2
1000a174:	4a33      	ldr	r2, [pc, #204]	; (1000a244 <ble_connected_state_handler+0x21c>)
1000a176:	18d3      	adds	r3, r2, r3
1000a178:	2205      	movs	r2, #5
1000a17a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a17c:	4b2b      	ldr	r3, [pc, #172]	; (1000a22c <ble_connected_state_handler+0x204>)
1000a17e:	2200      	movs	r2, #0
1000a180:	601a      	str	r2, [r3, #0]
1000a182:	809a      	strh	r2, [r3, #4]
1000a184:	719a      	strb	r2, [r3, #6]
1000a186:	e03d      	b.n	1000a204 <ble_connected_state_handler+0x1dc>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a188:	4643      	mov	r3, r8
1000a18a:	015b      	lsls	r3, r3, #5
1000a18c:	4642      	mov	r2, r8
1000a18e:	1a9b      	subs	r3, r3, r2
1000a190:	009b      	lsls	r3, r3, #2
1000a192:	4a2c      	ldr	r2, [pc, #176]	; (1000a244 <ble_connected_state_handler+0x21c>)
1000a194:	18d3      	adds	r3, r2, r3
1000a196:	220a      	movs	r2, #10
1000a198:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a19a:	4b24      	ldr	r3, [pc, #144]	; (1000a22c <ble_connected_state_handler+0x204>)
1000a19c:	2100      	movs	r1, #0
1000a19e:	6019      	str	r1, [r3, #0]
1000a1a0:	8099      	strh	r1, [r3, #4]
1000a1a2:	7199      	strb	r1, [r3, #6]
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a1a4:	2a0a      	cmp	r2, #10
1000a1a6:	d12d      	bne.n	1000a204 <ble_connected_state_handler+0x1dc>
1000a1a8:	e00d      	b.n	1000a1c6 <ble_connected_state_handler+0x19e>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a1aa:	4819      	ldr	r0, [pc, #100]	; (1000a210 <ble_connected_state_handler+0x1e8>)
1000a1ac:	4b19      	ldr	r3, [pc, #100]	; (1000a214 <ble_connected_state_handler+0x1ec>)
1000a1ae:	4798      	blx	r3
1000a1b0:	4b25      	ldr	r3, [pc, #148]	; (1000a248 <ble_connected_state_handler+0x220>)
1000a1b2:	7819      	ldrb	r1, [r3, #0]
1000a1b4:	b2c9      	uxtb	r1, r1
1000a1b6:	4825      	ldr	r0, [pc, #148]	; (1000a24c <ble_connected_state_handler+0x224>)
1000a1b8:	4b18      	ldr	r3, [pc, #96]	; (1000a21c <ble_connected_state_handler+0x1f4>)
1000a1ba:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a1bc:	8928      	ldrh	r0, [r5, #8]
1000a1be:	2113      	movs	r1, #19
1000a1c0:	4b23      	ldr	r3, [pc, #140]	; (1000a250 <ble_connected_state_handler+0x228>)
1000a1c2:	4798      	blx	r3
1000a1c4:	e01e      	b.n	1000a204 <ble_connected_state_handler+0x1dc>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a1c6:	8928      	ldrh	r0, [r5, #8]
1000a1c8:	4b22      	ldr	r3, [pc, #136]	; (1000a254 <ble_connected_state_handler+0x22c>)
1000a1ca:	4798      	blx	r3
1000a1cc:	e01a      	b.n	1000a204 <ble_connected_state_handler+0x1dc>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a1ce:	4810      	ldr	r0, [pc, #64]	; (1000a210 <ble_connected_state_handler+0x1e8>)
1000a1d0:	4b10      	ldr	r3, [pc, #64]	; (1000a214 <ble_connected_state_handler+0x1ec>)
1000a1d2:	4798      	blx	r3
1000a1d4:	7aa9      	ldrb	r1, [r5, #10]
1000a1d6:	4820      	ldr	r0, [pc, #128]	; (1000a258 <ble_connected_state_handler+0x230>)
1000a1d8:	4b10      	ldr	r3, [pc, #64]	; (1000a21c <ble_connected_state_handler+0x1f4>)
1000a1da:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a1dc:	2600      	movs	r6, #0
1000a1de:	e011      	b.n	1000a204 <ble_connected_state_handler+0x1dc>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a1e0:	4b19      	ldr	r3, [pc, #100]	; (1000a248 <ble_connected_state_handler+0x220>)
1000a1e2:	781b      	ldrb	r3, [r3, #0]
1000a1e4:	b2db      	uxtb	r3, r3
1000a1e6:	2b04      	cmp	r3, #4
1000a1e8:	d8df      	bhi.n	1000a1aa <ble_connected_state_handler+0x182>
1000a1ea:	4f16      	ldr	r7, [pc, #88]	; (1000a244 <ble_connected_state_handler+0x21c>)
1000a1ec:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a1ee:	4b10      	ldr	r3, [pc, #64]	; (1000a230 <ble_connected_state_handler+0x208>)
1000a1f0:	4699      	mov	r9, r3
1000a1f2:	e772      	b.n	1000a0da <ble_connected_state_handler+0xb2>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a1f4:	235e      	movs	r3, #94	; 0x5e
1000a1f6:	4a13      	ldr	r2, [pc, #76]	; (1000a244 <ble_connected_state_handler+0x21c>)
1000a1f8:	5cd3      	ldrb	r3, [r2, r3]
1000a1fa:	2b00      	cmp	r3, #0
1000a1fc:	d08c      	beq.n	1000a118 <ble_connected_state_handler+0xf0>
1000a1fe:	4a17      	ldr	r2, [pc, #92]	; (1000a25c <ble_connected_state_handler+0x234>)
1000a200:	2301      	movs	r3, #1
1000a202:	e782      	b.n	1000a10a <ble_connected_state_handler+0xe2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000a204:	1c30      	adds	r0, r6, #0
1000a206:	b01b      	add	sp, #108	; 0x6c
1000a208:	bc0c      	pop	{r2, r3}
1000a20a:	4690      	mov	r8, r2
1000a20c:	4699      	mov	r9, r3
1000a20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a210:	10010cc8 	.word	0x10010cc8
1000a214:	1000f919 	.word	0x1000f919
1000a218:	100111d8 	.word	0x100111d8
1000a21c:	1000f7f9 	.word	0x1000f7f9
1000a220:	1001121c 	.word	0x1001121c
1000a224:	10012328 	.word	0x10012328
1000a228:	1000f7d7 	.word	0x1000f7d7
1000a22c:	10011e18 	.word	0x10011e18
1000a230:	1000f7b9 	.word	0x1000f7b9
1000a234:	1000f7e9 	.word	0x1000f7e9
1000a238:	100120c2 	.word	0x100120c2
1000a23c:	1000c5e9 	.word	0x1000c5e9
1000a240:	10011234 	.word	0x10011234
1000a244:	1001207c 	.word	0x1001207c
1000a248:	100122e8 	.word	0x100122e8
1000a24c:	10011258 	.word	0x10011258
1000a250:	1000c5bd 	.word	0x1000c5bd
1000a254:	10009ff5 	.word	0x10009ff5
1000a258:	10011294 	.word	0x10011294
1000a25c:	10012156 	.word	0x10012156

1000a260 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a260:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a262:	4647      	mov	r7, r8
1000a264:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a266:	7803      	ldrb	r3, [r0, #0]
1000a268:	2b00      	cmp	r3, #0
1000a26a:	d13a      	bne.n	1000a2e2 <ble_resolv_rand_addr_handler+0x82>
1000a26c:	4d2f      	ldr	r5, [pc, #188]	; (1000a32c <ble_resolv_rand_addr_handler+0xcc>)
1000a26e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a270:	1c46      	adds	r6, r0, #1
1000a272:	4f2f      	ldr	r7, [pc, #188]	; (1000a330 <ble_resolv_rand_addr_handler+0xd0>)
1000a274:	1c30      	adds	r0, r6, #0
1000a276:	1c29      	adds	r1, r5, #0
1000a278:	2210      	movs	r2, #16
1000a27a:	47b8      	blx	r7
1000a27c:	2800      	cmp	r0, #0
1000a27e:	d038      	beq.n	1000a2f2 <ble_resolv_rand_addr_handler+0x92>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a280:	3401      	adds	r4, #1
1000a282:	b2e4      	uxtb	r4, r4
1000a284:	357c      	adds	r5, #124	; 0x7c
1000a286:	2c05      	cmp	r4, #5
1000a288:	d1f4      	bne.n	1000a274 <ble_resolv_rand_addr_handler+0x14>
1000a28a:	e02a      	b.n	1000a2e2 <ble_resolv_rand_addr_handler+0x82>
1000a28c:	b2dc      	uxtb	r4, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a28e:	1c1d      	adds	r5, r3, #0
1000a290:	7811      	ldrb	r1, [r2, #0]
1000a292:	2900      	cmp	r1, #0
1000a294:	d11b      	bne.n	1000a2ce <ble_resolv_rand_addr_handler+0x6e>
1000a296:	e001      	b.n	1000a29c <ble_resolv_rand_addr_handler+0x3c>
1000a298:	2500      	movs	r5, #0
1000a29a:	2400      	movs	r4, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a29c:	4b25      	ldr	r3, [pc, #148]	; (1000a334 <ble_resolv_rand_addr_handler+0xd4>)
1000a29e:	4698      	mov	r8, r3
1000a2a0:	016e      	lsls	r6, r5, #5
1000a2a2:	1b77      	subs	r7, r6, r5
1000a2a4:	00bf      	lsls	r7, r7, #2
1000a2a6:	4447      	add	r7, r8
1000a2a8:	1c38      	adds	r0, r7, #0
1000a2aa:	4923      	ldr	r1, [pc, #140]	; (1000a338 <ble_resolv_rand_addr_handler+0xd8>)
1000a2ac:	2212      	movs	r2, #18
1000a2ae:	4b23      	ldr	r3, [pc, #140]	; (1000a33c <ble_resolv_rand_addr_handler+0xdc>)
1000a2b0:	4798      	blx	r3
				ble_device_count++;
1000a2b2:	4a23      	ldr	r2, [pc, #140]	; (1000a340 <ble_resolv_rand_addr_handler+0xe0>)
1000a2b4:	7813      	ldrb	r3, [r2, #0]
1000a2b6:	3301      	adds	r3, #1
1000a2b8:	b2db      	uxtb	r3, r3
1000a2ba:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a2bc:	3758      	adds	r7, #88	; 0x58
1000a2be:	2302      	movs	r3, #2
1000a2c0:	71bb      	strb	r3, [r7, #6]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a2c2:	1b75      	subs	r5, r6, r5
1000a2c4:	00ad      	lsls	r5, r5, #2
1000a2c6:	4445      	add	r5, r8
1000a2c8:	3308      	adds	r3, #8
1000a2ca:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000a2cc:	e021      	b.n	1000a312 <ble_resolv_rand_addr_handler+0xb2>
1000a2ce:	3301      	adds	r3, #1
1000a2d0:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a2d2:	2b05      	cmp	r3, #5
1000a2d4:	d1da      	bne.n	1000a28c <ble_resolv_rand_addr_handler+0x2c>
1000a2d6:	e024      	b.n	1000a322 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a2d8:	4b17      	ldr	r3, [pc, #92]	; (1000a338 <ble_resolv_rand_addr_handler+0xd8>)
1000a2da:	8918      	ldrh	r0, [r3, #8]
1000a2dc:	4b19      	ldr	r3, [pc, #100]	; (1000a344 <ble_resolv_rand_addr_handler+0xe4>)
1000a2de:	4798      	blx	r3
1000a2e0:	e01f      	b.n	1000a322 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a2e2:	235e      	movs	r3, #94	; 0x5e
1000a2e4:	4a13      	ldr	r2, [pc, #76]	; (1000a334 <ble_resolv_rand_addr_handler+0xd4>)
1000a2e6:	5cd3      	ldrb	r3, [r2, r3]
1000a2e8:	2b00      	cmp	r3, #0
1000a2ea:	d0d5      	beq.n	1000a298 <ble_resolv_rand_addr_handler+0x38>
1000a2ec:	4a16      	ldr	r2, [pc, #88]	; (1000a348 <ble_resolv_rand_addr_handler+0xe8>)
1000a2ee:	2301      	movs	r3, #1
1000a2f0:	e7cc      	b.n	1000a28c <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a2f2:	4910      	ldr	r1, [pc, #64]	; (1000a334 <ble_resolv_rand_addr_handler+0xd4>)
1000a2f4:	0163      	lsls	r3, r4, #5
1000a2f6:	1b1a      	subs	r2, r3, r4
1000a2f8:	0092      	lsls	r2, r2, #2
1000a2fa:	188a      	adds	r2, r1, r2
1000a2fc:	1c10      	adds	r0, r2, #0
1000a2fe:	3058      	adds	r0, #88	; 0x58
1000a300:	2502      	movs	r5, #2
1000a302:	7185      	strb	r5, [r0, #6]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a304:	200a      	movs	r0, #10
1000a306:	7490      	strb	r0, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a308:	1c10      	adds	r0, r2, #0
1000a30a:	490b      	ldr	r1, [pc, #44]	; (1000a338 <ble_resolv_rand_addr_handler+0xd8>)
1000a30c:	2212      	movs	r2, #18
1000a30e:	4b0b      	ldr	r3, [pc, #44]	; (1000a33c <ble_resolv_rand_addr_handler+0xdc>)
1000a310:	4798      	blx	r3
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a312:	0163      	lsls	r3, r4, #5
1000a314:	1b1c      	subs	r4, r3, r4
1000a316:	00a4      	lsls	r4, r4, #2
1000a318:	4b06      	ldr	r3, [pc, #24]	; (1000a334 <ble_resolv_rand_addr_handler+0xd4>)
1000a31a:	191c      	adds	r4, r3, r4
1000a31c:	7ca3      	ldrb	r3, [r4, #18]
1000a31e:	2b0a      	cmp	r3, #10
1000a320:	d0da      	beq.n	1000a2d8 <ble_resolv_rand_addr_handler+0x78>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a322:	2000      	movs	r0, #0
1000a324:	bc04      	pop	{r2}
1000a326:	4690      	mov	r8, r2
1000a328:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a32a:	46c0      	nop			; (mov r8, r8)
1000a32c:	100120c2 	.word	0x100120c2
1000a330:	1000f7b9 	.word	0x1000f7b9
1000a334:	1001207c 	.word	0x1001207c
1000a338:	10012328 	.word	0x10012328
1000a33c:	1000f7d7 	.word	0x1000f7d7
1000a340:	100122e8 	.word	0x100122e8
1000a344:	10009ff5 	.word	0x10009ff5
1000a348:	10012156 	.word	0x10012156

1000a34c <ble_connected_device_role>:
	}
	return false;
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
1000a34c:	b530      	push	{r4, r5, lr}
1000a34e:	4a0d      	ldr	r2, [pc, #52]	; (1000a384 <ble_connected_device_role+0x38>)
1000a350:	2300      	movs	r3, #0
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE) && 
1000a352:	1c1d      	adds	r5, r3, #0
1000a354:	1c14      	adds	r4, r2, #0
1000a356:	345e      	adds	r4, #94	; 0x5e
1000a358:	7824      	ldrb	r4, [r4, #0]
1000a35a:	2c01      	cmp	r4, #1
1000a35c:	d90b      	bls.n	1000a376 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a35e:	8914      	ldrh	r4, [r2, #8]
1000a360:	4284      	cmp	r4, r0
1000a362:	d108      	bne.n	1000a376 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			*dev_role = ble_dev_info[idx].dev_role;
1000a364:	015b      	lsls	r3, r3, #5
1000a366:	1b5d      	subs	r5, r3, r5
1000a368:	00ad      	lsls	r5, r5, #2
1000a36a:	4b06      	ldr	r3, [pc, #24]	; (1000a384 <ble_connected_device_role+0x38>)
1000a36c:	195b      	adds	r3, r3, r5
1000a36e:	7c9b      	ldrb	r3, [r3, #18]
1000a370:	700b      	strb	r3, [r1, #0]
			status = AT_BLE_SUCCESS;
1000a372:	2000      	movs	r0, #0
			break;
1000a374:	e004      	b.n	1000a380 <ble_connected_device_role+0x34>
1000a376:	3301      	adds	r3, #1
1000a378:	327c      	adds	r2, #124	; 0x7c

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a37a:	2b05      	cmp	r3, #5
1000a37c:	d1e9      	bne.n	1000a352 <ble_connected_device_role+0x6>
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000a37e:	20e2      	movs	r0, #226	; 0xe2
			status = AT_BLE_SUCCESS;
			break;
		}
	}
	return status;
}
1000a380:	bd30      	pop	{r4, r5, pc}
1000a382:	46c0      	nop			; (mov r8, r8)
1000a384:	1001207c 	.word	0x1001207c

1000a388 <ble_check_iscentral>:
	}
	return false;
}

bool ble_check_iscentral(at_ble_handle_t handle)
{
1000a388:	b500      	push	{lr}
1000a38a:	b083      	sub	sp, #12
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
1000a38c:	466b      	mov	r3, sp
1000a38e:	1dd9      	adds	r1, r3, #7
1000a390:	2300      	movs	r3, #0
1000a392:	700b      	strb	r3, [r1, #0]
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000a394:	4b07      	ldr	r3, [pc, #28]	; (1000a3b4 <ble_check_iscentral+0x2c>)
1000a396:	4798      	blx	r3
		if (dev_role == AT_BLE_ROLE_CENTRAL)
		{
			return true;
		}
	}
	return false;
1000a398:	2300      	movs	r3, #0

bool ble_check_iscentral(at_ble_handle_t handle)
{
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000a39a:	2800      	cmp	r0, #0
1000a39c:	d106      	bne.n	1000a3ac <ble_check_iscentral+0x24>
	{
		if (dev_role == AT_BLE_ROLE_CENTRAL)
1000a39e:	466b      	mov	r3, sp
1000a3a0:	3307      	adds	r3, #7
1000a3a2:	781b      	ldrb	r3, [r3, #0]
1000a3a4:	3b05      	subs	r3, #5
1000a3a6:	4258      	negs	r0, r3
1000a3a8:	4143      	adcs	r3, r0
1000a3aa:	b2db      	uxtb	r3, r3
		{
			return true;
		}
	}
	return false;
}
1000a3ac:	1c18      	adds	r0, r3, #0
1000a3ae:	b003      	add	sp, #12
1000a3b0:	bd00      	pop	{pc}
1000a3b2:	46c0      	nop			; (mov r8, r8)
1000a3b4:	1000a34d 	.word	0x1000a34d

1000a3b8 <ble_check_device_state>:
	}
	return status;
}

at_ble_status_t ble_check_device_state(at_ble_handle_t conn_handle, ble_device_state_t state)
{
1000a3b8:	b510      	push	{r4, lr}
1000a3ba:	4b09      	ldr	r3, [pc, #36]	; (1000a3e0 <ble_check_device_state+0x28>)
1000a3bc:	229b      	movs	r2, #155	; 0x9b
1000a3be:	0092      	lsls	r2, r2, #2
1000a3c0:	189c      	adds	r4, r3, r2
1000a3c2:	1c1a      	adds	r2, r3, #0
1000a3c4:	325e      	adds	r2, #94	; 0x5e
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state == state) &&
1000a3c6:	7812      	ldrb	r2, [r2, #0]
1000a3c8:	428a      	cmp	r2, r1
1000a3ca:	d102      	bne.n	1000a3d2 <ble_check_device_state+0x1a>
1000a3cc:	891a      	ldrh	r2, [r3, #8]
1000a3ce:	4282      	cmp	r2, r0
1000a3d0:	d004      	beq.n	1000a3dc <ble_check_device_state+0x24>
1000a3d2:	337c      	adds	r3, #124	; 0x7c

at_ble_status_t ble_check_device_state(at_ble_handle_t conn_handle, ble_device_state_t state)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3d4:	42a3      	cmp	r3, r4
1000a3d6:	d1f4      	bne.n	1000a3c2 <ble_check_device_state+0xa>
}

at_ble_status_t ble_check_device_state(at_ble_handle_t conn_handle, ble_device_state_t state)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000a3d8:	20e2      	movs	r0, #226	; 0xe2
1000a3da:	e000      	b.n	1000a3de <ble_check_device_state+0x26>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state == state) &&
		  (ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			status = AT_BLE_SUCCESS;
1000a3dc:	2000      	movs	r0, #0
			break;
		}
	}
	return status;
}
1000a3de:	bd10      	pop	{r4, pc}
1000a3e0:	1001207c 	.word	0x1001207c

1000a3e4 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a3e6:	1c0d      	adds	r5, r1, #0
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000a3e8:	283b      	cmp	r0, #59	; 0x3b
1000a3ea:	d872      	bhi.n	1000a4d2 <ble_event_manager+0xee>
1000a3ec:	0083      	lsls	r3, r0, #2
1000a3ee:	4a3c      	ldr	r2, [pc, #240]	; (1000a4e0 <ble_event_manager+0xfc>)
1000a3f0:	58d3      	ldr	r3, [r2, r3]
1000a3f2:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a3f4:	0084      	lsls	r4, r0, #2
1000a3f6:	2600      	movs	r6, #0
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a3f8:	4f3a      	ldr	r7, [pc, #232]	; (1000a4e4 <ble_event_manager+0x100>)
1000a3fa:	59bb      	ldr	r3, [r7, r6]
1000a3fc:	2b00      	cmp	r3, #0
1000a3fe:	d004      	beq.n	1000a40a <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a400:	591b      	ldr	r3, [r3, r4]
1000a402:	2b00      	cmp	r3, #0
1000a404:	d001      	beq.n	1000a40a <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);
1000a406:	1c28      	adds	r0, r5, #0
1000a408:	4798      	blx	r3
1000a40a:	3604      	adds	r6, #4
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a40c:	2e14      	cmp	r6, #20
1000a40e:	d1f4      	bne.n	1000a3fa <ble_event_manager+0x16>
1000a410:	e065      	b.n	1000a4de <ble_event_manager+0xfa>
	case AT_BLE_CHARACTERISTIC_WRITE_RESPONSE:
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
1000a412:	3813      	subs	r0, #19
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a414:	b2c4      	uxtb	r4, r0
1000a416:	00a4      	lsls	r4, r4, #2
1000a418:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a41a:	4f33      	ldr	r7, [pc, #204]	; (1000a4e8 <ble_event_manager+0x104>)
1000a41c:	59bb      	ldr	r3, [r7, r6]
1000a41e:	2b00      	cmp	r3, #0
1000a420:	d004      	beq.n	1000a42c <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a422:	591b      	ldr	r3, [r3, r4]
1000a424:	2b00      	cmp	r3, #0
1000a426:	d001      	beq.n	1000a42c <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000a428:	1c28      	adds	r0, r5, #0
1000a42a:	4798      	blx	r3
1000a42c:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a42e:	2e14      	cmp	r6, #20
1000a430:	d1f4      	bne.n	1000a41c <ble_event_manager+0x38>
1000a432:	e054      	b.n	1000a4de <ble_event_manager+0xfa>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000a434:	381d      	subs	r0, #29
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a436:	b2c4      	uxtb	r4, r0
1000a438:	00a4      	lsls	r4, r4, #2
1000a43a:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a43c:	4f2b      	ldr	r7, [pc, #172]	; (1000a4ec <ble_event_manager+0x108>)
1000a43e:	59bb      	ldr	r3, [r7, r6]
1000a440:	2b00      	cmp	r3, #0
1000a442:	d004      	beq.n	1000a44e <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a444:	591b      	ldr	r3, [r3, r4]
1000a446:	2b00      	cmp	r3, #0
1000a448:	d001      	beq.n	1000a44e <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000a44a:	1c28      	adds	r0, r5, #0
1000a44c:	4798      	blx	r3
1000a44e:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a450:	2e14      	cmp	r6, #20
1000a452:	d1f4      	bne.n	1000a43e <ble_event_manager+0x5a>
1000a454:	e043      	b.n	1000a4de <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a456:	3827      	subs	r0, #39	; 0x27
1000a458:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a45a:	4b25      	ldr	r3, [pc, #148]	; (1000a4f0 <ble_event_manager+0x10c>)
1000a45c:	681b      	ldr	r3, [r3, #0]
1000a45e:	2b00      	cmp	r3, #0
1000a460:	d03d      	beq.n	1000a4de <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a462:	0080      	lsls	r0, r0, #2
1000a464:	58c3      	ldr	r3, [r0, r3]
1000a466:	2b00      	cmp	r3, #0
1000a468:	d039      	beq.n	1000a4de <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a46a:	1c08      	adds	r0, r1, #0
1000a46c:	4798      	blx	r3
1000a46e:	e036      	b.n	1000a4de <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a470:	382d      	subs	r0, #45	; 0x2d
1000a472:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a474:	4b1f      	ldr	r3, [pc, #124]	; (1000a4f4 <ble_event_manager+0x110>)
1000a476:	681b      	ldr	r3, [r3, #0]
1000a478:	2b00      	cmp	r3, #0
1000a47a:	d030      	beq.n	1000a4de <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a47c:	0080      	lsls	r0, r0, #2
1000a47e:	58c3      	ldr	r3, [r0, r3]
1000a480:	2b00      	cmp	r3, #0
1000a482:	d02c      	beq.n	1000a4de <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a484:	1c08      	adds	r0, r1, #0
1000a486:	4798      	blx	r3
1000a488:	e029      	b.n	1000a4de <ble_event_manager+0xfa>
	
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
1000a48a:	3836      	subs	r0, #54	; 0x36
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a48c:	b2c4      	uxtb	r4, r0
1000a48e:	00a4      	lsls	r4, r4, #2
1000a490:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000a492:	4f19      	ldr	r7, [pc, #100]	; (1000a4f8 <ble_event_manager+0x114>)
1000a494:	59bb      	ldr	r3, [r7, r6]
1000a496:	2b00      	cmp	r3, #0
1000a498:	d004      	beq.n	1000a4a4 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a49a:	591b      	ldr	r3, [r3, r4]
1000a49c:	2b00      	cmp	r3, #0
1000a49e:	d001      	beq.n	1000a4a4 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000a4a0:	1c28      	adds	r0, r5, #0
1000a4a2:	4798      	blx	r3
1000a4a4:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000a4a6:	2e14      	cmp	r6, #20
1000a4a8:	d1f4      	bne.n	1000a494 <ble_event_manager+0xb0>
1000a4aa:	e018      	b.n	1000a4de <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a4ac:	3838      	subs	r0, #56	; 0x38
1000a4ae:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a4b0:	4b12      	ldr	r3, [pc, #72]	; (1000a4fc <ble_event_manager+0x118>)
1000a4b2:	681b      	ldr	r3, [r3, #0]
1000a4b4:	2b00      	cmp	r3, #0
1000a4b6:	d012      	beq.n	1000a4de <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a4b8:	0080      	lsls	r0, r0, #2
1000a4ba:	58c3      	ldr	r3, [r0, r3]
1000a4bc:	2b00      	cmp	r3, #0
1000a4be:	d00e      	beq.n	1000a4de <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a4c0:	1c08      	adds	r0, r1, #0
1000a4c2:	4798      	blx	r3
1000a4c4:	e00b      	b.n	1000a4de <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000a4c6:	4b0e      	ldr	r3, [pc, #56]	; (1000a500 <ble_event_manager+0x11c>)
1000a4c8:	681b      	ldr	r3, [r3, #0]
1000a4ca:	2b00      	cmp	r3, #0
1000a4cc:	d007      	beq.n	1000a4de <ble_event_manager+0xfa>
			ble_user_event_cb();
1000a4ce:	4798      	blx	r3
1000a4d0:	e005      	b.n	1000a4de <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000a4d2:	4d0c      	ldr	r5, [pc, #48]	; (1000a504 <ble_event_manager+0x120>)
1000a4d4:	1c28      	adds	r0, r5, #0
1000a4d6:	4c0c      	ldr	r4, [pc, #48]	; (1000a508 <ble_event_manager+0x124>)
1000a4d8:	47a0      	blx	r4
1000a4da:	1c28      	adds	r0, r5, #0
1000a4dc:	47a0      	blx	r4
	}
	break;		
	}
}
1000a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a4e0:	10010b94 	.word	0x10010b94
1000a4e4:	10012300 	.word	0x10012300
1000a4e8:	10012314 	.word	0x10012314
1000a4ec:	10012068 	.word	0x10012068
1000a4f0:	1001234c 	.word	0x1001234c
1000a4f4:	10012064 	.word	0x10012064
1000a4f8:	100122ec 	.word	0x100122ec
1000a4fc:	10012890 	.word	0x10012890
1000a500:	10011e10 	.word	0x10011e10
1000a504:	10010cc8 	.word	0x10010cc8
1000a508:	1000f919 	.word	0x1000f919

1000a50c <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000a50c:	b510      	push	{r4, lr}
1000a50e:	1c02      	adds	r2, r0, #0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000a510:	4806      	ldr	r0, [pc, #24]	; (1000a52c <ble_event_task+0x20>)
1000a512:	4907      	ldr	r1, [pc, #28]	; (1000a530 <ble_event_task+0x24>)
1000a514:	4b07      	ldr	r3, [pc, #28]	; (1000a534 <ble_event_task+0x28>)
1000a516:	4798      	blx	r3
1000a518:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000a51a:	d104      	bne.n	1000a526 <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000a51c:	4b03      	ldr	r3, [pc, #12]	; (1000a52c <ble_event_task+0x20>)
1000a51e:	7818      	ldrb	r0, [r3, #0]
1000a520:	4903      	ldr	r1, [pc, #12]	; (1000a530 <ble_event_task+0x24>)
1000a522:	4b05      	ldr	r3, [pc, #20]	; (1000a538 <ble_event_task+0x2c>)
1000a524:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000a526:	1c20      	adds	r0, r4, #0
1000a528:	bd10      	pop	{r4, pc}
1000a52a:	46c0      	nop			; (mov r8, r8)
1000a52c:	10012348 	.word	0x10012348
1000a530:	10012684 	.word	0x10012684
1000a534:	1000baa1 	.word	0x1000baa1
1000a538:	1000a3e5 	.word	0x1000a3e5

1000a53c <uart_read_complete_callback>:
void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	read_complete_flag = true;
1000a53c:	2201      	movs	r2, #1
1000a53e:	4b01      	ldr	r3, [pc, #4]	; (1000a544 <uart_read_complete_callback+0x8>)
1000a540:	701a      	strb	r2, [r3, #0]
}
1000a542:	4770      	bx	lr
1000a544:	10011e1f 	.word	0x10011e1f

1000a548 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000a548:	b570      	push	{r4, r5, r6, lr}
1000a54a:	1c06      	adds	r6, r0, #0
1000a54c:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK != uart_read_wait(module, c));
1000a54e:	4c03      	ldr	r4, [pc, #12]	; (1000a55c <usart_serial_getchar+0x14>)
1000a550:	1c30      	adds	r0, r6, #0
1000a552:	1c29      	adds	r1, r5, #0
1000a554:	47a0      	blx	r4
1000a556:	2800      	cmp	r0, #0
1000a558:	d1fa      	bne.n	1000a550 <usart_serial_getchar+0x8>
}
1000a55a:	bd70      	pop	{r4, r5, r6, pc}
1000a55c:	10009099 	.word	0x10009099

1000a560 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000a560:	b570      	push	{r4, r5, r6, lr}
1000a562:	1c06      	adds	r6, r0, #0
1000a564:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=uart_write_wait(module, c));
1000a566:	4c03      	ldr	r4, [pc, #12]	; (1000a574 <usart_serial_putchar+0x14>)
1000a568:	1c30      	adds	r0, r6, #0
1000a56a:	1c29      	adds	r1, r5, #0
1000a56c:	47a0      	blx	r4
1000a56e:	2800      	cmp	r0, #0
1000a570:	d1fa      	bne.n	1000a568 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000a572:	bd70      	pop	{r4, r5, r6, pc}
1000a574:	10009089 	.word	0x10009089

1000a578 <serial_console_init>:

void serial_console_init(void)
{
1000a578:	b538      	push	{r3, r4, r5, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000a57a:	2000      	movs	r0, #0
1000a57c:	2100      	movs	r1, #0
1000a57e:	4b16      	ldr	r3, [pc, #88]	; (1000a5d8 <serial_console_init+0x60>)
1000a580:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000a582:	4c16      	ldr	r4, [pc, #88]	; (1000a5dc <serial_console_init+0x64>)
1000a584:	1c20      	adds	r0, r4, #0
1000a586:	4b16      	ldr	r3, [pc, #88]	; (1000a5e0 <serial_console_init+0x68>)
1000a588:	4798      	blx	r3

	config_uart.baud_rate = 115200;
1000a58a:	23e1      	movs	r3, #225	; 0xe1
1000a58c:	025b      	lsls	r3, r3, #9
1000a58e:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000a590:	2302      	movs	r3, #2
1000a592:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000a594:	2203      	movs	r2, #3
1000a596:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000a598:	3201      	adds	r2, #1
1000a59a:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000a59c:	3201      	adds	r2, #1
1000a59e:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000a5a0:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000a5a2:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000a5a4:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000a5a6:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000a5a8:	480e      	ldr	r0, [pc, #56]	; (1000a5e4 <serial_console_init+0x6c>)
1000a5aa:	4b0f      	ldr	r3, [pc, #60]	; (1000a5e8 <serial_console_init+0x70>)
1000a5ac:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000a5ae:	4a0f      	ldr	r2, [pc, #60]	; (1000a5ec <serial_console_init+0x74>)
1000a5b0:	4b0f      	ldr	r3, [pc, #60]	; (1000a5f0 <serial_console_init+0x78>)
1000a5b2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000a5b4:	4a0f      	ldr	r2, [pc, #60]	; (1000a5f4 <serial_console_init+0x7c>)
1000a5b6:	4b10      	ldr	r3, [pc, #64]	; (1000a5f8 <serial_console_init+0x80>)
1000a5b8:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000a5ba:	4910      	ldr	r1, [pc, #64]	; (1000a5fc <serial_console_init+0x84>)
1000a5bc:	1c22      	adds	r2, r4, #0
1000a5be:	4b10      	ldr	r3, [pc, #64]	; (1000a600 <serial_console_init+0x88>)
1000a5c0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000a5c2:	4d10      	ldr	r5, [pc, #64]	; (1000a604 <serial_console_init+0x8c>)
1000a5c4:	682b      	ldr	r3, [r5, #0]
1000a5c6:	6898      	ldr	r0, [r3, #8]
1000a5c8:	2100      	movs	r1, #0
1000a5ca:	4c0f      	ldr	r4, [pc, #60]	; (1000a608 <serial_console_init+0x90>)
1000a5cc:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000a5ce:	682b      	ldr	r3, [r5, #0]
1000a5d0:	6858      	ldr	r0, [r3, #4]
1000a5d2:	2100      	movs	r1, #0
1000a5d4:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
}
1000a5d6:	bd38      	pop	{r3, r4, r5, pc}
1000a5d8:	10008435 	.word	0x10008435
1000a5dc:	100128b8 	.word	0x100128b8
1000a5e0:	10008ec1 	.word	0x10008ec1
1000a5e4:	10012894 	.word	0x10012894
1000a5e8:	10012060 	.word	0x10012060
1000a5ec:	1000a561 	.word	0x1000a561
1000a5f0:	1001205c 	.word	0x1001205c
1000a5f4:	1000a549 	.word	0x1000a549
1000a5f8:	10012058 	.word	0x10012058
1000a5fc:	40004000 	.word	0x40004000
1000a600:	10008eed 	.word	0x10008eed
1000a604:	10011904 	.word	0x10011904
1000a608:	1000f9a5 	.word	0x1000f9a5

1000a60c <_time_start>:

void _time_start(unsigned int sec)
{
1000a60c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a60e:	b083      	sub	sp, #12
1000a610:	1c05      	adds	r5, r0, #0
	system_clock_get_value();
1000a612:	4c0d      	ldr	r4, [pc, #52]	; (1000a648 <_time_start+0x3c>)
1000a614:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000a616:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000a618:	4f0c      	ldr	r7, [pc, #48]	; (1000a64c <_time_start+0x40>)
1000a61a:	47b8      	blx	r7
1000a61c:	4e0c      	ldr	r6, [pc, #48]	; (1000a650 <_time_start+0x44>)
1000a61e:	4a0d      	ldr	r2, [pc, #52]	; (1000a654 <_time_start+0x48>)
1000a620:	4b0d      	ldr	r3, [pc, #52]	; (1000a658 <_time_start+0x4c>)
1000a622:	47b0      	blx	r6
1000a624:	9000      	str	r0, [sp, #0]
1000a626:	9101      	str	r1, [sp, #4]
1000a628:	20fa      	movs	r0, #250	; 0xfa
1000a62a:	0080      	lsls	r0, r0, #2
1000a62c:	4368      	muls	r0, r5
1000a62e:	47b8      	blx	r7
1000a630:	1c02      	adds	r2, r0, #0
1000a632:	1c0b      	adds	r3, r1, #0
1000a634:	9800      	ldr	r0, [sp, #0]
1000a636:	9901      	ldr	r1, [sp, #4]
1000a638:	47b0      	blx	r6
1000a63a:	4b08      	ldr	r3, [pc, #32]	; (1000a65c <_time_start+0x50>)
1000a63c:	4798      	blx	r3
1000a63e:	4b08      	ldr	r3, [pc, #32]	; (1000a660 <_time_start+0x54>)
1000a640:	6018      	str	r0, [r3, #0]
}
1000a642:	b003      	add	sp, #12
1000a644:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a646:	46c0      	nop			; (mov r8, r8)
1000a648:	100084b9 	.word	0x100084b9
1000a64c:	1000f41d 	.word	0x1000f41d
1000a650:	1000e789 	.word	0x1000e789
1000a654:	19feaec7 	.word	0x19feaec7
1000a658:	3f09d8ef 	.word	0x3f09d8ef
1000a65c:	1000e74d 	.word	0x1000e74d
1000a660:	10011e20 	.word	0x10011e20

1000a664 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000a664:	4b02      	ldr	r3, [pc, #8]	; (1000a670 <_time_done+0xc>)
1000a666:	681a      	ldr	r2, [r3, #0]
1000a668:	1e50      	subs	r0, r2, #1
1000a66a:	6018      	str	r0, [r3, #0]
}
1000a66c:	4770      	bx	lr
1000a66e:	46c0      	nop			; (mov r8, r8)
1000a670:	10011e20 	.word	0x10011e20

1000a674 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000a674:	b538      	push	{r3, r4, r5, lr}
	
	read_complete_flag = false;
1000a676:	2400      	movs	r4, #0
1000a678:	4b16      	ldr	r3, [pc, #88]	; (1000a6d4 <getchar_b11_timeout+0x60>)
1000a67a:	701c      	strb	r4, [r3, #0]
	_time_start(sec);
1000a67c:	4b16      	ldr	r3, [pc, #88]	; (1000a6d8 <getchar_b11_timeout+0x64>)
1000a67e:	4798      	blx	r3
	
	string_input[0] = 0;
1000a680:	4d16      	ldr	r5, [pc, #88]	; (1000a6dc <getchar_b11_timeout+0x68>)
1000a682:	702c      	strb	r4, [r5, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000a684:	4c16      	ldr	r4, [pc, #88]	; (1000a6e0 <getchar_b11_timeout+0x6c>)
1000a686:	1c20      	adds	r0, r4, #0
1000a688:	4916      	ldr	r1, [pc, #88]	; (1000a6e4 <getchar_b11_timeout+0x70>)
1000a68a:	2202      	movs	r2, #2
1000a68c:	4b16      	ldr	r3, [pc, #88]	; (1000a6e8 <getchar_b11_timeout+0x74>)
1000a68e:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000a690:	1c20      	adds	r0, r4, #0
1000a692:	2102      	movs	r1, #2
1000a694:	4b15      	ldr	r3, [pc, #84]	; (1000a6ec <getchar_b11_timeout+0x78>)
1000a696:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a698:	1c20      	adds	r0, r4, #0
1000a69a:	1c29      	adds	r1, r5, #0
1000a69c:	2201      	movs	r2, #1
1000a69e:	4b14      	ldr	r3, [pc, #80]	; (1000a6f0 <getchar_b11_timeout+0x7c>)
1000a6a0:	4798      	blx	r3
	
	while (!read_complete_flag && _time_done() > 0 );
1000a6a2:	4c0c      	ldr	r4, [pc, #48]	; (1000a6d4 <getchar_b11_timeout+0x60>)
1000a6a4:	4d13      	ldr	r5, [pc, #76]	; (1000a6f4 <getchar_b11_timeout+0x80>)
1000a6a6:	7823      	ldrb	r3, [r4, #0]
1000a6a8:	2b00      	cmp	r3, #0
1000a6aa:	d102      	bne.n	1000a6b2 <getchar_b11_timeout+0x3e>
1000a6ac:	47a8      	blx	r5
1000a6ae:	2800      	cmp	r0, #0
1000a6b0:	d1f9      	bne.n	1000a6a6 <getchar_b11_timeout+0x32>
	
	if( tick == 0 )
1000a6b2:	4b11      	ldr	r3, [pc, #68]	; (1000a6f8 <getchar_b11_timeout+0x84>)
1000a6b4:	681b      	ldr	r3, [r3, #0]
1000a6b6:	2b00      	cmp	r3, #0
1000a6b8:	d108      	bne.n	1000a6cc <getchar_b11_timeout+0x58>
	{
		uart_unregister_callback(&uart_instance, UART_RX_COMPLETE);
1000a6ba:	4c09      	ldr	r4, [pc, #36]	; (1000a6e0 <getchar_b11_timeout+0x6c>)
1000a6bc:	1c20      	adds	r0, r4, #0
1000a6be:	2102      	movs	r1, #2
1000a6c0:	4b0e      	ldr	r3, [pc, #56]	; (1000a6fc <getchar_b11_timeout+0x88>)
1000a6c2:	4798      	blx	r3
		uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000a6c4:	1c20      	adds	r0, r4, #0
1000a6c6:	2102      	movs	r1, #2
1000a6c8:	4b0d      	ldr	r3, [pc, #52]	; (1000a700 <getchar_b11_timeout+0x8c>)
1000a6ca:	4798      	blx	r3
	}
	return string_input[0];
1000a6cc:	4b03      	ldr	r3, [pc, #12]	; (1000a6dc <getchar_b11_timeout+0x68>)
1000a6ce:	7818      	ldrb	r0, [r3, #0]
}
1000a6d0:	bd38      	pop	{r3, r4, r5, pc}
1000a6d2:	46c0      	nop			; (mov r8, r8)
1000a6d4:	10011e1f 	.word	0x10011e1f
1000a6d8:	1000a60d 	.word	0x1000a60d
1000a6dc:	10011e24 	.word	0x10011e24
1000a6e0:	10012894 	.word	0x10012894
1000a6e4:	1000a53d 	.word	0x1000a53d
1000a6e8:	100090d5 	.word	0x100090d5
1000a6ec:	10009105 	.word	0x10009105
1000a6f0:	100090ad 	.word	0x100090ad
1000a6f4:	1000a665 	.word	0x1000a665
1000a6f8:	10011e20 	.word	0x10011e20
1000a6fc:	100090ed 	.word	0x100090ed
1000a700:	10009125 	.word	0x10009125

1000a704 <getchar_b11>:

int getchar_b11(void)
{
1000a704:	b538      	push	{r3, r4, r5, lr}
	read_complete_flag = false;
1000a706:	2300      	movs	r3, #0
1000a708:	4a0c      	ldr	r2, [pc, #48]	; (1000a73c <getchar_b11+0x38>)
1000a70a:	7013      	strb	r3, [r2, #0]
	
	string_input[0] = 0;
1000a70c:	4d0c      	ldr	r5, [pc, #48]	; (1000a740 <getchar_b11+0x3c>)
1000a70e:	702b      	strb	r3, [r5, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000a710:	4c0c      	ldr	r4, [pc, #48]	; (1000a744 <getchar_b11+0x40>)
1000a712:	1c20      	adds	r0, r4, #0
1000a714:	490c      	ldr	r1, [pc, #48]	; (1000a748 <getchar_b11+0x44>)
1000a716:	2202      	movs	r2, #2
1000a718:	4b0c      	ldr	r3, [pc, #48]	; (1000a74c <getchar_b11+0x48>)
1000a71a:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000a71c:	1c20      	adds	r0, r4, #0
1000a71e:	2102      	movs	r1, #2
1000a720:	4b0b      	ldr	r3, [pc, #44]	; (1000a750 <getchar_b11+0x4c>)
1000a722:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a724:	1c20      	adds	r0, r4, #0
1000a726:	1c29      	adds	r1, r5, #0
1000a728:	2201      	movs	r2, #1
1000a72a:	4b0a      	ldr	r3, [pc, #40]	; (1000a754 <getchar_b11+0x50>)
1000a72c:	4798      	blx	r3
	
	while (!read_complete_flag);
1000a72e:	4a03      	ldr	r2, [pc, #12]	; (1000a73c <getchar_b11+0x38>)
1000a730:	7813      	ldrb	r3, [r2, #0]
1000a732:	2b00      	cmp	r3, #0
1000a734:	d0fc      	beq.n	1000a730 <getchar_b11+0x2c>
	
	return string_input[0];
1000a736:	4b02      	ldr	r3, [pc, #8]	; (1000a740 <getchar_b11+0x3c>)
1000a738:	7818      	ldrb	r0, [r3, #0]
}
1000a73a:	bd38      	pop	{r3, r4, r5, pc}
1000a73c:	10011e1f 	.word	0x10011e1f
1000a740:	10011e24 	.word	0x10011e24
1000a744:	10012894 	.word	0x10012894
1000a748:	1000a53d 	.word	0x1000a53d
1000a74c:	100090d5 	.word	0x100090d5
1000a750:	10009105 	.word	0x10009105
1000a754:	100090ad 	.word	0x100090ad

1000a758 <dualtimer_callback2>:
#include "conf_dualtimer.h"

extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
1000a758:	b508      	push	{r3, lr}
	puts("Timer2 trigger\r\n");
1000a75a:	4802      	ldr	r0, [pc, #8]	; (1000a764 <dualtimer_callback2+0xc>)
1000a75c:	4b02      	ldr	r3, [pc, #8]	; (1000a768 <dualtimer_callback2+0x10>)
1000a75e:	4798      	blx	r3
}
1000a760:	bd08      	pop	{r3, pc}
1000a762:	46c0      	nop			; (mov r8, r8)
1000a764:	1001132c 	.word	0x1001132c
1000a768:	1000f919 	.word	0x1000f919

1000a76c <hw_timer_init>:

void hw_timer_init(void)
{
1000a76c:	b500      	push	{lr}
1000a76e:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000a770:	a801      	add	r0, sp, #4
1000a772:	4b05      	ldr	r3, [pc, #20]	; (1000a788 <hw_timer_init+0x1c>)
1000a774:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000a776:	4b05      	ldr	r3, [pc, #20]	; (1000a78c <hw_timer_init+0x20>)
1000a778:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000a77a:	4b05      	ldr	r3, [pc, #20]	; (1000a790 <hw_timer_init+0x24>)
1000a77c:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000a77e:	a801      	add	r0, sp, #4
1000a780:	4b04      	ldr	r3, [pc, #16]	; (1000a794 <hw_timer_init+0x28>)
1000a782:	4798      	blx	r3
}
1000a784:	b009      	add	sp, #36	; 0x24
1000a786:	bd00      	pop	{pc}
1000a788:	1000812d 	.word	0x1000812d
1000a78c:	00006590 	.word	0x00006590
1000a790:	0000cb20 	.word	0x0000cb20
1000a794:	100081c1 	.word	0x100081c1

1000a798 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000a798:	b510      	push	{r4, lr}
1000a79a:	1c01      	adds	r1, r0, #0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000a79c:	2000      	movs	r0, #0
1000a79e:	4c07      	ldr	r4, [pc, #28]	; (1000a7bc <hw_timer_register_callback+0x24>)
1000a7a0:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000a7a2:	2001      	movs	r0, #1
1000a7a4:	4906      	ldr	r1, [pc, #24]	; (1000a7c0 <hw_timer_register_callback+0x28>)
1000a7a6:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000a7a8:	2000      	movs	r0, #0
1000a7aa:	4c06      	ldr	r4, [pc, #24]	; (1000a7c4 <hw_timer_register_callback+0x2c>)
1000a7ac:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000a7ae:	2001      	movs	r0, #1
1000a7b0:	47a0      	blx	r4
1000a7b2:	2280      	movs	r2, #128	; 0x80
1000a7b4:	01d2      	lsls	r2, r2, #7
1000a7b6:	4b04      	ldr	r3, [pc, #16]	; (1000a7c8 <hw_timer_register_callback+0x30>)
1000a7b8:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a7ba:	bd10      	pop	{r4, pc}
1000a7bc:	100082c5 	.word	0x100082c5
1000a7c0:	1000a759 	.word	0x1000a759
1000a7c4:	1000819d 	.word	0x1000819d
1000a7c8:	e000e100 	.word	0xe000e100

1000a7cc <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000a7cc:	b508      	push	{r3, lr}
	if(delay <= 0) {
1000a7ce:	2800      	cmp	r0, #0
1000a7d0:	d100      	bne.n	1000a7d4 <hw_timer_start+0x8>
		delay = 1;
1000a7d2:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000a7d4:	4b05      	ldr	r3, [pc, #20]	; (1000a7ec <hw_timer_start+0x20>)
1000a7d6:	4343      	muls	r3, r0
1000a7d8:	1c1a      	adds	r2, r3, #0
1000a7da:	2000      	movs	r0, #0
1000a7dc:	2100      	movs	r1, #0
1000a7de:	4b04      	ldr	r3, [pc, #16]	; (1000a7f0 <hw_timer_start+0x24>)
1000a7e0:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000a7e2:	2000      	movs	r0, #0
1000a7e4:	4b03      	ldr	r3, [pc, #12]	; (1000a7f4 <hw_timer_start+0x28>)
1000a7e6:	4798      	blx	r3
}
1000a7e8:	bd08      	pop	{r3, pc}
1000a7ea:	46c0      	nop			; (mov r8, r8)
1000a7ec:	00006590 	.word	0x00006590
1000a7f0:	10008151 	.word	0x10008151
1000a7f4:	10008179 	.word	0x10008179

1000a7f8 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000a7f8:	b508      	push	{r3, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000a7fa:	2000      	movs	r0, #0
1000a7fc:	4b01      	ldr	r3, [pc, #4]	; (1000a804 <hw_timer_stop+0xc>)
1000a7fe:	4798      	blx	r3
}
1000a800:	bd08      	pop	{r3, pc}
1000a802:	46c0      	nop			; (mov r8, r8)
1000a804:	1000819d 	.word	0x1000819d

1000a808 <platform_event_free>:
void platform_event_free(struct platform_event *event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000a808:	4b02      	ldr	r3, [pc, #8]	; (1000a814 <platform_event_free+0xc>)
1000a80a:	681a      	ldr	r2, [r3, #0]
1000a80c:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000a80e:	6018      	str	r0, [r3, #0]
}
1000a810:	4770      	bx	lr
1000a812:	46c0      	nop			; (mov r8, r8)
1000a814:	10011e2c 	.word	0x10011e2c

1000a818 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000a818:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000a81a:	4b0b      	ldr	r3, [pc, #44]	; (1000a848 <platform_event_post+0x30>)
1000a81c:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000a81e:	2c00      	cmp	r4, #0
1000a820:	d011      	beq.n	1000a846 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000a822:	6825      	ldr	r5, [r4, #0]
1000a824:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000a826:	2300      	movs	r3, #0
1000a828:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000a82a:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000a82c:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000a82e:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000a830:	4b06      	ldr	r3, [pc, #24]	; (1000a84c <platform_event_post+0x34>)
1000a832:	681a      	ldr	r2, [r3, #0]
1000a834:	2a00      	cmp	r2, #0
1000a836:	d102      	bne.n	1000a83e <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000a838:	601c      	str	r4, [r3, #0]
1000a83a:	e004      	b.n	1000a846 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000a83c:	1c1a      	adds	r2, r3, #0
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000a83e:	6813      	ldr	r3, [r2, #0]
1000a840:	2b00      	cmp	r3, #0
1000a842:	d1fb      	bne.n	1000a83c <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000a844:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000a846:	bd30      	pop	{r4, r5, pc}
1000a848:	10011e2c 	.word	0x10011e2c
1000a84c:	10011e28 	.word	0x10011e28

1000a850 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000a850:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000a852:	2300      	movs	r3, #0
1000a854:	4a06      	ldr	r2, [pc, #24]	; (1000a870 <platform_event_init+0x20>)
1000a856:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000a858:	4a06      	ldr	r2, [pc, #24]	; (1000a874 <platform_event_init+0x24>)
1000a85a:	6013      	str	r3, [r2, #0]
1000a85c:	4c06      	ldr	r4, [pc, #24]	; (1000a878 <platform_event_init+0x28>)
1000a85e:	1c26      	adds	r6, r4, #0
1000a860:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000a862:	4d06      	ldr	r5, [pc, #24]	; (1000a87c <platform_event_init+0x2c>)
1000a864:	1c20      	adds	r0, r4, #0
1000a866:	47a8      	blx	r5
1000a868:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000a86a:	42b4      	cmp	r4, r6
1000a86c:	d1fa      	bne.n	1000a864 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000a86e:	bd70      	pop	{r4, r5, r6, pc}
1000a870:	10011e2c 	.word	0x10011e2c
1000a874:	10011e28 	.word	0x10011e28
1000a878:	10011e30 	.word	0x10011e30
1000a87c:	1000a809 	.word	0x1000a809

1000a880 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000a880:	b510      	push	{r4, lr}
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000a882:	4b11      	ldr	r3, [pc, #68]	; (1000a8c8 <at_ke_msg_send+0x48>)
1000a884:	681c      	ldr	r4, [r3, #0]
	ke_msg_send(param_ptr);
1000a886:	4b11      	ldr	r3, [pc, #68]	; (1000a8cc <at_ke_msg_send+0x4c>)
1000a888:	681b      	ldr	r3, [r3, #0]
1000a88a:	4798      	blx	r3
	if(osc_en == 0)
1000a88c:	07e3      	lsls	r3, r4, #31
1000a88e:	d414      	bmi.n	1000a8ba <at_ke_msg_send+0x3a>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000a890:	4b0f      	ldr	r3, [pc, #60]	; (1000a8d0 <at_ke_msg_send+0x50>)
1000a892:	681b      	ldr	r3, [r3, #0]
1000a894:	2002      	movs	r0, #2
1000a896:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000a898:	4b0e      	ldr	r3, [pc, #56]	; (1000a8d4 <at_ke_msg_send+0x54>)
1000a89a:	681b      	ldr	r3, [r3, #0]
1000a89c:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000a89e:	4c0e      	ldr	r4, [pc, #56]	; (1000a8d8 <at_ke_msg_send+0x58>)
1000a8a0:	2003      	movs	r0, #3
1000a8a2:	6823      	ldr	r3, [r4, #0]
1000a8a4:	4798      	blx	r3
1000a8a6:	2800      	cmp	r0, #0
1000a8a8:	d1fa      	bne.n	1000a8a0 <at_ke_msg_send+0x20>
		pwr_disable_arm_wakeup(1<<1);
1000a8aa:	4b0c      	ldr	r3, [pc, #48]	; (1000a8dc <at_ke_msg_send+0x5c>)
1000a8ac:	681b      	ldr	r3, [r3, #0]
1000a8ae:	3002      	adds	r0, #2
1000a8b0:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000a8b2:	2201      	movs	r2, #1
1000a8b4:	4b0a      	ldr	r3, [pc, #40]	; (1000a8e0 <at_ke_msg_send+0x60>)
1000a8b6:	601a      	str	r2, [r3, #0]
1000a8b8:	e004      	b.n	1000a8c4 <at_ke_msg_send+0x44>
		#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
1000a8ba:	4b0a      	ldr	r3, [pc, #40]	; (1000a8e4 <at_ke_msg_send+0x64>)
1000a8bc:	6818      	ldr	r0, [r3, #0]
1000a8be:	4b0a      	ldr	r3, [pc, #40]	; (1000a8e8 <at_ke_msg_send+0x68>)
1000a8c0:	681b      	ldr	r3, [r3, #0]
1000a8c2:	4798      	blx	r3
	}
}
1000a8c4:	bd10      	pop	{r4, pc}
1000a8c6:	46c0      	nop			; (mov r8, r8)
1000a8c8:	4000b1ec 	.word	0x4000b1ec
1000a8cc:	10011edc 	.word	0x10011edc
1000a8d0:	10011ed4 	.word	0x10011ed4
1000a8d4:	10011ee4 	.word	0x10011ee4
1000a8d8:	10011ebc 	.word	0x10011ebc
1000a8dc:	10011ec4 	.word	0x10011ec4
1000a8e0:	4000b020 	.word	0x4000b020
1000a8e4:	10011ec8 	.word	0x10011ec8
1000a8e8:	10011eb4 	.word	0x10011eb4

1000a8ec <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000a8ec:	b508      	push	{r3, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000a8ee:	4b06      	ldr	r3, [pc, #24]	; (1000a908 <samb11_plf_resume_callback+0x1c>)
1000a8f0:	4a06      	ldr	r2, [pc, #24]	; (1000a90c <samb11_plf_resume_callback+0x20>)
1000a8f2:	6819      	ldr	r1, [r3, #0]
1000a8f4:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000a8f6:	685a      	ldr	r2, [r3, #4]
1000a8f8:	4b05      	ldr	r3, [pc, #20]	; (1000a910 <samb11_plf_resume_callback+0x24>)
1000a8fa:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000a8fc:	4b05      	ldr	r3, [pc, #20]	; (1000a914 <samb11_plf_resume_callback+0x28>)
1000a8fe:	681b      	ldr	r3, [r3, #0]
1000a900:	2b00      	cmp	r3, #0
1000a902:	d000      	beq.n	1000a906 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000a904:	4798      	blx	r3
	}
}
1000a906:	bd08      	pop	{r3, pc}
1000a908:	100128e0 	.word	0x100128e0
1000a90c:	4000b00c 	.word	0x4000b00c
1000a910:	4000b010 	.word	0x4000b010
1000a914:	10012bb4 	.word	0x10012bb4

1000a918 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000a918:	b538      	push	{r3, r4, r5, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000a91a:	4810      	ldr	r0, [pc, #64]	; (1000a95c <init_port_list+0x44>)
1000a91c:	2100      	movs	r1, #0
1000a91e:	2232      	movs	r2, #50	; 0x32
1000a920:	4b0f      	ldr	r3, [pc, #60]	; (1000a960 <init_port_list+0x48>)
1000a922:	4798      	blx	r3
1000a924:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000a926:	480d      	ldr	r0, [pc, #52]	; (1000a95c <init_port_list+0x44>)
		port_list[i].bit.available = 1;
1000a928:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000a92a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000a92c:	004a      	lsls	r2, r1, #1
1000a92e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000a930:	1882      	adds	r2, r0, r2
1000a932:	7853      	ldrb	r3, [r2, #1]
1000a934:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000a936:	b2db      	uxtb	r3, r3
1000a938:	43a3      	bics	r3, r4
1000a93a:	7053      	strb	r3, [r2, #1]
1000a93c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000a93e:	2919      	cmp	r1, #25
1000a940:	d1f4      	bne.n	1000a92c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000a942:	4b06      	ldr	r3, [pc, #24]	; (1000a95c <init_port_list+0x44>)
1000a944:	785a      	ldrb	r2, [r3, #1]
1000a946:	3918      	subs	r1, #24
1000a948:	438a      	bics	r2, r1
1000a94a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000a94c:	78da      	ldrb	r2, [r3, #3]
1000a94e:	438a      	bics	r2, r1
1000a950:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	port_list[14].bit.available = 0;
1000a952:	7f5a      	ldrb	r2, [r3, #29]
1000a954:	438a      	bics	r2, r1
1000a956:	775a      	strb	r2, [r3, #29]
}
1000a958:	bd38      	pop	{r3, r4, r5, pc}
1000a95a:	46c0      	nop			; (mov r8, r8)
1000a95c:	100128f8 	.word	0x100128f8
1000a960:	1000f7e9 	.word	0x1000f7e9

1000a964 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000a964:	4a06      	ldr	r2, [pc, #24]	; (1000a980 <init_clock+0x1c>)
1000a966:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000a968:	4b06      	ldr	r3, [pc, #24]	; (1000a984 <init_clock+0x20>)
1000a96a:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000a96c:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000a96e:	4a06      	ldr	r2, [pc, #24]	; (1000a988 <init_clock+0x24>)
1000a970:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000a972:	4906      	ldr	r1, [pc, #24]	; (1000a98c <init_clock+0x28>)
1000a974:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000a976:	4b06      	ldr	r3, [pc, #24]	; (1000a990 <init_clock+0x2c>)
1000a978:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000a97a:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000a97c:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000a97e:	4770      	bx	lr
1000a980:	4000b00c 	.word	0x4000b00c
1000a984:	fffe0fd3 	.word	0xfffe0fd3
1000a988:	100128e0 	.word	0x100128e0
1000a98c:	4000b010 	.word	0x4000b010
1000a990:	ffffe7c0 	.word	0xffffe7c0

1000a994 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a996:	464f      	mov	r7, r9
1000a998:	4646      	mov	r6, r8
1000a99a:	b4c0      	push	{r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000a99c:	4b44      	ldr	r3, [pc, #272]	; (1000aab0 <platform_driver_init+0x11c>)
1000a99e:	781b      	ldrb	r3, [r3, #0]
1000a9a0:	2b00      	cmp	r3, #0
1000a9a2:	d003      	beq.n	1000a9ac <platform_driver_init+0x18>
1000a9a4:	4b42      	ldr	r3, [pc, #264]	; (1000aab0 <platform_driver_init+0x11c>)
1000a9a6:	781b      	ldrb	r3, [r3, #0]
1000a9a8:	2b01      	cmp	r3, #1
1000a9aa:	d079      	beq.n	1000aaa0 <platform_driver_init+0x10c>
		init_port_list();
1000a9ac:	4b41      	ldr	r3, [pc, #260]	; (1000aab4 <platform_driver_init+0x120>)
1000a9ae:	4798      	blx	r3
		init_clock();
1000a9b0:	4b41      	ldr	r3, [pc, #260]	; (1000aab8 <platform_driver_init+0x124>)
1000a9b2:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000a9b4:	2700      	movs	r7, #0
1000a9b6:	4b41      	ldr	r3, [pc, #260]	; (1000aabc <platform_driver_init+0x128>)
1000a9b8:	601f      	str	r7, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a9ba:	4c41      	ldr	r4, [pc, #260]	; (1000aac0 <platform_driver_init+0x12c>)
1000a9bc:	2380      	movs	r3, #128	; 0x80
1000a9be:	2280      	movs	r2, #128	; 0x80
1000a9c0:	0412      	lsls	r2, r2, #16
1000a9c2:	4691      	mov	r9, r2
1000a9c4:	50e2      	str	r2, [r4, r3]
1000a9c6:	2280      	movs	r2, #128	; 0x80
1000a9c8:	0452      	lsls	r2, r2, #17
1000a9ca:	4690      	mov	r8, r2
1000a9cc:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000a9ce:	4d3d      	ldr	r5, [pc, #244]	; (1000aac4 <platform_driver_init+0x130>)
1000a9d0:	4b3d      	ldr	r3, [pc, #244]	; (1000aac8 <platform_driver_init+0x134>)
1000a9d2:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000a9d4:	4b3d      	ldr	r3, [pc, #244]	; (1000aacc <platform_driver_init+0x138>)
1000a9d6:	4a3e      	ldr	r2, [pc, #248]	; (1000aad0 <platform_driver_init+0x13c>)
1000a9d8:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000a9da:	493e      	ldr	r1, [pc, #248]	; (1000aad4 <platform_driver_init+0x140>)
1000a9dc:	4a3e      	ldr	r2, [pc, #248]	; (1000aad8 <platform_driver_init+0x144>)
1000a9de:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000a9e0:	4a3e      	ldr	r2, [pc, #248]	; (1000aadc <platform_driver_init+0x148>)
1000a9e2:	6811      	ldr	r1, [r2, #0]
1000a9e4:	4a3e      	ldr	r2, [pc, #248]	; (1000aae0 <platform_driver_init+0x14c>)
1000a9e6:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000a9e8:	4a3e      	ldr	r2, [pc, #248]	; (1000aae4 <platform_driver_init+0x150>)
1000a9ea:	6811      	ldr	r1, [r2, #0]
1000a9ec:	4a3e      	ldr	r2, [pc, #248]	; (1000aae8 <platform_driver_init+0x154>)
1000a9ee:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000a9f0:	493e      	ldr	r1, [pc, #248]	; (1000aaec <platform_driver_init+0x158>)
1000a9f2:	4a3f      	ldr	r2, [pc, #252]	; (1000aaf0 <platform_driver_init+0x15c>)
1000a9f4:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000a9f6:	493f      	ldr	r1, [pc, #252]	; (1000aaf4 <platform_driver_init+0x160>)
1000a9f8:	4a3f      	ldr	r2, [pc, #252]	; (1000aaf8 <platform_driver_init+0x164>)
1000a9fa:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000a9fc:	4e3f      	ldr	r6, [pc, #252]	; (1000aafc <platform_driver_init+0x168>)
1000a9fe:	4a40      	ldr	r2, [pc, #256]	; (1000ab00 <platform_driver_init+0x16c>)
1000aa00:	6032      	str	r2, [r6, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000aa02:	4940      	ldr	r1, [pc, #256]	; (1000ab04 <platform_driver_init+0x170>)
1000aa04:	4a40      	ldr	r2, [pc, #256]	; (1000ab08 <platform_driver_init+0x174>)
1000aa06:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000aa08:	4940      	ldr	r1, [pc, #256]	; (1000ab0c <platform_driver_init+0x178>)
1000aa0a:	4a41      	ldr	r2, [pc, #260]	; (1000ab10 <platform_driver_init+0x17c>)
1000aa0c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000aa0e:	4941      	ldr	r1, [pc, #260]	; (1000ab14 <platform_driver_init+0x180>)
1000aa10:	4a41      	ldr	r2, [pc, #260]	; (1000ab18 <platform_driver_init+0x184>)
1000aa12:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000aa14:	4941      	ldr	r1, [pc, #260]	; (1000ab1c <platform_driver_init+0x188>)
1000aa16:	4a42      	ldr	r2, [pc, #264]	; (1000ab20 <platform_driver_init+0x18c>)
1000aa18:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000aa1a:	4942      	ldr	r1, [pc, #264]	; (1000ab24 <platform_driver_init+0x190>)
1000aa1c:	4a42      	ldr	r2, [pc, #264]	; (1000ab28 <platform_driver_init+0x194>)
1000aa1e:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000aa20:	4942      	ldr	r1, [pc, #264]	; (1000ab2c <platform_driver_init+0x198>)
1000aa22:	4a43      	ldr	r2, [pc, #268]	; (1000ab30 <platform_driver_init+0x19c>)
1000aa24:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000aa26:	2028      	movs	r0, #40	; 0x28
1000aa28:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000aa2a:	2028      	movs	r0, #40	; 0x28
1000aa2c:	4941      	ldr	r1, [pc, #260]	; (1000ab34 <platform_driver_init+0x1a0>)
1000aa2e:	682b      	ldr	r3, [r5, #0]
1000aa30:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000aa32:	682b      	ldr	r3, [r5, #0]
1000aa34:	2027      	movs	r0, #39	; 0x27
1000aa36:	4940      	ldr	r1, [pc, #256]	; (1000ab38 <platform_driver_init+0x1a4>)
1000aa38:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000aa3a:	4b40      	ldr	r3, [pc, #256]	; (1000ab3c <platform_driver_init+0x1a8>)
1000aa3c:	681a      	ldr	r2, [r3, #0]
1000aa3e:	4b40      	ldr	r3, [pc, #256]	; (1000ab40 <platform_driver_init+0x1ac>)
1000aa40:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000aa42:	4a40      	ldr	r2, [pc, #256]	; (1000ab44 <platform_driver_init+0x1b0>)
1000aa44:	4b40      	ldr	r3, [pc, #256]	; (1000ab48 <platform_driver_init+0x1b4>)
1000aa46:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000aa48:	4a40      	ldr	r2, [pc, #256]	; (1000ab4c <platform_driver_init+0x1b8>)
1000aa4a:	4b41      	ldr	r3, [pc, #260]	; (1000ab50 <platform_driver_init+0x1bc>)
1000aa4c:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000aa4e:	4a41      	ldr	r2, [pc, #260]	; (1000ab54 <platform_driver_init+0x1c0>)
1000aa50:	4b41      	ldr	r3, [pc, #260]	; (1000ab58 <platform_driver_init+0x1c4>)
1000aa52:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000aa54:	4a41      	ldr	r2, [pc, #260]	; (1000ab5c <platform_driver_init+0x1c8>)
1000aa56:	4b42      	ldr	r3, [pc, #264]	; (1000ab60 <platform_driver_init+0x1cc>)
1000aa58:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000aa5a:	4a42      	ldr	r2, [pc, #264]	; (1000ab64 <platform_driver_init+0x1d0>)
1000aa5c:	4b42      	ldr	r3, [pc, #264]	; (1000ab68 <platform_driver_init+0x1d4>)
1000aa5e:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000aa60:	4a42      	ldr	r2, [pc, #264]	; (1000ab6c <platform_driver_init+0x1d8>)
1000aa62:	4b43      	ldr	r3, [pc, #268]	; (1000ab70 <platform_driver_init+0x1dc>)
1000aa64:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000aa66:	4a43      	ldr	r2, [pc, #268]	; (1000ab74 <platform_driver_init+0x1e0>)
1000aa68:	4b43      	ldr	r3, [pc, #268]	; (1000ab78 <platform_driver_init+0x1e4>)
1000aa6a:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000aa6c:	4843      	ldr	r0, [pc, #268]	; (1000ab7c <platform_driver_init+0x1e8>)
1000aa6e:	2100      	movs	r1, #0
1000aa70:	22a0      	movs	r2, #160	; 0xa0
1000aa72:	0092      	lsls	r2, r2, #2
1000aa74:	4b42      	ldr	r3, [pc, #264]	; (1000ab80 <platform_driver_init+0x1ec>)
1000aa76:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000aa78:	2280      	movs	r2, #128	; 0x80
1000aa7a:	0092      	lsls	r2, r2, #2
1000aa7c:	4b41      	ldr	r3, [pc, #260]	; (1000ab84 <platform_driver_init+0x1f0>)
1000aa7e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000aa80:	4b41      	ldr	r3, [pc, #260]	; (1000ab88 <platform_driver_init+0x1f4>)
1000aa82:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000aa84:	464b      	mov	r3, r9
1000aa86:	6023      	str	r3, [r4, #0]
1000aa88:	4643      	mov	r3, r8
1000aa8a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000aa8c:	4b3f      	ldr	r3, [pc, #252]	; (1000ab8c <platform_driver_init+0x1f8>)
1000aa8e:	601f      	str	r7, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000aa90:	6833      	ldr	r3, [r6, #0]
1000aa92:	4a3f      	ldr	r2, [pc, #252]	; (1000ab90 <platform_driver_init+0x1fc>)
1000aa94:	601a      	str	r2, [r3, #0]
		platform_initialized = 1;
1000aa96:	2201      	movs	r2, #1
1000aa98:	4b05      	ldr	r3, [pc, #20]	; (1000aab0 <platform_driver_init+0x11c>)
1000aa9a:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000aa9c:	2000      	movs	r0, #0
1000aa9e:	e003      	b.n	1000aaa8 <platform_driver_init+0x114>
	}
	else {
		platform_initialized = 1;
1000aaa0:	2201      	movs	r2, #1
1000aaa2:	4b03      	ldr	r3, [pc, #12]	; (1000aab0 <platform_driver_init+0x11c>)
1000aaa4:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000aaa6:	2001      	movs	r0, #1
	}
	return status;
}
1000aaa8:	bc0c      	pop	{r2, r3}
1000aaaa:	4690      	mov	r8, r2
1000aaac:	4699      	mov	r9, r3
1000aaae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aab0:	10011ec0 	.word	0x10011ec0
1000aab4:	1000a919 	.word	0x1000a919
1000aab8:	1000a965 	.word	0x1000a965
1000aabc:	10011ee0 	.word	0x10011ee0
1000aac0:	e000e100 	.word	0xe000e100
1000aac4:	10012bac 	.word	0x10012bac
1000aac8:	000007d7 	.word	0x000007d7
1000aacc:	000007bd 	.word	0x000007bd
1000aad0:	100128ec 	.word	0x100128ec
1000aad4:	0001bc51 	.word	0x0001bc51
1000aad8:	10012bb0 	.word	0x10012bb0
1000aadc:	100400bc 	.word	0x100400bc
1000aae0:	10011eb0 	.word	0x10011eb0
1000aae4:	100400b8 	.word	0x100400b8
1000aae8:	10011eac 	.word	0x10011eac
1000aaec:	0001b99f 	.word	0x0001b99f
1000aaf0:	100128e8 	.word	0x100128e8
1000aaf4:	0001b9db 	.word	0x0001b9db
1000aaf8:	100128f0 	.word	0x100128f0
1000aafc:	10012bbc 	.word	0x10012bbc
1000ab00:	1004003c 	.word	0x1004003c
1000ab04:	10041fc0 	.word	0x10041fc0
1000ab08:	100128f4 	.word	0x100128f4
1000ab0c:	10041fc4 	.word	0x10041fc4
1000ab10:	10012bb8 	.word	0x10012bb8
1000ab14:	0001cbe9 	.word	0x0001cbe9
1000ab18:	10011ed4 	.word	0x10011ed4
1000ab1c:	0001cd8f 	.word	0x0001cd8f
1000ab20:	10011ec4 	.word	0x10011ec4
1000ab24:	0001cea3 	.word	0x0001cea3
1000ab28:	10011ee4 	.word	0x10011ee4
1000ab2c:	0001cbcf 	.word	0x0001cbcf
1000ab30:	10011ebc 	.word	0x10011ebc
1000ab34:	1000b009 	.word	0x1000b009
1000ab38:	1000af9d 	.word	0x1000af9d
1000ab3c:	100400e4 	.word	0x100400e4
1000ab40:	10011edc 	.word	0x10011edc
1000ab44:	00019fe9 	.word	0x00019fe9
1000ab48:	10011ee8 	.word	0x10011ee8
1000ab4c:	0001dbdd 	.word	0x0001dbdd
1000ab50:	10011eb4 	.word	0x10011eb4
1000ab54:	0001dc5b 	.word	0x0001dc5b
1000ab58:	10011ecc 	.word	0x10011ecc
1000ab5c:	100405ec 	.word	0x100405ec
1000ab60:	10011ec8 	.word	0x10011ec8
1000ab64:	0001d5e3 	.word	0x0001d5e3
1000ab68:	10011ed8 	.word	0x10011ed8
1000ab6c:	10040c20 	.word	0x10040c20
1000ab70:	10011eec 	.word	0x10011eec
1000ab74:	00019f09 	.word	0x00019f09
1000ab78:	10011ea8 	.word	0x10011ea8
1000ab7c:	1001292c 	.word	0x1001292c
1000ab80:	1000f7e9 	.word	0x1000f7e9
1000ab84:	10012bc0 	.word	0x10012bc0
1000ab88:	1000a851 	.word	0x1000a851
1000ab8c:	10012bb4 	.word	0x10012bb4
1000ab90:	1000a8ed 	.word	0x1000a8ed

1000ab94 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ab94:	4b04      	ldr	r3, [pc, #16]	; (1000aba8 <platform_register_ble_msg_handler+0x14>)
1000ab96:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000ab98:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ab9a:	2a01      	cmp	r2, #1
1000ab9c:	d102      	bne.n	1000aba4 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000ab9e:	4b03      	ldr	r3, [pc, #12]	; (1000abac <platform_register_ble_msg_handler+0x18>)
1000aba0:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000aba2:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000aba4:	1c18      	adds	r0, r3, #0
1000aba6:	4770      	bx	lr
1000aba8:	10011ec0 	.word	0x10011ec0
1000abac:	10011ee0 	.word	0x10011ee0

1000abb0 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000abb0:	b538      	push	{r3, r4, r5, lr}
1000abb2:	1c04      	adds	r4, r0, #0
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1000abb4:	8840      	ldrh	r0, [r0, #2]
	if(gapm_get_task_from_id != NULL)
1000abb6:	4b0e      	ldr	r3, [pc, #56]	; (1000abf0 <platform_interface_send+0x40>)
1000abb8:	681b      	ldr	r3, [r3, #0]
1000abba:	2b00      	cmp	r3, #0
1000abbc:	d001      	beq.n	1000abc2 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000abbe:	4798      	blx	r3
1000abc0:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000abc2:	8820      	ldrh	r0, [r4, #0]
1000abc4:	8861      	ldrh	r1, [r4, #2]
1000abc6:	88a2      	ldrh	r2, [r4, #4]
1000abc8:	88e3      	ldrh	r3, [r4, #6]
1000abca:	4d0a      	ldr	r5, [pc, #40]	; (1000abf4 <platform_interface_send+0x44>)
1000abcc:	682d      	ldr	r5, [r5, #0]
1000abce:	47a8      	blx	r5
1000abd0:	1c05      	adds	r5, r0, #0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000abd2:	88e2      	ldrh	r2, [r4, #6]
1000abd4:	2a00      	cmp	r2, #0
1000abd6:	d102      	bne.n	1000abde <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000abd8:	4b07      	ldr	r3, [pc, #28]	; (1000abf8 <platform_interface_send+0x48>)
1000abda:	4798      	blx	r3
1000abdc:	e006      	b.n	1000abec <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000abde:	1c21      	adds	r1, r4, #0
1000abe0:	3108      	adds	r1, #8
1000abe2:	4b06      	ldr	r3, [pc, #24]	; (1000abfc <platform_interface_send+0x4c>)
1000abe4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000abe6:	1c28      	adds	r0, r5, #0
1000abe8:	4b03      	ldr	r3, [pc, #12]	; (1000abf8 <platform_interface_send+0x48>)
1000abea:	4798      	blx	r3
	}
}
1000abec:	bd38      	pop	{r3, r4, r5, pc}
1000abee:	46c0      	nop			; (mov r8, r8)
1000abf0:	10011eb0 	.word	0x10011eb0
1000abf4:	10011ee8 	.word	0x10011ee8
1000abf8:	1000a881 	.word	0x1000a881
1000abfc:	1000f7d7 	.word	0x1000f7d7

1000ac00 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ac02:	1c04      	adds	r4, r0, #0
1000ac04:	1c0f      	adds	r7, r1, #0
1000ac06:	1c16      	adds	r6, r2, #0
1000ac08:	1c1d      	adds	r5, r3, #0
	void* params;
//#if (CHIPVERSION_A4)	
	os_sem_up(gstrFwSem);
1000ac0a:	4b0e      	ldr	r3, [pc, #56]	; (1000ac44 <send_plf_int_msg_ind+0x44>)
1000ac0c:	6818      	ldr	r0, [r3, #0]
1000ac0e:	4b0e      	ldr	r3, [pc, #56]	; (1000ac48 <send_plf_int_msg_ind+0x48>)
1000ac10:	681b      	ldr	r3, [r3, #0]
1000ac12:	4798      	blx	r3
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000ac14:	023a      	lsls	r2, r7, #8
1000ac16:	4322      	orrs	r2, r4
1000ac18:	4b0c      	ldr	r3, [pc, #48]	; (1000ac4c <send_plf_int_msg_ind+0x4c>)
1000ac1a:	681c      	ldr	r4, [r3, #0]
1000ac1c:	20a0      	movs	r0, #160	; 0xa0
1000ac1e:	00c0      	lsls	r0, r0, #3
1000ac20:	2105      	movs	r1, #5
1000ac22:	1c2b      	adds	r3, r5, #0
1000ac24:	47a0      	blx	r4
1000ac26:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000ac28:	d00a      	beq.n	1000ac40 <send_plf_int_msg_ind+0x40>
		if((data_len != 0) && (NULL != data))
1000ac2a:	2d00      	cmp	r5, #0
1000ac2c:	d005      	beq.n	1000ac3a <send_plf_int_msg_ind+0x3a>
1000ac2e:	2e00      	cmp	r6, #0
1000ac30:	d003      	beq.n	1000ac3a <send_plf_int_msg_ind+0x3a>
		{
			//copy params
			memcpy(params, data, data_len);
1000ac32:	1c31      	adds	r1, r6, #0
1000ac34:	1c2a      	adds	r2, r5, #0
1000ac36:	4b06      	ldr	r3, [pc, #24]	; (1000ac50 <send_plf_int_msg_ind+0x50>)
1000ac38:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000ac3a:	1c20      	adds	r0, r4, #0
1000ac3c:	4b05      	ldr	r3, [pc, #20]	; (1000ac54 <send_plf_int_msg_ind+0x54>)
1000ac3e:	4798      	blx	r3
	}
}
1000ac40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ac42:	46c0      	nop			; (mov r8, r8)
1000ac44:	10011ec8 	.word	0x10011ec8
1000ac48:	10011eb4 	.word	0x10011eb4
1000ac4c:	10011ee8 	.word	0x10011ee8
1000ac50:	1000f7d7 	.word	0x1000f7d7
1000ac54:	1000a881 	.word	0x1000a881

1000ac58 <platform_event_wait>:
	
	platform_interface_send(msg, u16TxLen);
}

plf_drv_status platform_event_wait(uint32_t timeout)
{
1000ac58:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ac5a:	465f      	mov	r7, fp
1000ac5c:	4656      	mov	r6, sl
1000ac5e:	464d      	mov	r5, r9
1000ac60:	4644      	mov	r4, r8
1000ac62:	b4f0      	push	{r4, r5, r6, r7}
1000ac64:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000ac66:	3801      	subs	r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000ac68:	2300      	movs	r3, #0
1000ac6a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000ac6c:	1cc3      	adds	r3, r0, #3
1000ac6e:	d81a      	bhi.n	1000aca6 <platform_event_wait+0x4e>
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000ac70:	2300      	movs	r3, #0
1000ac72:	9302      	str	r3, [sp, #8]
1000ac74:	9303      	str	r3, [sp, #12]
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ac76:	3319      	adds	r3, #25
1000ac78:	aa02      	add	r2, sp, #8
1000ac7a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ac7c:	3b16      	subs	r3, #22
1000ac7e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000ac80:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000ac82:	3302      	adds	r3, #2
1000ac84:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ac86:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000ac88:	7210      	strb	r0, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000ac8a:	0a03      	lsrs	r3, r0, #8
1000ac8c:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000ac8e:	0c03      	lsrs	r3, r0, #16
1000ac90:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000ac92:	0e00      	lsrs	r0, r0, #24
1000ac94:	72d0      	strb	r0, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000ac96:	2301      	movs	r3, #1
1000ac98:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000ac9a:	1c10      	adds	r0, r2, #0
1000ac9c:	210d      	movs	r1, #13
1000ac9e:	4b79      	ldr	r3, [pc, #484]	; (1000ae84 <platform_event_wait+0x22c>)
1000aca0:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000aca2:	2301      	movs	r3, #1
1000aca4:	4699      	mov	r9, r3
1000aca6:	2400      	movs	r4, #0
1000aca8:	2300      	movs	r3, #0
1000acaa:	469b      	mov	fp, r3
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000acac:	4f76      	ldr	r7, [pc, #472]	; (1000ae88 <platform_event_wait+0x230>)
1000acae:	4e77      	ldr	r6, [pc, #476]	; (1000ae8c <platform_event_wait+0x234>)
1000acb0:	6830      	ldr	r0, [r6, #0]
1000acb2:	4977      	ldr	r1, [pc, #476]	; (1000ae90 <platform_event_wait+0x238>)
1000acb4:	683b      	ldr	r3, [r7, #0]
1000acb6:	4798      	blx	r3
1000acb8:	2800      	cmp	r0, #0
1000acba:	d000      	beq.n	1000acbe <platform_event_wait+0x66>
1000acbc:	e08a      	b.n	1000add4 <platform_event_wait+0x17c>
		{
			uint16_t msg_id = rcv_msg->id;
1000acbe:	4b74      	ldr	r3, [pc, #464]	; (1000ae90 <platform_event_wait+0x238>)
1000acc0:	681c      	ldr	r4, [r3, #0]
1000acc2:	88a5      	ldrh	r5, [r4, #4]
			uint16_t src_id = rcv_msg->src_id;
1000acc4:	8923      	ldrh	r3, [r4, #8]
1000acc6:	469a      	mov	sl, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000acc8:	8963      	ldrh	r3, [r4, #10]
1000acca:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000accc:	23cd      	movs	r3, #205	; 0xcd
1000acce:	009b      	lsls	r3, r3, #2
1000acd0:	429d      	cmp	r5, r3
1000acd2:	d100      	bne.n	1000acd6 <platform_event_wait+0x7e>
1000acd4:	e0c7      	b.n	1000ae66 <platform_event_wait+0x20e>
1000acd6:	464b      	mov	r3, r9
1000acd8:	2b00      	cmp	r3, #0
1000acda:	d011      	beq.n	1000ad00 <platform_event_wait+0xa8>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000acdc:	2300      	movs	r3, #0
1000acde:	9302      	str	r3, [sp, #8]
1000ace0:	9303      	str	r3, [sp, #12]
1000ace2:	9304      	str	r3, [sp, #16]
1000ace4:	aa02      	add	r2, sp, #8
1000ace6:	7313      	strb	r3, [r2, #12]
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ace8:	3319      	adds	r3, #25
1000acea:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000acec:	3b16      	subs	r3, #22
1000acee:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000acf0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000acf2:	3302      	adds	r3, #2
1000acf4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000acf6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000acf8:	1c10      	adds	r0, r2, #0
1000acfa:	210d      	movs	r1, #13
1000acfc:	4b61      	ldr	r3, [pc, #388]	; (1000ae84 <platform_event_wait+0x22c>)
1000acfe:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000ad00:	23a0      	movs	r3, #160	; 0xa0
1000ad02:	00db      	lsls	r3, r3, #3
1000ad04:	429d      	cmp	r5, r3
1000ad06:	d122      	bne.n	1000ad4e <platform_event_wait+0xf6>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000ad08:	4b62      	ldr	r3, [pc, #392]	; (1000ae94 <platform_event_wait+0x23c>)
1000ad0a:	881b      	ldrh	r3, [r3, #0]
1000ad0c:	4443      	add	r3, r8
1000ad0e:	22a0      	movs	r2, #160	; 0xa0
1000ad10:	0092      	lsls	r2, r2, #2
1000ad12:	4293      	cmp	r3, r2
1000ad14:	dd02      	ble.n	1000ad1c <platform_event_wait+0xc4>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ad16:	3a80      	subs	r2, #128	; 0x80
1000ad18:	4b5e      	ldr	r3, [pc, #376]	; (1000ae94 <platform_event_wait+0x23c>)
1000ad1a:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000ad1c:	4b5d      	ldr	r3, [pc, #372]	; (1000ae94 <platform_event_wait+0x23c>)
1000ad1e:	469b      	mov	fp, r3
1000ad20:	881d      	ldrh	r5, [r3, #0]
1000ad22:	4b5d      	ldr	r3, [pc, #372]	; (1000ae98 <platform_event_wait+0x240>)
1000ad24:	18ed      	adds	r5, r5, r3
1000ad26:	1c21      	adds	r1, r4, #0
1000ad28:	310c      	adds	r1, #12
1000ad2a:	1c28      	adds	r0, r5, #0
1000ad2c:	4642      	mov	r2, r8
1000ad2e:	4b5b      	ldr	r3, [pc, #364]	; (1000ae9c <platform_event_wait+0x244>)
1000ad30:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000ad32:	4650      	mov	r0, sl
1000ad34:	1c29      	adds	r1, r5, #0
1000ad36:	4642      	mov	r2, r8
1000ad38:	4b59      	ldr	r3, [pc, #356]	; (1000aea0 <platform_event_wait+0x248>)
1000ad3a:	4798      	blx	r3
				plf_event_buff_index += len;
1000ad3c:	465b      	mov	r3, fp
1000ad3e:	881b      	ldrh	r3, [r3, #0]
1000ad40:	4443      	add	r3, r8
1000ad42:	465a      	mov	r2, fp
1000ad44:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ad46:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000ad48:	2302      	movs	r3, #2
1000ad4a:	469b      	mov	fp, r3
1000ad4c:	e03c      	b.n	1000adc8 <platform_event_wait+0x170>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ad4e:	4b55      	ldr	r3, [pc, #340]	; (1000aea4 <platform_event_wait+0x24c>)
1000ad50:	681b      	ldr	r3, [r3, #0]
1000ad52:	2b00      	cmp	r3, #0
1000ad54:	d033      	beq.n	1000adbe <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000ad56:	4b4e      	ldr	r3, [pc, #312]	; (1000ae90 <platform_event_wait+0x238>)
1000ad58:	681a      	ldr	r2, [r3, #0]
1000ad5a:	8893      	ldrh	r3, [r2, #4]
1000ad5c:	21cd      	movs	r1, #205	; 0xcd
1000ad5e:	0089      	lsls	r1, r1, #2
1000ad60:	428b      	cmp	r3, r1
1000ad62:	d104      	bne.n	1000ad6e <platform_event_wait+0x116>
					{
						if(bEventTimeoutFlag)
1000ad64:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000ad66:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000ad68:	2b00      	cmp	r3, #0
1000ad6a:	d02d      	beq.n	1000adc8 <platform_event_wait+0x170>
1000ad6c:	e029      	b.n	1000adc2 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000ad6e:	4c4e      	ldr	r4, [pc, #312]	; (1000aea8 <platform_event_wait+0x250>)
1000ad70:	4d49      	ldr	r5, [pc, #292]	; (1000ae98 <platform_event_wait+0x240>)
1000ad72:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000ad74:	702b      	strb	r3, [r5, #0]
1000ad76:	0a1b      	lsrs	r3, r3, #8
1000ad78:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000ad7a:	8910      	ldrh	r0, [r2, #8]
1000ad7c:	4b4b      	ldr	r3, [pc, #300]	; (1000aeac <platform_event_wait+0x254>)
1000ad7e:	681b      	ldr	r3, [r3, #0]
1000ad80:	4798      	blx	r3
1000ad82:	7128      	strb	r0, [r5, #4]
1000ad84:	0a00      	lsrs	r0, r0, #8
1000ad86:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000ad88:	6820      	ldr	r0, [r4, #0]
1000ad8a:	4b41      	ldr	r3, [pc, #260]	; (1000ae90 <platform_event_wait+0x238>)
1000ad8c:	681a      	ldr	r2, [r3, #0]
1000ad8e:	88d2      	ldrh	r2, [r2, #6]
1000ad90:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000ad92:	681d      	ldr	r5, [r3, #0]
1000ad94:	896b      	ldrh	r3, [r5, #10]
1000ad96:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000ad98:	3008      	adds	r0, #8
1000ad9a:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000ad9c:	896a      	ldrh	r2, [r5, #10]
1000ad9e:	2a00      	cmp	r2, #0
1000ada0:	d003      	beq.n	1000adaa <platform_event_wait+0x152>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000ada2:	1c29      	adds	r1, r5, #0
1000ada4:	310c      	adds	r1, #12
1000ada6:	4b3d      	ldr	r3, [pc, #244]	; (1000ae9c <platform_event_wait+0x244>)
1000ada8:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000adaa:	8969      	ldrh	r1, [r5, #10]
1000adac:	3108      	adds	r1, #8
1000adae:	4b3d      	ldr	r3, [pc, #244]	; (1000aea4 <platform_event_wait+0x24c>)
1000adb0:	681b      	ldr	r3, [r3, #0]
1000adb2:	4839      	ldr	r0, [pc, #228]	; (1000ae98 <platform_event_wait+0x240>)
1000adb4:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000adb6:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000adb8:	2303      	movs	r3, #3
1000adba:	469b      	mov	fp, r3
1000adbc:	e004      	b.n	1000adc8 <platform_event_wait+0x170>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000adbe:	2400      	movs	r4, #0
1000adc0:	e002      	b.n	1000adc8 <platform_event_wait+0x170>
1000adc2:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000adc4:	23d0      	movs	r3, #208	; 0xd0
1000adc6:	469b      	mov	fp, r3
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000adc8:	4b31      	ldr	r3, [pc, #196]	; (1000ae90 <platform_event_wait+0x238>)
1000adca:	6818      	ldr	r0, [r3, #0]
1000adcc:	4b38      	ldr	r3, [pc, #224]	; (1000aeb0 <platform_event_wait+0x258>)
1000adce:	681b      	ldr	r3, [r3, #0]
1000add0:	4798      	blx	r3
1000add2:	e001      	b.n	1000add8 <platform_event_wait+0x180>
		}
		else
		{
			status = STATUS_FAILURE;
1000add4:	2307      	movs	r3, #7
1000add6:	469b      	mov	fp, r3
		}
	}while(bLoopAgain);
1000add8:	2c00      	cmp	r4, #0
1000adda:	d000      	beq.n	1000adde <platform_event_wait+0x186>
1000addc:	e768      	b.n	1000acb0 <platform_event_wait+0x58>
	
	if(bEventTimeoutFlag)
1000adde:	464b      	mov	r3, r9
1000ade0:	2b00      	cmp	r3, #0
1000ade2:	d046      	beq.n	1000ae72 <platform_event_wait+0x21a>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000ade4:	4b29      	ldr	r3, [pc, #164]	; (1000ae8c <platform_event_wait+0x234>)
1000ade6:	681d      	ldr	r5, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000ade8:	2d00      	cmp	r5, #0
1000adea:	d104      	bne.n	1000adf6 <platform_event_wait+0x19e>
1000adec:	2300      	movs	r3, #0
1000adee:	6a1c      	ldr	r4, [r3, #32]
1000adf0:	2c00      	cmp	r4, #0
1000adf2:	d131      	bne.n	1000ae58 <platform_event_wait+0x200>
1000adf4:	e03d      	b.n	1000ae72 <platform_event_wait+0x21a>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000adf6:	6a2c      	ldr	r4, [r5, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000adf8:	2314      	movs	r3, #20
1000adfa:	469c      	mov	ip, r3
1000adfc:	44ac      	add	ip, r5
1000adfe:	4663      	mov	r3, ip
1000ae00:	4660      	mov	r0, ip
1000ae02:	9300      	str	r3, [sp, #0]
1000ae04:	4b2b      	ldr	r3, [pc, #172]	; (1000aeb4 <platform_event_wait+0x25c>)
1000ae06:	681b      	ldr	r3, [r3, #0]
1000ae08:	4798      	blx	r3
	while(NULL != current)
1000ae0a:	2c00      	cmp	r4, #0
1000ae0c:	d01f      	beq.n	1000ae4e <platform_event_wait+0x1f6>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000ae0e:	2600      	movs	r6, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ae10:	27cd      	movs	r7, #205	; 0xcd
1000ae12:	00bf      	lsls	r7, r7, #2
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000ae14:	4b26      	ldr	r3, [pc, #152]	; (1000aeb0 <platform_event_wait+0x258>)
1000ae16:	4699      	mov	r9, r3

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ae18:	6823      	ldr	r3, [r4, #0]
1000ae1a:	889b      	ldrh	r3, [r3, #4]
1000ae1c:	42bb      	cmp	r3, r7
1000ae1e:	d112      	bne.n	1000ae46 <platform_event_wait+0x1ee>
		{
			num_of_freed++;
			if(NULL != prev)
1000ae20:	2e00      	cmp	r6, #0
1000ae22:	d007      	beq.n	1000ae34 <platform_event_wait+0x1dc>
			{
				prev->pstrNext = current->pstrNext;
1000ae24:	68a3      	ldr	r3, [r4, #8]
1000ae26:	60b3      	str	r3, [r6, #8]
				ke_free(current);
1000ae28:	1c20      	adds	r0, r4, #0
1000ae2a:	464b      	mov	r3, r9
1000ae2c:	681b      	ldr	r3, [r3, #0]
1000ae2e:	4798      	blx	r3
				current = prev->pstrNext;
1000ae30:	68b4      	ldr	r4, [r6, #8]
1000ae32:	e00a      	b.n	1000ae4a <platform_event_wait+0x1f2>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000ae34:	68a3      	ldr	r3, [r4, #8]
1000ae36:	622b      	str	r3, [r5, #32]
				ke_free(current);
1000ae38:	1c20      	adds	r0, r4, #0
1000ae3a:	4b1d      	ldr	r3, [pc, #116]	; (1000aeb0 <platform_event_wait+0x258>)
1000ae3c:	681b      	ldr	r3, [r3, #0]
1000ae3e:	9301      	str	r3, [sp, #4]
1000ae40:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000ae42:	6a2c      	ldr	r4, [r5, #32]
1000ae44:	e001      	b.n	1000ae4a <platform_event_wait+0x1f2>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000ae46:	1c26      	adds	r6, r4, #0
1000ae48:	68a4      	ldr	r4, [r4, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000ae4a:	2c00      	cmp	r4, #0
1000ae4c:	d1e4      	bne.n	1000ae18 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000ae4e:	4b1a      	ldr	r3, [pc, #104]	; (1000aeb8 <platform_event_wait+0x260>)
1000ae50:	681b      	ldr	r3, [r3, #0]
1000ae52:	9800      	ldr	r0, [sp, #0]
1000ae54:	4798      	blx	r3
1000ae56:	e00c      	b.n	1000ae72 <platform_event_wait+0x21a>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000ae58:	2314      	movs	r3, #20
1000ae5a:	9300      	str	r3, [sp, #0]
1000ae5c:	4b15      	ldr	r3, [pc, #84]	; (1000aeb4 <platform_event_wait+0x25c>)
1000ae5e:	681b      	ldr	r3, [r3, #0]
1000ae60:	2014      	movs	r0, #20
1000ae62:	4798      	blx	r3
1000ae64:	e7d3      	b.n	1000ae0e <platform_event_wait+0x1b6>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ae66:	4b0f      	ldr	r3, [pc, #60]	; (1000aea4 <platform_event_wait+0x24c>)
1000ae68:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ae6a:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ae6c:	2b00      	cmp	r3, #0
1000ae6e:	d0ab      	beq.n	1000adc8 <platform_event_wait+0x170>
1000ae70:	e778      	b.n	1000ad64 <platform_event_wait+0x10c>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000ae72:	4658      	mov	r0, fp
1000ae74:	b007      	add	sp, #28
1000ae76:	bc3c      	pop	{r2, r3, r4, r5}
1000ae78:	4690      	mov	r8, r2
1000ae7a:	4699      	mov	r9, r3
1000ae7c:	46a2      	mov	sl, r4
1000ae7e:	46ab      	mov	fp, r5
1000ae80:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae82:	46c0      	nop			; (mov r8, r8)
1000ae84:	1000abb1 	.word	0x1000abb1
1000ae88:	10011ed8 	.word	0x10011ed8
1000ae8c:	10011eec 	.word	0x10011eec
1000ae90:	10011ed0 	.word	0x10011ed0
1000ae94:	10012bc0 	.word	0x10012bc0
1000ae98:	1001292c 	.word	0x1001292c
1000ae9c:	1000f7d7 	.word	0x1000f7d7
1000aea0:	1000a819 	.word	0x1000a819
1000aea4:	10011ee0 	.word	0x10011ee0
1000aea8:	10011eb8 	.word	0x10011eb8
1000aeac:	10011eac 	.word	0x10011eac
1000aeb0:	10011ea8 	.word	0x10011ea8
1000aeb4:	10011ecc 	.word	0x10011ecc
1000aeb8:	10011eb4 	.word	0x10011eb4

1000aebc <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000aebc:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000aebe:	4b12      	ldr	r3, [pc, #72]	; (1000af08 <acquire_sleep_lock+0x4c>)
1000aec0:	681c      	ldr	r4, [r3, #0]
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000aec2:	4b12      	ldr	r3, [pc, #72]	; (1000af0c <acquire_sleep_lock+0x50>)
1000aec4:	681b      	ldr	r3, [r3, #0]
1000aec6:	2080      	movs	r0, #128	; 0x80
1000aec8:	0200      	lsls	r0, r0, #8
1000aeca:	4798      	blx	r3
	if(osc_en == 0)
1000aecc:	07e3      	lsls	r3, r4, #31
1000aece:	d414      	bmi.n	1000aefa <acquire_sleep_lock+0x3e>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000aed0:	4b0f      	ldr	r3, [pc, #60]	; (1000af10 <acquire_sleep_lock+0x54>)
1000aed2:	681b      	ldr	r3, [r3, #0]
1000aed4:	2002      	movs	r0, #2
1000aed6:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000aed8:	4b0e      	ldr	r3, [pc, #56]	; (1000af14 <acquire_sleep_lock+0x58>)
1000aeda:	681b      	ldr	r3, [r3, #0]
1000aedc:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000aede:	4c0e      	ldr	r4, [pc, #56]	; (1000af18 <acquire_sleep_lock+0x5c>)
1000aee0:	2003      	movs	r0, #3
1000aee2:	6823      	ldr	r3, [r4, #0]
1000aee4:	4798      	blx	r3
1000aee6:	2800      	cmp	r0, #0
1000aee8:	d1fa      	bne.n	1000aee0 <acquire_sleep_lock+0x24>
		pwr_disable_arm_wakeup(1<<1);
1000aeea:	4b0c      	ldr	r3, [pc, #48]	; (1000af1c <acquire_sleep_lock+0x60>)
1000aeec:	681b      	ldr	r3, [r3, #0]
1000aeee:	3002      	adds	r0, #2
1000aef0:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000aef2:	2201      	movs	r2, #1
1000aef4:	4b0a      	ldr	r3, [pc, #40]	; (1000af20 <acquire_sleep_lock+0x64>)
1000aef6:	601a      	str	r2, [r3, #0]
1000aef8:	e004      	b.n	1000af04 <acquire_sleep_lock+0x48>
#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		 os_sem_up(gstrFwSem);
1000aefa:	4b0a      	ldr	r3, [pc, #40]	; (1000af24 <acquire_sleep_lock+0x68>)
1000aefc:	6818      	ldr	r0, [r3, #0]
1000aefe:	4b0a      	ldr	r3, [pc, #40]	; (1000af28 <acquire_sleep_lock+0x6c>)
1000af00:	681b      	ldr	r3, [r3, #0]
1000af02:	4798      	blx	r3
	}
	return status;
}
1000af04:	2008      	movs	r0, #8
1000af06:	bd10      	pop	{r4, pc}
1000af08:	4000b1ec 	.word	0x4000b1ec
1000af0c:	100128e8 	.word	0x100128e8
1000af10:	10011ed4 	.word	0x10011ed4
1000af14:	10011ee4 	.word	0x10011ee4
1000af18:	10011ebc 	.word	0x10011ebc
1000af1c:	10011ec4 	.word	0x10011ec4
1000af20:	4000b020 	.word	0x4000b020
1000af24:	10011ec8 	.word	0x10011ec8
1000af28:	10011eb4 	.word	0x10011eb4

1000af2c <gpio1_combined_isr_handler>:
//extern void (*handle_ext_wakeup_isr)(void);
//handle_ext_wakeup_isrvoid gpio1_combined_isr_handler(void);

/* chris.choi : jeffy's code 150908, so it's better code i think so use this */
void gpio1_combined_isr_handler(void)
{
1000af2c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000af2e:	4a18      	ldr	r2, [pc, #96]	; (1000af90 <gpio1_combined_isr_handler+0x64>)
1000af30:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000af32:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000af34:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000af36:	2180      	movs	r1, #128	; 0x80
1000af38:	0209      	lsls	r1, r1, #8
1000af3a:	4301      	orrs	r1, r0
1000af3c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000af3e:	1c10      	adds	r0, r2, #0
1000af40:	4d14      	ldr	r5, [pc, #80]	; (1000af94 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000af42:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000af44:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000af46:	05db      	lsls	r3, r3, #23
1000af48:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000af4a:	d011      	beq.n	1000af70 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000af4c:	b2db      	uxtb	r3, r3
1000af4e:	4259      	negs	r1, r3
1000af50:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000af52:	2b01      	cmp	r3, #1
1000af54:	d006      	beq.n	1000af64 <gpio1_combined_isr_handler+0x38>
1000af56:	1c11      	adds	r1, r2, #0
				port_gpio1 = port_gpio1 >> 1;
1000af58:	085b      	lsrs	r3, r3, #1
				index++;
1000af5a:	3101      	adds	r1, #1
1000af5c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000af5e:	2b01      	cmp	r3, #1
1000af60:	d1fa      	bne.n	1000af58 <gpio1_combined_isr_handler+0x2c>
1000af62:	e000      	b.n	1000af66 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000af64:	1c11      	adds	r1, r2, #0
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000af66:	1c23      	adds	r3, r4, #0
1000af68:	408b      	lsls	r3, r1
1000af6a:	b299      	uxth	r1, r3
1000af6c:	8701      	strh	r1, [r0, #56]	; 0x38
1000af6e:	e003      	b.n	1000af78 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000af70:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000af72:	432b      	orrs	r3, r5
1000af74:	b29b      	uxth	r3, r3
1000af76:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000af78:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000af7a:	05db      	lsls	r3, r3, #23
1000af7c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000af7e:	d1e2      	bne.n	1000af46 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000af80:	2180      	movs	r1, #128	; 0x80
1000af82:	0049      	lsls	r1, r1, #1
1000af84:	3381      	adds	r3, #129	; 0x81
1000af86:	33ff      	adds	r3, #255	; 0xff
1000af88:	4a03      	ldr	r2, [pc, #12]	; (1000af98 <gpio1_combined_isr_handler+0x6c>)
1000af8a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000af8c:	bd30      	pop	{r4, r5, pc}
1000af8e:	46c0      	nop			; (mov r8, r8)
1000af90:	40011000 	.word	0x40011000
1000af94:	ffff8000 	.word	0xffff8000
1000af98:	e000e100 	.word	0xe000e100

1000af9c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000af9c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000af9e:	4a17      	ldr	r2, [pc, #92]	; (1000affc <gpio0_combined_isr_handler+0x60>)
1000afa0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000afa2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000afa4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000afa6:	2180      	movs	r1, #128	; 0x80
1000afa8:	0209      	lsls	r1, r1, #8
1000afaa:	4301      	orrs	r1, r0
1000afac:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000afae:	1c10      	adds	r0, r2, #0
1000afb0:	4d13      	ldr	r5, [pc, #76]	; (1000b000 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000afb2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000afb4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000afb6:	05db      	lsls	r3, r3, #23
1000afb8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000afba:	d011      	beq.n	1000afe0 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000afbc:	b2db      	uxtb	r3, r3
1000afbe:	4259      	negs	r1, r3
1000afc0:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000afc2:	2b01      	cmp	r3, #1
1000afc4:	d006      	beq.n	1000afd4 <gpio0_combined_isr_handler+0x38>
1000afc6:	1c11      	adds	r1, r2, #0
				port_gpio0 = port_gpio0 >> 1;
1000afc8:	085b      	lsrs	r3, r3, #1
				index++;
1000afca:	3101      	adds	r1, #1
1000afcc:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000afce:	2b01      	cmp	r3, #1
1000afd0:	d1fa      	bne.n	1000afc8 <gpio0_combined_isr_handler+0x2c>
1000afd2:	e000      	b.n	1000afd6 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000afd4:	1c11      	adds	r1, r2, #0
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000afd6:	1c23      	adds	r3, r4, #0
1000afd8:	408b      	lsls	r3, r1
1000afda:	b299      	uxth	r1, r3
1000afdc:	8701      	strh	r1, [r0, #56]	; 0x38
1000afde:	e003      	b.n	1000afe8 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000afe0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000afe2:	432b      	orrs	r3, r5
1000afe4:	b29b      	uxth	r3, r3
1000afe6:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000afe8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000afea:	05db      	lsls	r3, r3, #23
1000afec:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000afee:	d1e2      	bne.n	1000afb6 <gpio0_combined_isr_handler+0x1a>
1000aff0:	2180      	movs	r1, #128	; 0x80
1000aff2:	3381      	adds	r3, #129	; 0x81
1000aff4:	33ff      	adds	r3, #255	; 0xff
1000aff6:	4a03      	ldr	r2, [pc, #12]	; (1000b004 <gpio0_combined_isr_handler+0x68>)
1000aff8:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000affa:	bd30      	pop	{r4, r5, pc}
1000affc:	40010000 	.word	0x40010000
1000b000:	ffff8000 	.word	0xffff8000
1000b004:	e000e100 	.word	0xe000e100

1000b008 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b008:	b508      	push	{r3, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b00a:	4b0c      	ldr	r3, [pc, #48]	; (1000b03c <PORT1_COMB_Handler+0x34>)
1000b00c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b00e:	0b5b      	lsrs	r3, r3, #13
1000b010:	d010      	beq.n	1000b034 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b012:	4b0b      	ldr	r3, [pc, #44]	; (1000b040 <PORT1_COMB_Handler+0x38>)
1000b014:	681b      	ldr	r3, [r3, #0]
1000b016:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b018:	4a08      	ldr	r2, [pc, #32]	; (1000b03c <PORT1_COMB_Handler+0x34>)
1000b01a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b01c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b01e:	0b5b      	lsrs	r3, r3, #13
1000b020:	035b      	lsls	r3, r3, #13
1000b022:	430b      	orrs	r3, r1
1000b024:	8713      	strh	r3, [r2, #56]	; 0x38
1000b026:	2180      	movs	r1, #128	; 0x80
1000b028:	0049      	lsls	r1, r1, #1
1000b02a:	23c0      	movs	r3, #192	; 0xc0
1000b02c:	005b      	lsls	r3, r3, #1
1000b02e:	4a05      	ldr	r2, [pc, #20]	; (1000b044 <PORT1_COMB_Handler+0x3c>)
1000b030:	50d1      	str	r1, [r2, r3]
1000b032:	e001      	b.n	1000b038 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b034:	4b04      	ldr	r3, [pc, #16]	; (1000b048 <PORT1_COMB_Handler+0x40>)
1000b036:	4798      	blx	r3
	}
}
1000b038:	bd08      	pop	{r3, pc}
1000b03a:	46c0      	nop			; (mov r8, r8)
1000b03c:	40011000 	.word	0x40011000
1000b040:	10012bb0 	.word	0x10012bb0
1000b044:	e000e100 	.word	0xe000e100
1000b048:	1000af2d 	.word	0x1000af2d

1000b04c <ble_paired_app_event>:
	return AT_BLE_FAILURE;
}

/* Callback registered for AT_BLE_PAIR_DONE event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
1000b04c:	b508      	push	{r3, lr}
	ALL_UNUSED(param);
	DBG_LOG("PAIRED??? OK THEN");
1000b04e:	4804      	ldr	r0, [pc, #16]	; (1000b060 <ble_paired_app_event+0x14>)
1000b050:	4b04      	ldr	r3, [pc, #16]	; (1000b064 <ble_paired_app_event+0x18>)
1000b052:	4798      	blx	r3
1000b054:	4804      	ldr	r0, [pc, #16]	; (1000b068 <ble_paired_app_event+0x1c>)
1000b056:	4b05      	ldr	r3, [pc, #20]	; (1000b06c <ble_paired_app_event+0x20>)
1000b058:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000b05a:	2000      	movs	r0, #0
1000b05c:	bd08      	pop	{r3, pc}
1000b05e:	46c0      	nop			; (mov r8, r8)
1000b060:	10010cc8 	.word	0x10010cc8
1000b064:	1000f919 	.word	0x1000f919
1000b068:	1001138c 	.word	0x1001138c
1000b06c:	1000f7f9 	.word	0x1000f7f9

1000b070 <ble_char_found_app_event>:
	return status;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_FOUND event from stack */
static at_ble_status_t ble_char_found_app_event(void *param)
{
1000b070:	b510      	push	{r4, lr}
1000b072:	1c04      	adds	r4, r0, #0
	uint16_t charac_16_uuid;
	at_ble_characteristic_found_t *characteristic_found;
	characteristic_found = (at_ble_characteristic_found_t *)param;
	
	if(!ble_check_iscentral(characteristic_found->conn_handle))
1000b074:	8800      	ldrh	r0, [r0, #0]
1000b076:	4b1b      	ldr	r3, [pc, #108]	; (1000b0e4 <ble_char_found_app_event+0x74>)
1000b078:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
1000b07a:	22e2      	movs	r2, #226	; 0xe2
{
	uint16_t charac_16_uuid;
	at_ble_characteristic_found_t *characteristic_found;
	characteristic_found = (at_ble_characteristic_found_t *)param;
	
	if(!ble_check_iscentral(characteristic_found->conn_handle))
1000b07c:	2800      	cmp	r0, #0
1000b07e:	d02f      	beq.n	1000b0e0 <ble_char_found_app_event+0x70>
	{
		return AT_BLE_FAILURE;
	}

	charac_16_uuid = (uint16_t)((characteristic_found->char_uuid.uuid[0]) |	\
	(characteristic_found->char_uuid.uuid[1] << 8));
1000b080:	7a63      	ldrb	r3, [r4, #9]
1000b082:	021b      	lsls	r3, r3, #8
	if(!ble_check_iscentral(characteristic_found->conn_handle))
	{
		return AT_BLE_FAILURE;
	}

	charac_16_uuid = (uint16_t)((characteristic_found->char_uuid.uuid[0]) |	\
1000b084:	7a22      	ldrb	r2, [r4, #8]
1000b086:	4313      	orrs	r3, r2
	(characteristic_found->char_uuid.uuid[1] << 8));

	if (charac_16_uuid == VIBE1_INTENSITY_CHAR_UUID) {
1000b088:	4a17      	ldr	r2, [pc, #92]	; (1000b0e8 <ble_char_found_app_event+0x78>)
1000b08a:	4293      	cmp	r3, r2
1000b08c:	d107      	bne.n	1000b09e <ble_char_found_app_event+0x2e>
		perception_handle.char_handle1 = characteristic_found->value_handle;
1000b08e:	88a2      	ldrh	r2, [r4, #4]
1000b090:	4b16      	ldr	r3, [pc, #88]	; (1000b0ec <ble_char_found_app_event+0x7c>)
1000b092:	809a      	strh	r2, [r3, #4]
		vibe1_char_found = true;
1000b094:	2201      	movs	r2, #1
1000b096:	4b16      	ldr	r3, [pc, #88]	; (1000b0f0 <ble_char_found_app_event+0x80>)
1000b098:	701a      	strb	r2, [r3, #0]
		vibe4_char_found = true;
		DBG_LOG_PTS("Vibe 4 intensity characteristics: Attrib handle %x property %x handle: %x uuid : %x",
		characteristic_found->char_handle, characteristic_found->properties,
		perception_handle.char_handle4, charac_16_uuid);
	}
	return AT_BLE_SUCCESS;
1000b09a:	2200      	movs	r2, #0
1000b09c:	e020      	b.n	1000b0e0 <ble_char_found_app_event+0x70>
		perception_handle.char_handle1 = characteristic_found->value_handle;
		vibe1_char_found = true;
		DBG_LOG_PTS("Vibe 1 intensity characteristics: Attrib handle %x property %x handle: %x uuid : %x",
		characteristic_found->char_handle, characteristic_found->properties,
		perception_handle.char_handle1, charac_16_uuid);
	} else if (charac_16_uuid == VIBE2_INTENSITY_CHAR_UUID) {
1000b09e:	4a15      	ldr	r2, [pc, #84]	; (1000b0f4 <ble_char_found_app_event+0x84>)
1000b0a0:	4293      	cmp	r3, r2
1000b0a2:	d107      	bne.n	1000b0b4 <ble_char_found_app_event+0x44>
		perception_handle.char_handle2 = characteristic_found->value_handle;
1000b0a4:	88a2      	ldrh	r2, [r4, #4]
1000b0a6:	4b11      	ldr	r3, [pc, #68]	; (1000b0ec <ble_char_found_app_event+0x7c>)
1000b0a8:	80da      	strh	r2, [r3, #6]
		vibe2_char_found = true;
1000b0aa:	2201      	movs	r2, #1
1000b0ac:	4b12      	ldr	r3, [pc, #72]	; (1000b0f8 <ble_char_found_app_event+0x88>)
1000b0ae:	701a      	strb	r2, [r3, #0]
		vibe4_char_found = true;
		DBG_LOG_PTS("Vibe 4 intensity characteristics: Attrib handle %x property %x handle: %x uuid : %x",
		characteristic_found->char_handle, characteristic_found->properties,
		perception_handle.char_handle4, charac_16_uuid);
	}
	return AT_BLE_SUCCESS;
1000b0b0:	2200      	movs	r2, #0
1000b0b2:	e015      	b.n	1000b0e0 <ble_char_found_app_event+0x70>
		perception_handle.char_handle2 = characteristic_found->value_handle;
		vibe2_char_found = true;
		DBG_LOG_PTS("Vibe 2 intensity characteristics: Attrib handle %x property %x handle: %x uuid : %x",
		characteristic_found->char_handle, characteristic_found->properties,
		perception_handle.char_handle2, charac_16_uuid);
	} else if (charac_16_uuid == VIBE3_INTENSITY_CHAR_UUID) {
1000b0b4:	4a11      	ldr	r2, [pc, #68]	; (1000b0fc <ble_char_found_app_event+0x8c>)
1000b0b6:	4293      	cmp	r3, r2
1000b0b8:	d107      	bne.n	1000b0ca <ble_char_found_app_event+0x5a>
		perception_handle.char_handle3 = characteristic_found->value_handle;
1000b0ba:	88a2      	ldrh	r2, [r4, #4]
1000b0bc:	4b0b      	ldr	r3, [pc, #44]	; (1000b0ec <ble_char_found_app_event+0x7c>)
1000b0be:	811a      	strh	r2, [r3, #8]
		vibe3_char_found = true;
1000b0c0:	2201      	movs	r2, #1
1000b0c2:	4b0f      	ldr	r3, [pc, #60]	; (1000b100 <ble_char_found_app_event+0x90>)
1000b0c4:	701a      	strb	r2, [r3, #0]
		vibe4_char_found = true;
		DBG_LOG_PTS("Vibe 4 intensity characteristics: Attrib handle %x property %x handle: %x uuid : %x",
		characteristic_found->char_handle, characteristic_found->properties,
		perception_handle.char_handle4, charac_16_uuid);
	}
	return AT_BLE_SUCCESS;
1000b0c6:	2200      	movs	r2, #0
1000b0c8:	e00a      	b.n	1000b0e0 <ble_char_found_app_event+0x70>
1000b0ca:	2200      	movs	r2, #0
		perception_handle.char_handle3 = characteristic_found->value_handle;
		vibe3_char_found = true;
		DBG_LOG_PTS("Vibe 3 intensity characteristics: Attrib handle %x property %x handle: %x uuid : %x",
		characteristic_found->char_handle, characteristic_found->properties,
		perception_handle.char_handle3, charac_16_uuid);
	} else if (charac_16_uuid == VIBE4_INTENSITY_CHAR_UUID) {
1000b0cc:	490d      	ldr	r1, [pc, #52]	; (1000b104 <ble_char_found_app_event+0x94>)
1000b0ce:	428b      	cmp	r3, r1
1000b0d0:	d106      	bne.n	1000b0e0 <ble_char_found_app_event+0x70>
		perception_handle.char_handle4 = characteristic_found->value_handle;
1000b0d2:	88a2      	ldrh	r2, [r4, #4]
1000b0d4:	4b05      	ldr	r3, [pc, #20]	; (1000b0ec <ble_char_found_app_event+0x7c>)
1000b0d6:	815a      	strh	r2, [r3, #10]
		vibe4_char_found = true;
1000b0d8:	2201      	movs	r2, #1
1000b0da:	4b0b      	ldr	r3, [pc, #44]	; (1000b108 <ble_char_found_app_event+0x98>)
1000b0dc:	701a      	strb	r2, [r3, #0]
		DBG_LOG_PTS("Vibe 4 intensity characteristics: Attrib handle %x property %x handle: %x uuid : %x",
		characteristic_found->char_handle, characteristic_found->properties,
		perception_handle.char_handle4, charac_16_uuid);
	}
	return AT_BLE_SUCCESS;
1000b0de:	2200      	movs	r2, #0
}
1000b0e0:	1c10      	adds	r0, r2, #0
1000b0e2:	bd10      	pop	{r4, pc}
1000b0e4:	1000a389 	.word	0x1000a389
1000b0e8:	00004201 	.word	0x00004201
1000b0ec:	1001187c 	.word	0x1001187c
1000b0f0:	10011ef1 	.word	0x10011ef1
1000b0f4:	0000706e 	.word	0x0000706e
1000b0f8:	10011ef4 	.word	0x10011ef4
1000b0fc:	00003aa4 	.word	0x00003aa4
1000b100:	10011ef3 	.word	0x10011ef3
1000b104:	0000e7ca 	.word	0x0000e7ca
1000b108:	10011ef5 	.word	0x10011ef5

1000b10c <ble_service_found_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND event from stack */
static at_ble_status_t ble_service_found_app_event(void *param)
{
1000b10c:	b538      	push	{r3, r4, r5, lr}
1000b10e:	1c04      	adds	r4, r0, #0
	at_ble_uuid_t *perception_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_primary_service_found_t *primary_service_params;
	primary_service_params = (at_ble_primary_service_found_t *)param;
	
	if(!ble_check_iscentral(primary_service_params->conn_handle))
1000b110:	8800      	ldrh	r0, [r0, #0]
1000b112:	4b12      	ldr	r3, [pc, #72]	; (1000b15c <ble_service_found_app_event+0x50>)
1000b114:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
1000b116:	23e2      	movs	r3, #226	; 0xe2
	at_ble_uuid_t *perception_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_primary_service_found_t *primary_service_params;
	primary_service_params = (at_ble_primary_service_found_t *)param;
	
	if(!ble_check_iscentral(primary_service_params->conn_handle))
1000b118:	2800      	cmp	r0, #0
1000b11a:	d01d      	beq.n	1000b158 <ble_service_found_app_event+0x4c>
	{
		return AT_BLE_FAILURE;
	}
	
	perception_state_flag = PERCEPTION_DEV_SERVICE_FOUND;
1000b11c:	2204      	movs	r2, #4
1000b11e:	4b10      	ldr	r3, [pc, #64]	; (1000b160 <ble_service_found_app_event+0x54>)
1000b120:	701a      	strb	r2, [r3, #0]
	
	perception_service_uuid = &primary_service_params->service_uuid;
	if (perception_service_uuid->type == AT_BLE_UUID_16) {
1000b122:	79a2      	ldrb	r2, [r4, #6]

/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND event from stack */
static at_ble_status_t ble_service_found_app_event(void *param)
{
	at_ble_uuid_t *perception_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
1000b124:	2300      	movs	r3, #0
	}
	
	perception_state_flag = PERCEPTION_DEV_SERVICE_FOUND;
	
	perception_service_uuid = &primary_service_params->service_uuid;
	if (perception_service_uuid->type == AT_BLE_UUID_16) {
1000b126:	2a00      	cmp	r2, #0
1000b128:	d116      	bne.n	1000b158 <ble_service_found_app_event+0x4c>
		uint16_t service_uuid;
		service_uuid= ((perception_service_uuid->uuid[1] << 8)
1000b12a:	7a23      	ldrb	r3, [r4, #8]
1000b12c:	021b      	lsls	r3, r3, #8
1000b12e:	79e2      	ldrb	r2, [r4, #7]
					  | perception_service_uuid->uuid[0]);
		switch (service_uuid) {
1000b130:	4313      	orrs	r3, r2
1000b132:	4a0c      	ldr	r2, [pc, #48]	; (1000b164 <ble_service_found_app_event+0x58>)
1000b134:	4293      	cmp	r3, r2
1000b136:	d10e      	bne.n	1000b156 <ble_service_found_app_event+0x4a>
			// Perception Vibe Motor Service UUID
			case PERCEPTION_SERVICE_UUID:
			{
				perception_handle.start_handle = primary_service_params->start_handle;
1000b138:	4d0b      	ldr	r5, [pc, #44]	; (1000b168 <ble_service_found_app_event+0x5c>)
1000b13a:	8863      	ldrh	r3, [r4, #2]
1000b13c:	802b      	strh	r3, [r5, #0]
				perception_handle.end_handle = primary_service_params->end_handle;
1000b13e:	88a3      	ldrh	r3, [r4, #4]
1000b140:	806b      	strh	r3, [r5, #2]
				DBG_LOG("Perception service discovered");
1000b142:	480a      	ldr	r0, [pc, #40]	; (1000b16c <ble_service_found_app_event+0x60>)
1000b144:	4b0a      	ldr	r3, [pc, #40]	; (1000b170 <ble_service_found_app_event+0x64>)
1000b146:	4798      	blx	r3
1000b148:	480a      	ldr	r0, [pc, #40]	; (1000b174 <ble_service_found_app_event+0x68>)
1000b14a:	4b0b      	ldr	r3, [pc, #44]	; (1000b178 <ble_service_found_app_event+0x6c>)
1000b14c:	4798      	blx	r3
				DBG_LOG_PTS("start_handle: %04X end_handle: %04X",
				primary_service_params->start_handle,
				primary_service_params->end_handle);
				perception_handle.char_discovery=(at_ble_status_t)DISCOVER_SUCCESS;
1000b14e:	230a      	movs	r3, #10
1000b150:	732b      	strb	r3, [r5, #12]

/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND event from stack */
static at_ble_status_t ble_service_found_app_event(void *param)
{
	at_ble_uuid_t *perception_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
1000b152:	2300      	movs	r3, #0
				DBG_LOG_PTS("start_handle: %04X end_handle: %04X",
				primary_service_params->start_handle,
				primary_service_params->end_handle);
				perception_handle.char_discovery=(at_ble_status_t)DISCOVER_SUCCESS;
			}
			break;
1000b154:	e000      	b.n	1000b158 <ble_service_found_app_event+0x4c>

			default:
				status = AT_BLE_INVALID_PARAM;
1000b156:	23cf      	movs	r3, #207	; 0xcf
				break;
		}
	}
	return status;
}
1000b158:	1c18      	adds	r0, r3, #0
1000b15a:	bd38      	pop	{r3, r4, r5, pc}
1000b15c:	1000a389 	.word	0x1000a389
1000b160:	10011ef0 	.word	0x10011ef0
1000b164:	00006314 	.word	0x00006314
1000b168:	1001187c 	.word	0x1001187c
1000b16c:	10010cc8 	.word	0x10010cc8
1000b170:	1000f919 	.word	0x1000f919
1000b174:	100113a0 	.word	0x100113a0
1000b178:	1000f7f9 	.word	0x1000f7f9

1000b17c <ble_char_read_resp_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_RESPONSE event from stack */
static at_ble_status_t ble_char_read_resp_app_event(void *param)
{
1000b17c:	b570      	push	{r4, r5, r6, lr}
1000b17e:	1c04      	adds	r4, r0, #0
	at_ble_characteristic_read_response_t *char_read_resp;
	char_read_resp = (at_ble_characteristic_read_response_t *)param;
	
	if(!ble_check_iscentral(char_read_resp->conn_handle))
1000b180:	8800      	ldrh	r0, [r0, #0]
1000b182:	4b52      	ldr	r3, [pc, #328]	; (1000b2cc <ble_char_read_resp_app_event+0x150>)
1000b184:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
1000b186:	25e2      	movs	r5, #226	; 0xe2
static at_ble_status_t ble_char_read_resp_app_event(void *param)
{
	at_ble_characteristic_read_response_t *char_read_resp;
	char_read_resp = (at_ble_characteristic_read_response_t *)param;
	
	if(!ble_check_iscentral(char_read_resp->conn_handle))
1000b188:	2800      	cmp	r0, #0
1000b18a:	d100      	bne.n	1000b18e <ble_char_read_resp_app_event+0x12>
1000b18c:	e09c      	b.n	1000b2c8 <ble_char_read_resp_app_event+0x14c>
	}

	DBG_LOG_DEV("Read Resp handle %x",
		char_read_resp->char_handle);
	
	if (char_read_resp->char_handle == perception_handle.char_handle1) {
1000b18e:	8863      	ldrh	r3, [r4, #2]
1000b190:	4a4f      	ldr	r2, [pc, #316]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b192:	8892      	ldrh	r2, [r2, #4]
1000b194:	429a      	cmp	r2, r3
1000b196:	d11d      	bne.n	1000b1d4 <ble_char_read_resp_app_event+0x58>
		DBG_LOG(" ");
1000b198:	484e      	ldr	r0, [pc, #312]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b19a:	4b4f      	ldr	r3, [pc, #316]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b19c:	4798      	blx	r3
1000b19e:	2020      	movs	r0, #32
1000b1a0:	4b4e      	ldr	r3, [pc, #312]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b1a2:	4798      	blx	r3
		memcpy(&perception_handle.char_data1[0],
1000b1a4:	4b4a      	ldr	r3, [pc, #296]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b1a6:	6918      	ldr	r0, [r3, #16]
1000b1a8:	1c21      	adds	r1, r4, #0
1000b1aa:	3108      	adds	r1, #8
1000b1ac:	2206      	movs	r2, #6
1000b1ae:	4b4c      	ldr	r3, [pc, #304]	; (1000b2e0 <ble_char_read_resp_app_event+0x164>)
1000b1b0:	4798      	blx	r3
			   &char_read_resp->char_value[PERCEPTION_READ_OFFSET],
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
1000b1b2:	2400      	movs	r4, #0
			DBG_LOG_CONT("%c", perception_handle.char_data1[i]);
1000b1b4:	4e46      	ldr	r6, [pc, #280]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b1b6:	4d49      	ldr	r5, [pc, #292]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b1b8:	6933      	ldr	r3, [r6, #16]
1000b1ba:	5d18      	ldrb	r0, [r3, r4]
1000b1bc:	47a8      	blx	r5
	if (char_read_resp->char_handle == perception_handle.char_handle1) {
		DBG_LOG(" ");
		memcpy(&perception_handle.char_data1[0],
			   &char_read_resp->char_value[PERCEPTION_READ_OFFSET],
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
1000b1be:	3401      	adds	r4, #1
1000b1c0:	2c06      	cmp	r4, #6
1000b1c2:	d1f9      	bne.n	1000b1b8 <ble_char_read_resp_app_event+0x3c>
			DBG_LOG_CONT("%c", perception_handle.char_data1[i]);
		}
		DBG_LOG(" ");
1000b1c4:	4843      	ldr	r0, [pc, #268]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b1c6:	4b44      	ldr	r3, [pc, #272]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b1c8:	4798      	blx	r3
1000b1ca:	2020      	movs	r0, #32
1000b1cc:	4b43      	ldr	r3, [pc, #268]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b1ce:	4798      	blx	r3
		perception_state_flag = PERCEPTION_DEV_UNCONNECTED;
		if (AT_BLE_SUCCESS == at_ble_disconnect(char_read_resp->conn_handle, AT_BLE_TERMINATED_BY_USER)) {
			DBG_LOG("CONNECTION LOST");
		}
	}
	return AT_BLE_SUCCESS;
1000b1d0:	2500      	movs	r5, #0
1000b1d2:	e079      	b.n	1000b2c8 <ble_char_read_resp_app_event+0x14c>
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
			DBG_LOG_CONT("%c", perception_handle.char_data1[i]);
		}
		DBG_LOG(" ");
	} else if (char_read_resp->char_handle == perception_handle.char_handle2) {
1000b1d4:	4a3e      	ldr	r2, [pc, #248]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b1d6:	88d2      	ldrh	r2, [r2, #6]
1000b1d8:	429a      	cmp	r2, r3
1000b1da:	d11d      	bne.n	1000b218 <ble_char_read_resp_app_event+0x9c>
		DBG_LOG(" ");
1000b1dc:	483d      	ldr	r0, [pc, #244]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b1de:	4b3e      	ldr	r3, [pc, #248]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b1e0:	4798      	blx	r3
1000b1e2:	2020      	movs	r0, #32
1000b1e4:	4b3d      	ldr	r3, [pc, #244]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b1e6:	4798      	blx	r3
		memcpy(perception_handle.char_data2,
1000b1e8:	4b39      	ldr	r3, [pc, #228]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b1ea:	6958      	ldr	r0, [r3, #20]
1000b1ec:	1c21      	adds	r1, r4, #0
1000b1ee:	3108      	adds	r1, #8
1000b1f0:	2206      	movs	r2, #6
1000b1f2:	4b3b      	ldr	r3, [pc, #236]	; (1000b2e0 <ble_char_read_resp_app_event+0x164>)
1000b1f4:	4798      	blx	r3
			   &char_read_resp->char_value[PERCEPTION_READ_OFFSET],
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
1000b1f6:	2400      	movs	r4, #0
			DBG_LOG_CONT("%c", perception_handle.char_data2[i]);
1000b1f8:	4e35      	ldr	r6, [pc, #212]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b1fa:	4d38      	ldr	r5, [pc, #224]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b1fc:	6973      	ldr	r3, [r6, #20]
1000b1fe:	5d18      	ldrb	r0, [r3, r4]
1000b200:	47a8      	blx	r5
	} else if (char_read_resp->char_handle == perception_handle.char_handle2) {
		DBG_LOG(" ");
		memcpy(perception_handle.char_data2,
			   &char_read_resp->char_value[PERCEPTION_READ_OFFSET],
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
1000b202:	3401      	adds	r4, #1
1000b204:	2c06      	cmp	r4, #6
1000b206:	d1f9      	bne.n	1000b1fc <ble_char_read_resp_app_event+0x80>
			DBG_LOG_CONT("%c", perception_handle.char_data2[i]);
		}
		DBG_LOG(" ");
1000b208:	4832      	ldr	r0, [pc, #200]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b20a:	4b33      	ldr	r3, [pc, #204]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b20c:	4798      	blx	r3
1000b20e:	2020      	movs	r0, #32
1000b210:	4b32      	ldr	r3, [pc, #200]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b212:	4798      	blx	r3
		perception_state_flag = PERCEPTION_DEV_UNCONNECTED;
		if (AT_BLE_SUCCESS == at_ble_disconnect(char_read_resp->conn_handle, AT_BLE_TERMINATED_BY_USER)) {
			DBG_LOG("CONNECTION LOST");
		}
	}
	return AT_BLE_SUCCESS;
1000b214:	2500      	movs	r5, #0
1000b216:	e057      	b.n	1000b2c8 <ble_char_read_resp_app_event+0x14c>
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
			DBG_LOG_CONT("%c", perception_handle.char_data2[i]);
		}
		DBG_LOG(" ");
	} else if (char_read_resp->char_handle == perception_handle.char_handle3) {
1000b218:	4a2d      	ldr	r2, [pc, #180]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b21a:	8912      	ldrh	r2, [r2, #8]
1000b21c:	429a      	cmp	r2, r3
1000b21e:	d11d      	bne.n	1000b25c <ble_char_read_resp_app_event+0xe0>
		DBG_LOG(" ");
1000b220:	482c      	ldr	r0, [pc, #176]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b222:	4b2d      	ldr	r3, [pc, #180]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b224:	4798      	blx	r3
1000b226:	2020      	movs	r0, #32
1000b228:	4b2c      	ldr	r3, [pc, #176]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b22a:	4798      	blx	r3
		memcpy(perception_handle.char_data3,
1000b22c:	4b28      	ldr	r3, [pc, #160]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b22e:	6998      	ldr	r0, [r3, #24]
1000b230:	1c21      	adds	r1, r4, #0
1000b232:	3108      	adds	r1, #8
1000b234:	2206      	movs	r2, #6
1000b236:	4b2a      	ldr	r3, [pc, #168]	; (1000b2e0 <ble_char_read_resp_app_event+0x164>)
1000b238:	4798      	blx	r3
			   &char_read_resp->char_value[PERCEPTION_READ_OFFSET],
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
1000b23a:	2400      	movs	r4, #0
			DBG_LOG_CONT("%c", perception_handle.char_data3[i]);
1000b23c:	4e24      	ldr	r6, [pc, #144]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b23e:	4d27      	ldr	r5, [pc, #156]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b240:	69b3      	ldr	r3, [r6, #24]
1000b242:	5d18      	ldrb	r0, [r3, r4]
1000b244:	47a8      	blx	r5
	} else if (char_read_resp->char_handle == perception_handle.char_handle3) {
		DBG_LOG(" ");
		memcpy(perception_handle.char_data3,
			   &char_read_resp->char_value[PERCEPTION_READ_OFFSET],
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
1000b246:	3401      	adds	r4, #1
1000b248:	2c06      	cmp	r4, #6
1000b24a:	d1f9      	bne.n	1000b240 <ble_char_read_resp_app_event+0xc4>
			DBG_LOG_CONT("%c", perception_handle.char_data3[i]);
		}
		DBG_LOG(" ");
1000b24c:	4821      	ldr	r0, [pc, #132]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b24e:	4b22      	ldr	r3, [pc, #136]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b250:	4798      	blx	r3
1000b252:	2020      	movs	r0, #32
1000b254:	4b21      	ldr	r3, [pc, #132]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b256:	4798      	blx	r3
		perception_state_flag = PERCEPTION_DEV_UNCONNECTED;
		if (AT_BLE_SUCCESS == at_ble_disconnect(char_read_resp->conn_handle, AT_BLE_TERMINATED_BY_USER)) {
			DBG_LOG("CONNECTION LOST");
		}
	}
	return AT_BLE_SUCCESS;
1000b258:	2500      	movs	r5, #0
1000b25a:	e035      	b.n	1000b2c8 <ble_char_read_resp_app_event+0x14c>
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
			DBG_LOG_CONT("%c", perception_handle.char_data3[i]);
		}
		DBG_LOG(" ");
	} else if (char_read_resp->char_handle == perception_handle.char_handle4) {
1000b25c:	4a1c      	ldr	r2, [pc, #112]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b25e:	8952      	ldrh	r2, [r2, #10]
1000b260:	429a      	cmp	r2, r3
1000b262:	d11c      	bne.n	1000b29e <ble_char_read_resp_app_event+0x122>
		DBG_LOG(" ");
1000b264:	481b      	ldr	r0, [pc, #108]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b266:	4b1c      	ldr	r3, [pc, #112]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b268:	4798      	blx	r3
1000b26a:	2020      	movs	r0, #32
1000b26c:	4b1b      	ldr	r3, [pc, #108]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b26e:	4798      	blx	r3
		memcpy(perception_handle.char_data4,
1000b270:	4b17      	ldr	r3, [pc, #92]	; (1000b2d0 <ble_char_read_resp_app_event+0x154>)
1000b272:	69d8      	ldr	r0, [r3, #28]
1000b274:	1c25      	adds	r5, r4, #0
1000b276:	3508      	adds	r5, #8
1000b278:	1c29      	adds	r1, r5, #0
1000b27a:	2206      	movs	r2, #6
1000b27c:	4b18      	ldr	r3, [pc, #96]	; (1000b2e0 <ble_char_read_resp_app_event+0x164>)
1000b27e:	4798      	blx	r3
1000b280:	340e      	adds	r4, #14
			   &char_read_resp->char_value[PERCEPTION_READ_OFFSET],
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
			DBG_LOG_CONT("%c", char_read_resp->char_value[i]/*perception_handle.char_data4[i]*/);
1000b282:	4e16      	ldr	r6, [pc, #88]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b284:	7828      	ldrb	r0, [r5, #0]
1000b286:	47b0      	blx	r6
1000b288:	3501      	adds	r5, #1
	} else if (char_read_resp->char_handle == perception_handle.char_handle4) {
		DBG_LOG(" ");
		memcpy(perception_handle.char_data4,
			   &char_read_resp->char_value[PERCEPTION_READ_OFFSET],
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
1000b28a:	42a5      	cmp	r5, r4
1000b28c:	d1fa      	bne.n	1000b284 <ble_char_read_resp_app_event+0x108>
			DBG_LOG_CONT("%c", char_read_resp->char_value[i]/*perception_handle.char_data4[i]*/);
		}
		DBG_LOG(" ");
1000b28e:	4811      	ldr	r0, [pc, #68]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b290:	4b11      	ldr	r3, [pc, #68]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b292:	4798      	blx	r3
1000b294:	2020      	movs	r0, #32
1000b296:	4b11      	ldr	r3, [pc, #68]	; (1000b2dc <ble_char_read_resp_app_event+0x160>)
1000b298:	4798      	blx	r3
		perception_state_flag = PERCEPTION_DEV_UNCONNECTED;
		if (AT_BLE_SUCCESS == at_ble_disconnect(char_read_resp->conn_handle, AT_BLE_TERMINATED_BY_USER)) {
			DBG_LOG("CONNECTION LOST");
		}
	}
	return AT_BLE_SUCCESS;
1000b29a:	2500      	movs	r5, #0
1000b29c:	e014      	b.n	1000b2c8 <ble_char_read_resp_app_event+0x14c>
1000b29e:	2500      	movs	r5, #0
			   PERCEPTION_READ_LENGTH);
		for (int i = 0; i < PERCEPTION_READ_LENGTH; i++) {
			DBG_LOG_CONT("%c", char_read_resp->char_value[i]/*perception_handle.char_data4[i]*/);
		}
		DBG_LOG(" ");
	} else if (char_read_resp->char_handle == 0xf208) {
1000b2a0:	4a10      	ldr	r2, [pc, #64]	; (1000b2e4 <ble_char_read_resp_app_event+0x168>)
1000b2a2:	4293      	cmp	r3, r2
1000b2a4:	d110      	bne.n	1000b2c8 <ble_char_read_resp_app_event+0x14c>
		perception_state_flag = PERCEPTION_DEV_UNCONNECTED;
1000b2a6:	2200      	movs	r2, #0
1000b2a8:	4b0f      	ldr	r3, [pc, #60]	; (1000b2e8 <ble_char_read_resp_app_event+0x16c>)
1000b2aa:	701a      	strb	r2, [r3, #0]
		if (AT_BLE_SUCCESS == at_ble_disconnect(char_read_resp->conn_handle, AT_BLE_TERMINATED_BY_USER)) {
1000b2ac:	8820      	ldrh	r0, [r4, #0]
1000b2ae:	2113      	movs	r1, #19
1000b2b0:	4b0e      	ldr	r3, [pc, #56]	; (1000b2ec <ble_char_read_resp_app_event+0x170>)
1000b2b2:	4798      	blx	r3
1000b2b4:	1e05      	subs	r5, r0, #0
1000b2b6:	d106      	bne.n	1000b2c6 <ble_char_read_resp_app_event+0x14a>
			DBG_LOG("CONNECTION LOST");
1000b2b8:	4806      	ldr	r0, [pc, #24]	; (1000b2d4 <ble_char_read_resp_app_event+0x158>)
1000b2ba:	4b07      	ldr	r3, [pc, #28]	; (1000b2d8 <ble_char_read_resp_app_event+0x15c>)
1000b2bc:	4798      	blx	r3
1000b2be:	480c      	ldr	r0, [pc, #48]	; (1000b2f0 <ble_char_read_resp_app_event+0x174>)
1000b2c0:	4b0c      	ldr	r3, [pc, #48]	; (1000b2f4 <ble_char_read_resp_app_event+0x178>)
1000b2c2:	4798      	blx	r3
1000b2c4:	e000      	b.n	1000b2c8 <ble_char_read_resp_app_event+0x14c>
		}
	}
	return AT_BLE_SUCCESS;
1000b2c6:	2500      	movs	r5, #0
}
1000b2c8:	1c28      	adds	r0, r5, #0
1000b2ca:	bd70      	pop	{r4, r5, r6, pc}
1000b2cc:	1000a389 	.word	0x1000a389
1000b2d0:	1001187c 	.word	0x1001187c
1000b2d4:	10010cc8 	.word	0x10010cc8
1000b2d8:	1000f919 	.word	0x1000f919
1000b2dc:	1000f82d 	.word	0x1000f82d
1000b2e0:	1000f7d7 	.word	0x1000f7d7
1000b2e4:	0000f208 	.word	0x0000f208
1000b2e8:	10011ef0 	.word	0x10011ef0
1000b2ec:	1000c5bd 	.word	0x1000c5bd
1000b2f0:	100113c0 	.word	0x100113c0
1000b2f4:	1000f7f9 	.word	0x1000f7f9

1000b2f8 <ble_discovery_complete_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCOVERY_COMPLETE event from stack */
static at_ble_status_t ble_discovery_complete_app_event(void *param)
{
1000b2f8:	b510      	push	{r4, lr}
1000b2fa:	1c04      	adds	r4, r0, #0
	bool discover_char_flag = true;
	at_ble_discovery_complete_t *discover_status;
	discover_status = (at_ble_discovery_complete_t *)param;
	
	if(!ble_check_iscentral(discover_status->conn_handle))
1000b2fc:	8800      	ldrh	r0, [r0, #0]
1000b2fe:	4b2e      	ldr	r3, [pc, #184]	; (1000b3b8 <ble_discovery_complete_app_event+0xc0>)
1000b300:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
1000b302:	23e2      	movs	r3, #226	; 0xe2
{
	bool discover_char_flag = true;
	at_ble_discovery_complete_t *discover_status;
	discover_status = (at_ble_discovery_complete_t *)param;
	
	if(!ble_check_iscentral(discover_status->conn_handle))
1000b304:	2800      	cmp	r0, #0
1000b306:	d054      	beq.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
	{
		return AT_BLE_FAILURE;
	}
	
	DBG_LOG_DEV("discover complete operation %d and %d",discover_status->operation,discover_status->status);
	if ((discover_status->status == DISCOVER_SUCCESS) || (discover_status->status == AT_BLE_SUCCESS)) {
1000b308:	78e2      	ldrb	r2, [r4, #3]
1000b30a:	2a0a      	cmp	r2, #10
1000b30c:	d002      	beq.n	1000b314 <ble_discovery_complete_app_event+0x1c>
				perception_state_flag = PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND;
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b30e:	2300      	movs	r3, #0
	{
		return AT_BLE_FAILURE;
	}
	
	DBG_LOG_DEV("discover complete operation %d and %d",discover_status->operation,discover_status->status);
	if ((discover_status->status == DISCOVER_SUCCESS) || (discover_status->status == AT_BLE_SUCCESS)) {
1000b310:	2a00      	cmp	r2, #0
1000b312:	d14e      	bne.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
		at_ble_status_t status;
		if ((perception_handle.char_discovery == DISCOVER_SUCCESS) && (discover_char_flag)) {
1000b314:	4b29      	ldr	r3, [pc, #164]	; (1000b3bc <ble_discovery_complete_app_event+0xc4>)
1000b316:	7b1b      	ldrb	r3, [r3, #12]
1000b318:	2b0a      	cmp	r3, #10
1000b31a:	d113      	bne.n	1000b344 <ble_discovery_complete_app_event+0x4c>
			if ((status = at_ble_characteristic_discover_all(
1000b31c:	8820      	ldrh	r0, [r4, #0]
1000b31e:	4b27      	ldr	r3, [pc, #156]	; (1000b3bc <ble_discovery_complete_app_event+0xc4>)
1000b320:	8819      	ldrh	r1, [r3, #0]
1000b322:	885a      	ldrh	r2, [r3, #2]
1000b324:	4b26      	ldr	r3, [pc, #152]	; (1000b3c0 <ble_discovery_complete_app_event+0xc8>)
1000b326:	4798      	blx	r3
1000b328:	1e04      	subs	r4, r0, #0
1000b32a:	d006      	beq.n	1000b33a <ble_discovery_complete_app_event+0x42>
				perception_handle.start_handle,
				perception_handle.end_handle)) ==
			AT_BLE_SUCCESS) {
				DBG_LOG_DEV("Perception Characteristic Discovery Started");
			} else {
				DBG_LOG("Perception Characteristic Discovery Failed: %02x", status);
1000b32c:	4825      	ldr	r0, [pc, #148]	; (1000b3c4 <ble_discovery_complete_app_event+0xcc>)
1000b32e:	4b26      	ldr	r3, [pc, #152]	; (1000b3c8 <ble_discovery_complete_app_event+0xd0>)
1000b330:	4798      	blx	r3
1000b332:	4826      	ldr	r0, [pc, #152]	; (1000b3cc <ble_discovery_complete_app_event+0xd4>)
1000b334:	1c21      	adds	r1, r4, #0
1000b336:	4b26      	ldr	r3, [pc, #152]	; (1000b3d0 <ble_discovery_complete_app_event+0xd8>)
1000b338:	4798      	blx	r3
			}
			perception_handle.char_discovery = AT_BLE_FAILURE;
1000b33a:	22e2      	movs	r2, #226	; 0xe2
1000b33c:	4b1f      	ldr	r3, [pc, #124]	; (1000b3bc <ble_discovery_complete_app_event+0xc4>)
1000b33e:	731a      	strb	r2, [r3, #12]
				perception_state_flag = PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND;
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b340:	2300      	movs	r3, #0
1000b342:	e036      	b.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
			} else {
				DBG_LOG("Perception Characteristic Discovery Failed: %02x", status);
			}
			perception_handle.char_discovery = AT_BLE_FAILURE;
			discover_char_flag = false;
		} else if (perception_handle.char_discovery == AT_BLE_INVALID_PARAM) {
1000b344:	2bcf      	cmp	r3, #207	; 0xcf
1000b346:	d131      	bne.n	1000b3ac <ble_discovery_complete_app_event+0xb4>
			DBG_LOG("Perception Service Not Found");
1000b348:	481e      	ldr	r0, [pc, #120]	; (1000b3c4 <ble_discovery_complete_app_event+0xcc>)
1000b34a:	4b1f      	ldr	r3, [pc, #124]	; (1000b3c8 <ble_discovery_complete_app_event+0xd0>)
1000b34c:	4798      	blx	r3
1000b34e:	4821      	ldr	r0, [pc, #132]	; (1000b3d4 <ble_discovery_complete_app_event+0xdc>)
1000b350:	4b1f      	ldr	r3, [pc, #124]	; (1000b3d0 <ble_discovery_complete_app_event+0xd8>)
1000b352:	4798      	blx	r3
			perception_handle.char_discovery = AT_BLE_INVALID_STATE;
1000b354:	22e0      	movs	r2, #224	; 0xe0
1000b356:	4b19      	ldr	r3, [pc, #100]	; (1000b3bc <ble_discovery_complete_app_event+0xc4>)
1000b358:	731a      	strb	r2, [r3, #12]
			discover_char_flag = false;
		}
		
		if (perception_handle.char_discovery == AT_BLE_INVALID_STATE) {
			DBG_LOG("PERCEPTION PROFILE NOT SUPPORTED");
1000b35a:	481a      	ldr	r0, [pc, #104]	; (1000b3c4 <ble_discovery_complete_app_event+0xcc>)
1000b35c:	4b1a      	ldr	r3, [pc, #104]	; (1000b3c8 <ble_discovery_complete_app_event+0xd0>)
1000b35e:	4798      	blx	r3
1000b360:	481d      	ldr	r0, [pc, #116]	; (1000b3d8 <ble_discovery_complete_app_event+0xe0>)
1000b362:	4b1b      	ldr	r3, [pc, #108]	; (1000b3d0 <ble_discovery_complete_app_event+0xd8>)
1000b364:	4798      	blx	r3
			discover_char_flag = false;
			at_ble_disconnect(discover_status->conn_handle, AT_BLE_TERMINATED_BY_USER);
1000b366:	8820      	ldrh	r0, [r4, #0]
1000b368:	2113      	movs	r1, #19
1000b36a:	4b1c      	ldr	r3, [pc, #112]	; (1000b3dc <ble_discovery_complete_app_event+0xe4>)
1000b36c:	4798      	blx	r3
				perception_state_flag = PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND;
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b36e:	2300      	movs	r3, #0
1000b370:	e01f      	b.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
		}
		
		
		if (discover_char_flag) {
			DBG_LOG_DEV("GATT characteristic discovery completed");
			if (vibe1_char_found && vibe2_char_found && vibe3_char_found && vibe4_char_found) {
1000b372:	4b1b      	ldr	r3, [pc, #108]	; (1000b3e0 <ble_discovery_complete_app_event+0xe8>)
1000b374:	781a      	ldrb	r2, [r3, #0]
				perception_state_flag = PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND;
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b376:	2300      	movs	r3, #0
		}
		
		
		if (discover_char_flag) {
			DBG_LOG_DEV("GATT characteristic discovery completed");
			if (vibe1_char_found && vibe2_char_found && vibe3_char_found && vibe4_char_found) {
1000b378:	2a00      	cmp	r2, #0
1000b37a:	d01a      	beq.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
1000b37c:	4b19      	ldr	r3, [pc, #100]	; (1000b3e4 <ble_discovery_complete_app_event+0xec>)
1000b37e:	781a      	ldrb	r2, [r3, #0]
				perception_state_flag = PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND;
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b380:	2300      	movs	r3, #0
		}
		
		
		if (discover_char_flag) {
			DBG_LOG_DEV("GATT characteristic discovery completed");
			if (vibe1_char_found && vibe2_char_found && vibe3_char_found && vibe4_char_found) {
1000b382:	2a00      	cmp	r2, #0
1000b384:	d015      	beq.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
1000b386:	4b18      	ldr	r3, [pc, #96]	; (1000b3e8 <ble_discovery_complete_app_event+0xf0>)
1000b388:	781a      	ldrb	r2, [r3, #0]
				perception_state_flag = PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND;
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b38a:	2300      	movs	r3, #0
		}
		
		
		if (discover_char_flag) {
			DBG_LOG_DEV("GATT characteristic discovery completed");
			if (vibe1_char_found && vibe2_char_found && vibe3_char_found && vibe4_char_found) {
1000b38c:	2a00      	cmp	r2, #0
1000b38e:	d010      	beq.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
1000b390:	4b16      	ldr	r3, [pc, #88]	; (1000b3ec <ble_discovery_complete_app_event+0xf4>)
1000b392:	781a      	ldrb	r2, [r3, #0]
				perception_state_flag = PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND;
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b394:	2300      	movs	r3, #0
		}
		
		
		if (discover_char_flag) {
			DBG_LOG_DEV("GATT characteristic discovery completed");
			if (vibe1_char_found && vibe2_char_found && vibe3_char_found && vibe4_char_found) {
1000b396:	2a00      	cmp	r2, #0
1000b398:	d00b      	beq.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
				perception_state_flag = PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND;
1000b39a:	2205      	movs	r2, #5
1000b39c:	4b14      	ldr	r3, [pc, #80]	; (1000b3f0 <ble_discovery_complete_app_event+0xf8>)
1000b39e:	701a      	strb	r2, [r3, #0]
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
1000b3a0:	20fa      	movs	r0, #250	; 0xfa
1000b3a2:	0040      	lsls	r0, r0, #1
1000b3a4:	4b13      	ldr	r3, [pc, #76]	; (1000b3f4 <ble_discovery_complete_app_event+0xfc>)
1000b3a6:	4798      	blx	r3
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b3a8:	2300      	movs	r3, #0
1000b3aa:	e002      	b.n	1000b3b2 <ble_discovery_complete_app_event+0xba>
			DBG_LOG("Perception Service Not Found");
			perception_handle.char_discovery = AT_BLE_INVALID_STATE;
			discover_char_flag = false;
		}
		
		if (perception_handle.char_discovery == AT_BLE_INVALID_STATE) {
1000b3ac:	2be0      	cmp	r3, #224	; 0xe0
1000b3ae:	d1e0      	bne.n	1000b372 <ble_discovery_complete_app_event+0x7a>
1000b3b0:	e7d3      	b.n	1000b35a <ble_discovery_complete_app_event+0x62>
				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000b3b2:	1c18      	adds	r0, r3, #0
1000b3b4:	bd10      	pop	{r4, pc}
1000b3b6:	46c0      	nop			; (mov r8, r8)
1000b3b8:	1000a389 	.word	0x1000a389
1000b3bc:	1001187c 	.word	0x1001187c
1000b3c0:	1000c66d 	.word	0x1000c66d
1000b3c4:	10010cc8 	.word	0x10010cc8
1000b3c8:	1000f919 	.word	0x1000f919
1000b3cc:	100113d0 	.word	0x100113d0
1000b3d0:	1000f7f9 	.word	0x1000f7f9
1000b3d4:	10011404 	.word	0x10011404
1000b3d8:	10011424 	.word	0x10011424
1000b3dc:	1000c5bd 	.word	0x1000c5bd
1000b3e0:	10011ef1 	.word	0x10011ef1
1000b3e4:	10011ef4 	.word	0x10011ef4
1000b3e8:	10011ef3 	.word	0x10011ef3
1000b3ec:	10011ef5 	.word	0x10011ef5
1000b3f0:	10011ef0 	.word	0x10011ef0
1000b3f4:	1000a7cd 	.word	0x1000a7cd

1000b3f8 <timer_callback_fn>:
	NULL
};

/* timer callback function */
static void timer_callback_fn(void)
{
1000b3f8:	b510      	push	{r4, lr}
	// Stop the timer
	hw_timer_stop();
1000b3fa:	4b06      	ldr	r3, [pc, #24]	; (1000b414 <timer_callback_fn+0x1c>)
1000b3fc:	4798      	blx	r3

	// Enable flag to serve app task
	timer_done = true;
1000b3fe:	2201      	movs	r2, #1
1000b400:	4b05      	ldr	r3, [pc, #20]	; (1000b418 <timer_callback_fn+0x20>)
1000b402:	701a      	strb	r2, [r3, #0]

	send_plf_int_msg_ind(USER_TIMER_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b404:	2041      	movs	r0, #65	; 0x41
1000b406:	2101      	movs	r1, #1
1000b408:	2200      	movs	r2, #0
1000b40a:	2300      	movs	r3, #0
1000b40c:	4c03      	ldr	r4, [pc, #12]	; (1000b41c <timer_callback_fn+0x24>)
1000b40e:	47a0      	blx	r4
}
1000b410:	bd10      	pop	{r4, pc}
1000b412:	46c0      	nop			; (mov r8, r8)
1000b414:	1000a7f9 	.word	0x1000a7f9
1000b418:	10011ef2 	.word	0x10011ef2
1000b41c:	1000ac01 	.word	0x1000ac01

1000b420 <perception_start_scan>:
		DBG_LOG("Scanning Failed Generic error");
	}
}

at_ble_status_t perception_start_scan(void)
{
1000b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char index_value;
	// NOT SURE IF NEEDED
	hw_timer_stop();
1000b422:	4b1d      	ldr	r3, [pc, #116]	; (1000b498 <perception_start_scan+0x78>)
1000b424:	4798      	blx	r3
	do
	{
		DBG_LOG("Select [r] to Reconnect or [s] Scan");
1000b426:	4d1d      	ldr	r5, [pc, #116]	; (1000b49c <perception_start_scan+0x7c>)
1000b428:	4e1d      	ldr	r6, [pc, #116]	; (1000b4a0 <perception_start_scan+0x80>)
1000b42a:	1c28      	adds	r0, r5, #0
1000b42c:	47b0      	blx	r6
1000b42e:	481d      	ldr	r0, [pc, #116]	; (1000b4a4 <perception_start_scan+0x84>)
1000b430:	4b1d      	ldr	r3, [pc, #116]	; (1000b4a8 <perception_start_scan+0x88>)
1000b432:	4798      	blx	r3
		index_value = getchar_b11();
1000b434:	4b1d      	ldr	r3, [pc, #116]	; (1000b4ac <perception_start_scan+0x8c>)
1000b436:	4798      	blx	r3
1000b438:	1c04      	adds	r4, r0, #0
1000b43a:	b2c7      	uxtb	r7, r0
		DBG_LOG("%c", index_value);
1000b43c:	1c28      	adds	r0, r5, #0
1000b43e:	47b0      	blx	r6
1000b440:	20ff      	movs	r0, #255	; 0xff
1000b442:	4020      	ands	r0, r4
1000b444:	4b1a      	ldr	r3, [pc, #104]	; (1000b4b0 <perception_start_scan+0x90>)
1000b446:	4798      	blx	r3
	}	while (!((index_value == 'r') || (index_value == 's')));
1000b448:	1c3b      	adds	r3, r7, #0
1000b44a:	3b72      	subs	r3, #114	; 0x72
1000b44c:	2b01      	cmp	r3, #1
1000b44e:	d8ec      	bhi.n	1000b42a <perception_start_scan+0xa>
	
	if(index_value == 'r') {
1000b450:	2f72      	cmp	r7, #114	; 0x72
1000b452:	d119      	bne.n	1000b488 <perception_start_scan+0x68>
		if (gap_dev_connect(&perception_reporter_address) == AT_BLE_SUCCESS) {
1000b454:	4817      	ldr	r0, [pc, #92]	; (1000b4b4 <perception_start_scan+0x94>)
1000b456:	4b18      	ldr	r3, [pc, #96]	; (1000b4b8 <perception_start_scan+0x98>)
1000b458:	4798      	blx	r3
1000b45a:	1e04      	subs	r4, r0, #0
1000b45c:	d10c      	bne.n	1000b478 <perception_start_scan+0x58>
			DBG_LOG("Perception Re-Connect request sent");
1000b45e:	480f      	ldr	r0, [pc, #60]	; (1000b49c <perception_start_scan+0x7c>)
1000b460:	4b0f      	ldr	r3, [pc, #60]	; (1000b4a0 <perception_start_scan+0x80>)
1000b462:	4798      	blx	r3
1000b464:	4815      	ldr	r0, [pc, #84]	; (1000b4bc <perception_start_scan+0x9c>)
1000b466:	4b10      	ldr	r3, [pc, #64]	; (1000b4a8 <perception_start_scan+0x88>)
1000b468:	4798      	blx	r3
			perception_state_flag = PERCEPTION_DEV_CONNECTING;
1000b46a:	2201      	movs	r2, #1
1000b46c:	4b14      	ldr	r3, [pc, #80]	; (1000b4c0 <perception_start_scan+0xa0>)
1000b46e:	701a      	strb	r2, [r3, #0]
			hw_timer_start(PERCEPTION_CONNECT_REQ_INTERVAL);
1000b470:	4814      	ldr	r0, [pc, #80]	; (1000b4c4 <perception_start_scan+0xa4>)
1000b472:	4b15      	ldr	r3, [pc, #84]	; (1000b4c8 <perception_start_scan+0xa8>)
1000b474:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000b476:	e00d      	b.n	1000b494 <perception_start_scan+0x74>
		} else {
			DBG_LOG("Perception Re-Connect request send failed");
1000b478:	4808      	ldr	r0, [pc, #32]	; (1000b49c <perception_start_scan+0x7c>)
1000b47a:	4b09      	ldr	r3, [pc, #36]	; (1000b4a0 <perception_start_scan+0x80>)
1000b47c:	4798      	blx	r3
1000b47e:	4813      	ldr	r0, [pc, #76]	; (1000b4cc <perception_start_scan+0xac>)
1000b480:	4b09      	ldr	r3, [pc, #36]	; (1000b4a8 <perception_start_scan+0x88>)
1000b482:	4798      	blx	r3
		}
	}
	else if(index_value == 's') {
		return gap_dev_scan();
	}
	return AT_BLE_FAILURE;
1000b484:	24e2      	movs	r4, #226	; 0xe2
1000b486:	e005      	b.n	1000b494 <perception_start_scan+0x74>
1000b488:	24e2      	movs	r4, #226	; 0xe2
			return AT_BLE_SUCCESS;
		} else {
			DBG_LOG("Perception Re-Connect request send failed");
		}
	}
	else if(index_value == 's') {
1000b48a:	2f73      	cmp	r7, #115	; 0x73
1000b48c:	d102      	bne.n	1000b494 <perception_start_scan+0x74>
		return gap_dev_scan();
1000b48e:	4b10      	ldr	r3, [pc, #64]	; (1000b4d0 <perception_start_scan+0xb0>)
1000b490:	4798      	blx	r3
1000b492:	1c04      	adds	r4, r0, #0
	}
	return AT_BLE_FAILURE;
}
1000b494:	1c20      	adds	r0, r4, #0
1000b496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b498:	1000a7f9 	.word	0x1000a7f9
1000b49c:	10010cc8 	.word	0x10010cc8
1000b4a0:	1000f919 	.word	0x1000f919
1000b4a4:	10011448 	.word	0x10011448
1000b4a8:	1000f7f9 	.word	0x1000f7f9
1000b4ac:	1000a705 	.word	0x1000a705
1000b4b0:	1000f82d 	.word	0x1000f82d
1000b4b4:	10012bd4 	.word	0x10012bd4
1000b4b8:	10009e71 	.word	0x10009e71
1000b4bc:	1001146c 	.word	0x1001146c
1000b4c0:	10011ef0 	.word	0x10011ef0
1000b4c4:	00004e20 	.word	0x00004e20
1000b4c8:	1000a7cd 	.word	0x1000a7cd
1000b4cc:	10011490 	.word	0x10011490
1000b4d0:	10009eb9 	.word	0x10009eb9

1000b4d4 <ble_disconnected_app_event>:
	return discovery_status;
}

/* Callback registered for AT_BLE_DISCONNECTED event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
1000b4d4:	b510      	push	{r4, lr}
1000b4d6:	1c04      	adds	r4, r0, #0
	at_ble_disconnected_t *disconnect;
	disconnect = (at_ble_disconnected_t *)param;
	
	if((ble_check_device_state(disconnect->handle, BLE_DEVICE_DISCONNECTED) == AT_BLE_SUCCESS) ||
1000b4d8:	8800      	ldrh	r0, [r0, #0]
1000b4da:	2101      	movs	r1, #1
1000b4dc:	4b0a      	ldr	r3, [pc, #40]	; (1000b508 <ble_disconnected_app_event+0x34>)
1000b4de:	4798      	blx	r3
1000b4e0:	2800      	cmp	r0, #0
1000b4e2:	d007      	beq.n	1000b4f4 <ble_disconnected_app_event+0x20>
	(ble_check_device_state(disconnect->handle, BLE_DEVICE_DEFAULT_IDLE) == AT_BLE_SUCCESS)) {
1000b4e4:	8820      	ldrh	r0, [r4, #0]
1000b4e6:	2100      	movs	r1, #0
1000b4e8:	4b07      	ldr	r3, [pc, #28]	; (1000b508 <ble_disconnected_app_event+0x34>)
1000b4ea:	4798      	blx	r3
1000b4ec:	1c03      	adds	r3, r0, #0
		} else {
			perception_start_scan();
		}
	}

	return AT_BLE_FAILURE;
1000b4ee:	20e2      	movs	r0, #226	; 0xe2
static at_ble_status_t ble_disconnected_app_event(void *param)
{
	at_ble_disconnected_t *disconnect;
	disconnect = (at_ble_disconnected_t *)param;
	
	if((ble_check_device_state(disconnect->handle, BLE_DEVICE_DISCONNECTED) == AT_BLE_SUCCESS) ||
1000b4f0:	2b00      	cmp	r3, #0
1000b4f2:	d107      	bne.n	1000b504 <ble_disconnected_app_event+0x30>
	(ble_check_device_state(disconnect->handle, BLE_DEVICE_DEFAULT_IDLE) == AT_BLE_SUCCESS)) {
		if (disconnect->reason == AT_BLE_LL_COMMAND_DISALLOWED) {
1000b4f4:	78a3      	ldrb	r3, [r4, #2]
1000b4f6:	2b9c      	cmp	r3, #156	; 0x9c
1000b4f8:	d003      	beq.n	1000b502 <ble_disconnected_app_event+0x2e>
			return AT_BLE_SUCCESS;
		} else {
			perception_start_scan();
1000b4fa:	4b04      	ldr	r3, [pc, #16]	; (1000b50c <ble_disconnected_app_event+0x38>)
1000b4fc:	4798      	blx	r3
		}
	}

	return AT_BLE_FAILURE;
1000b4fe:	20e2      	movs	r0, #226	; 0xe2
1000b500:	e000      	b.n	1000b504 <ble_disconnected_app_event+0x30>
	disconnect = (at_ble_disconnected_t *)param;
	
	if((ble_check_device_state(disconnect->handle, BLE_DEVICE_DISCONNECTED) == AT_BLE_SUCCESS) ||
	(ble_check_device_state(disconnect->handle, BLE_DEVICE_DEFAULT_IDLE) == AT_BLE_SUCCESS)) {
		if (disconnect->reason == AT_BLE_LL_COMMAND_DISALLOWED) {
			return AT_BLE_SUCCESS;
1000b502:	2000      	movs	r0, #0
			perception_start_scan();
		}
	}

	return AT_BLE_FAILURE;
}
1000b504:	bd10      	pop	{r4, pc}
1000b506:	46c0      	nop			; (mov r8, r8)
1000b508:	1000a3b9 	.word	0x1000a3b9
1000b50c:	1000b421 	.word	0x1000b421

1000b510 <perception_connect_request>:
	return AT_BLE_FAILURE;
}

at_ble_status_t perception_connect_request(at_ble_scan_info_t *scan_buffer,
uint8_t index)
{
1000b510:	b510      	push	{r4, lr}
	memcpy((uint8_t *)&perception_reporter_address,
1000b512:	4c13      	ldr	r4, [pc, #76]	; (1000b560 <perception_connect_request+0x50>)
1000b514:	008b      	lsls	r3, r1, #2
1000b516:	185b      	adds	r3, r3, r1
1000b518:	00db      	lsls	r3, r3, #3
1000b51a:	1859      	adds	r1, r3, r1
1000b51c:	1841      	adds	r1, r0, r1
1000b51e:	3101      	adds	r1, #1
1000b520:	1c20      	adds	r0, r4, #0
1000b522:	2207      	movs	r2, #7
1000b524:	4b0f      	ldr	r3, [pc, #60]	; (1000b564 <perception_connect_request+0x54>)
1000b526:	4798      	blx	r3
	(uint8_t *)&scan_buffer[index].dev_addr,
	sizeof(at_ble_addr_t));

	if (gap_dev_connect(&perception_reporter_address) == AT_BLE_SUCCESS) {
1000b528:	1c20      	adds	r0, r4, #0
1000b52a:	4b0f      	ldr	r3, [pc, #60]	; (1000b568 <perception_connect_request+0x58>)
1000b52c:	4798      	blx	r3
1000b52e:	1e04      	subs	r4, r0, #0
1000b530:	d10c      	bne.n	1000b54c <perception_connect_request+0x3c>
		DBG_LOG("Perception Connect request sent");
1000b532:	480e      	ldr	r0, [pc, #56]	; (1000b56c <perception_connect_request+0x5c>)
1000b534:	4b0e      	ldr	r3, [pc, #56]	; (1000b570 <perception_connect_request+0x60>)
1000b536:	4798      	blx	r3
1000b538:	480e      	ldr	r0, [pc, #56]	; (1000b574 <perception_connect_request+0x64>)
1000b53a:	4b0f      	ldr	r3, [pc, #60]	; (1000b578 <perception_connect_request+0x68>)
1000b53c:	4798      	blx	r3
		perception_state_flag = PERCEPTION_DEV_CONNECTING;
1000b53e:	2201      	movs	r2, #1
1000b540:	4b0e      	ldr	r3, [pc, #56]	; (1000b57c <perception_connect_request+0x6c>)
1000b542:	701a      	strb	r2, [r3, #0]
		hw_timer_start(PERCEPTION_CONNECT_REQ_INTERVAL);
1000b544:	480e      	ldr	r0, [pc, #56]	; (1000b580 <perception_connect_request+0x70>)
1000b546:	4b0f      	ldr	r3, [pc, #60]	; (1000b584 <perception_connect_request+0x74>)
1000b548:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000b54a:	e006      	b.n	1000b55a <perception_connect_request+0x4a>
	} else {
		DBG_LOG("Perception Connect request send failed");
1000b54c:	4807      	ldr	r0, [pc, #28]	; (1000b56c <perception_connect_request+0x5c>)
1000b54e:	4b08      	ldr	r3, [pc, #32]	; (1000b570 <perception_connect_request+0x60>)
1000b550:	4798      	blx	r3
1000b552:	480d      	ldr	r0, [pc, #52]	; (1000b588 <perception_connect_request+0x78>)
1000b554:	4b08      	ldr	r3, [pc, #32]	; (1000b578 <perception_connect_request+0x68>)
1000b556:	4798      	blx	r3
	}

	return AT_BLE_FAILURE;
1000b558:	24e2      	movs	r4, #226	; 0xe2
}
1000b55a:	1c20      	adds	r0, r4, #0
1000b55c:	bd10      	pop	{r4, pc}
1000b55e:	46c0      	nop			; (mov r8, r8)
1000b560:	10012bd4 	.word	0x10012bd4
1000b564:	1000f7d7 	.word	0x1000f7d7
1000b568:	10009e71 	.word	0x10009e71
1000b56c:	10010cc8 	.word	0x10010cc8
1000b570:	1000f919 	.word	0x1000f919
1000b574:	100114bc 	.word	0x100114bc
1000b578:	1000f7f9 	.word	0x1000f7f9
1000b57c:	10011ef0 	.word	0x10011ef0
1000b580:	00004e20 	.word	0x00004e20
1000b584:	1000a7cd 	.word	0x1000a7cd
1000b588:	100114dc 	.word	0x100114dc

1000b58c <ble_scan_report_app_event>:

/* Callback functions */

/* Callback registered for AT_BLE_SCAN_REPORT event from stack */
static at_ble_status_t ble_scan_report_app_event(void *param)
{
1000b58c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b58e:	465f      	mov	r7, fp
1000b590:	4656      	mov	r6, sl
1000b592:	464d      	mov	r5, r9
1000b594:	4644      	mov	r4, r8
1000b596:	b4f0      	push	{r4, r5, r6, r7}
1000b598:	b08f      	sub	sp, #60	; 0x3c
	uint8_t scan_device[MAX_SCAN_DEVICE];
	uint8_t perception_scan_device_count = 0;
	uint8_t scanned_dev_count = scan_response_count;
1000b59a:	4b5b      	ldr	r3, [pc, #364]	; (1000b708 <ble_scan_report_app_event+0x17c>)
1000b59c:	7818      	ldrb	r0, [r3, #0]
1000b59e:	b2c0      	uxtb	r0, r0
	uint8_t perception_supp_scan_index[MAX_SCAN_DEVICE];
	uint8_t scan_index = 0;
	uint8_t index;
	at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
	memset(scan_device, 0, MAX_SCAN_DEVICE);
1000b5a0:	2300      	movs	r3, #0
1000b5a2:	9309      	str	r3, [sp, #36]	; 0x24
1000b5a4:	930a      	str	r3, [sp, #40]	; 0x28
1000b5a6:	930b      	str	r3, [sp, #44]	; 0x2c
1000b5a8:	930c      	str	r3, [sp, #48]	; 0x30
1000b5aa:	930d      	str	r3, [sp, #52]	; 0x34
	if (scanned_dev_count) {
1000b5ac:	2800      	cmp	r0, #0
1000b5ae:	d07d      	beq.n	1000b6ac <ble_scan_report_app_event+0x120>
1000b5b0:	4a56      	ldr	r2, [pc, #344]	; (1000b70c <ble_scan_report_app_event+0x180>)
1000b5b2:	2600      	movs	r6, #0
		
		at_ble_uuid_t service_uuid;

		for (index = 0; index < scanned_dev_count; index++) {			
			/* Display only the connectible devices*/
			if((scan_buffer[index].type == AT_BLE_ADV_TYPE_DIRECTED) 
1000b5b4:	7811      	ldrb	r1, [r2, #0]
1000b5b6:	2901      	cmp	r1, #1
1000b5b8:	d803      	bhi.n	1000b5c2 <ble_scan_report_app_event+0x36>
				|| (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {				
				scan_device[perception_scan_device_count++] = index;
1000b5ba:	1c71      	adds	r1, r6, #1
1000b5bc:	ac09      	add	r4, sp, #36	; 0x24
1000b5be:	55a3      	strb	r3, [r4, r6]
1000b5c0:	b2ce      	uxtb	r6, r1
	memset(scan_device, 0, MAX_SCAN_DEVICE);
	if (scanned_dev_count) {
		
		at_ble_uuid_t service_uuid;

		for (index = 0; index < scanned_dev_count; index++) {			
1000b5c2:	3301      	adds	r3, #1
1000b5c4:	b2db      	uxtb	r3, r3
1000b5c6:	3229      	adds	r2, #41	; 0x29
1000b5c8:	4283      	cmp	r3, r0
1000b5ca:	d1f3      	bne.n	1000b5b4 <ble_scan_report_app_event+0x28>
				|| (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {				
				scan_device[perception_scan_device_count++] = index;
			}
		}
		
		if (perception_scan_device_count) {		
1000b5cc:	2e00      	cmp	r6, #0
1000b5ce:	d100      	bne.n	1000b5d2 <ble_scan_report_app_event+0x46>
1000b5d0:	e08a      	b.n	1000b6e8 <ble_scan_report_app_event+0x15c>
			/* Service type to be searched */
			service_uuid.type = AT_BLE_UUID_16;
1000b5d2:	ab04      	add	r3, sp, #16
1000b5d4:	2200      	movs	r2, #0
1000b5d6:	701a      	strb	r2, [r3, #0]

			/* Service UUID */
			service_uuid.uuid[1] = (uint8_t)(PERCEPTION_SERVICE_UUID >> 8);
1000b5d8:	3263      	adds	r2, #99	; 0x63
1000b5da:	709a      	strb	r2, [r3, #2]
			service_uuid.uuid[0] = (uint8_t)(PERCEPTION_SERVICE_UUID >> 0);
1000b5dc:	3a4f      	subs	r2, #79	; 0x4f
1000b5de:	705a      	strb	r2, [r3, #1]
1000b5e0:	1e73      	subs	r3, r6, #1
1000b5e2:	b2db      	uxtb	r3, r3
1000b5e4:	3301      	adds	r3, #1
1000b5e6:	4699      	mov	r9, r3
1000b5e8:	2500      	movs	r5, #0
1000b5ea:	2300      	movs	r3, #0
1000b5ec:	4698      	mov	r8, r3
			
			for (index = 0; index < perception_scan_device_count; index++) {
				DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b5ee:	4b48      	ldr	r3, [pc, #288]	; (1000b710 <ble_scan_report_app_event+0x184>)
1000b5f0:	469b      	mov	fp, r3
				index,
				scan_buffer[scan_device[index]].dev_addr.addr[5],
1000b5f2:	4b46      	ldr	r3, [pc, #280]	; (1000b70c <ble_scan_report_app_event+0x180>)
1000b5f4:	469a      	mov	sl, r3
			/* Service UUID */
			service_uuid.uuid[1] = (uint8_t)(PERCEPTION_SERVICE_UUID >> 8);
			service_uuid.uuid[0] = (uint8_t)(PERCEPTION_SERVICE_UUID >> 0);
			
			for (index = 0; index < perception_scan_device_count; index++) {
				DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b5f6:	4847      	ldr	r0, [pc, #284]	; (1000b714 <ble_scan_report_app_event+0x188>)
1000b5f8:	47d8      	blx	fp
				index,
				scan_buffer[scan_device[index]].dev_addr.addr[5],
1000b5fa:	ab09      	add	r3, sp, #36	; 0x24
1000b5fc:	5ceb      	ldrb	r3, [r5, r3]
1000b5fe:	009c      	lsls	r4, r3, #2
1000b600:	18e4      	adds	r4, r4, r3
1000b602:	00e4      	lsls	r4, r4, #3
1000b604:	18e4      	adds	r4, r4, r3
1000b606:	4454      	add	r4, sl
			/* Service UUID */
			service_uuid.uuid[1] = (uint8_t)(PERCEPTION_SERVICE_UUID >> 8);
			service_uuid.uuid[0] = (uint8_t)(PERCEPTION_SERVICE_UUID >> 0);
			
			for (index = 0; index < perception_scan_device_count; index++) {
				DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b608:	79e2      	ldrb	r2, [r4, #7]
1000b60a:	79a3      	ldrb	r3, [r4, #6]
1000b60c:	7961      	ldrb	r1, [r4, #5]
1000b60e:	9100      	str	r1, [sp, #0]
1000b610:	7921      	ldrb	r1, [r4, #4]
1000b612:	9101      	str	r1, [sp, #4]
1000b614:	78e1      	ldrb	r1, [r4, #3]
1000b616:	9102      	str	r1, [sp, #8]
1000b618:	78a1      	ldrb	r1, [r4, #2]
1000b61a:	9103      	str	r1, [sp, #12]
1000b61c:	483e      	ldr	r0, [pc, #248]	; (1000b718 <ble_scan_report_app_event+0x18c>)
1000b61e:	1c29      	adds	r1, r5, #0
1000b620:	4f3e      	ldr	r7, [pc, #248]	; (1000b71c <ble_scan_report_app_event+0x190>)
1000b622:	47b8      	blx	r7
				scan_buffer[scan_device[index]].dev_addr.addr[3],
				scan_buffer[scan_device[index]].dev_addr.addr[2],
				scan_buffer[scan_device[index]].dev_addr.addr[1],
				scan_buffer[scan_device[index]].dev_addr.addr[0]);
				
				if (scan_info_parse(&scan_buffer[scan_device[index]], &service_uuid,
1000b624:	1c20      	adds	r0, r4, #0
1000b626:	a904      	add	r1, sp, #16
1000b628:	2203      	movs	r2, #3
1000b62a:	4b3d      	ldr	r3, [pc, #244]	; (1000b720 <ble_scan_report_app_event+0x194>)
1000b62c:	4798      	blx	r3
1000b62e:	2800      	cmp	r0, #0
1000b630:	d106      	bne.n	1000b640 <ble_scan_report_app_event+0xb4>
				AD_TYPE_COMPLETE_LIST_UUID) ==
				AT_BLE_SUCCESS) {
					/* Device Service UUID  matched */
					perception_supp_scan_index[scan_index++] = index;
1000b632:	4643      	mov	r3, r8
1000b634:	3301      	adds	r3, #1
1000b636:	b2db      	uxtb	r3, r3
1000b638:	4698      	mov	r8, r3
					DBG_LOG_CONT("---Perception");
1000b63a:	483a      	ldr	r0, [pc, #232]	; (1000b724 <ble_scan_report_app_event+0x198>)
1000b63c:	4b37      	ldr	r3, [pc, #220]	; (1000b71c <ble_scan_report_app_event+0x190>)
1000b63e:	4798      	blx	r3
1000b640:	3501      	adds	r5, #1

			/* Service UUID */
			service_uuid.uuid[1] = (uint8_t)(PERCEPTION_SERVICE_UUID >> 8);
			service_uuid.uuid[0] = (uint8_t)(PERCEPTION_SERVICE_UUID >> 0);
			
			for (index = 0; index < perception_scan_device_count; index++) {
1000b642:	454d      	cmp	r5, r9
1000b644:	d1d7      	bne.n	1000b5f6 <ble_scan_report_app_event+0x6a>
1000b646:	e04b      	b.n	1000b6e0 <ble_scan_report_app_event+0x154>
				}
			}			
		}

		if (!scan_index)  {
			DBG_LOG("Perception supported device not found ");
1000b648:	4832      	ldr	r0, [pc, #200]	; (1000b714 <ble_scan_report_app_event+0x188>)
1000b64a:	4b31      	ldr	r3, [pc, #196]	; (1000b710 <ble_scan_report_app_event+0x184>)
1000b64c:	4798      	blx	r3
1000b64e:	4836      	ldr	r0, [pc, #216]	; (1000b728 <ble_scan_report_app_event+0x19c>)
1000b650:	4b32      	ldr	r3, [pc, #200]	; (1000b71c <ble_scan_report_app_event+0x190>)
1000b652:	4798      	blx	r3
		}		
		
		/* Stop the current scan active */
		at_ble_scan_stop();
1000b654:	4b35      	ldr	r3, [pc, #212]	; (1000b72c <ble_scan_report_app_event+0x1a0>)
1000b656:	4798      	blx	r3
		
		/*Updating the index pointer to connect */
		if(perception_scan_device_count) {  
1000b658:	2e00      	cmp	r6, #0
1000b65a:	d025      	beq.n	1000b6a8 <ble_scan_report_app_event+0x11c>
			/* Successful device found event*/
			uint8_t deci_index = perception_scan_device_count;
			deci_index+=PERCEPTION_ASCII_TO_DECIMAL_VALUE;
1000b65c:	3630      	adds	r6, #48	; 0x30
1000b65e:	b2f5      	uxtb	r5, r6
			do {
				DBG_LOG("Select Index number to Connect or [s] to scan");
1000b660:	4f2b      	ldr	r7, [pc, #172]	; (1000b710 <ble_scan_report_app_event+0x184>)
1000b662:	482c      	ldr	r0, [pc, #176]	; (1000b714 <ble_scan_report_app_event+0x188>)
1000b664:	47b8      	blx	r7
1000b666:	4832      	ldr	r0, [pc, #200]	; (1000b730 <ble_scan_report_app_event+0x1a4>)
1000b668:	4b2c      	ldr	r3, [pc, #176]	; (1000b71c <ble_scan_report_app_event+0x190>)
1000b66a:	4798      	blx	r3
				index = getchar_b11();
1000b66c:	4b31      	ldr	r3, [pc, #196]	; (1000b734 <ble_scan_report_app_event+0x1a8>)
1000b66e:	4798      	blx	r3
1000b670:	1c04      	adds	r4, r0, #0
1000b672:	b2c6      	uxtb	r6, r0
				DBG_LOG("%c", index);
1000b674:	4827      	ldr	r0, [pc, #156]	; (1000b714 <ble_scan_report_app_event+0x188>)
1000b676:	47b8      	blx	r7
1000b678:	20ff      	movs	r0, #255	; 0xff
1000b67a:	4020      	ands	r0, r4
1000b67c:	4b2e      	ldr	r3, [pc, #184]	; (1000b738 <ble_scan_report_app_event+0x1ac>)
1000b67e:	4798      	blx	r3
			} while (!(((index < (deci_index)) && (index >='0')) || (index == 's')));	
1000b680:	42b5      	cmp	r5, r6
1000b682:	d901      	bls.n	1000b688 <ble_scan_report_app_event+0xfc>
1000b684:	2e2f      	cmp	r6, #47	; 0x2f
1000b686:	d802      	bhi.n	1000b68e <ble_scan_report_app_event+0x102>
1000b688:	2e73      	cmp	r6, #115	; 0x73
1000b68a:	d1ea      	bne.n	1000b662 <ble_scan_report_app_event+0xd6>
1000b68c:	e001      	b.n	1000b692 <ble_scan_report_app_event+0x106>
			
			if(index == 's') {
1000b68e:	2e73      	cmp	r6, #115	; 0x73
1000b690:	d102      	bne.n	1000b698 <ble_scan_report_app_event+0x10c>
				return gap_dev_scan();
1000b692:	4b2a      	ldr	r3, [pc, #168]	; (1000b73c <ble_scan_report_app_event+0x1b0>)
1000b694:	4798      	blx	r3
1000b696:	e030      	b.n	1000b6fa <ble_scan_report_app_event+0x16e>
			} else {
				index -= PERCEPTION_ASCII_TO_DECIMAL_VALUE;
1000b698:	3e30      	subs	r6, #48	; 0x30
				return perception_connect_request(scan_buffer,scan_device[index]);
1000b69a:	b2f6      	uxtb	r6, r6
1000b69c:	ab09      	add	r3, sp, #36	; 0x24
1000b69e:	5d99      	ldrb	r1, [r3, r6]
1000b6a0:	481a      	ldr	r0, [pc, #104]	; (1000b70c <ble_scan_report_app_event+0x180>)
1000b6a2:	4b27      	ldr	r3, [pc, #156]	; (1000b740 <ble_scan_report_app_event+0x1b4>)
1000b6a4:	4798      	blx	r3
1000b6a6:	e028      	b.n	1000b6fa <ble_scan_report_app_event+0x16e>
		if(index == 's') {
			return gap_dev_scan();
		}
	}		
        ALL_UNUSED(param);
	return AT_BLE_FAILURE;
1000b6a8:	20e2      	movs	r0, #226	; 0xe2
1000b6aa:	e026      	b.n	1000b6fa <ble_scan_report_app_event+0x16e>
		}			
	} else {  
		/* from no device found event*/
		do
		{
			DBG_LOG("Select [s] to scan again");
1000b6ac:	4d19      	ldr	r5, [pc, #100]	; (1000b714 <ble_scan_report_app_event+0x188>)
1000b6ae:	4f18      	ldr	r7, [pc, #96]	; (1000b710 <ble_scan_report_app_event+0x184>)
1000b6b0:	4e24      	ldr	r6, [pc, #144]	; (1000b744 <ble_scan_report_app_event+0x1b8>)
1000b6b2:	1c28      	adds	r0, r5, #0
1000b6b4:	47b8      	blx	r7
1000b6b6:	1c30      	adds	r0, r6, #0
1000b6b8:	4b18      	ldr	r3, [pc, #96]	; (1000b71c <ble_scan_report_app_event+0x190>)
1000b6ba:	4798      	blx	r3
			index = getchar_b11();
1000b6bc:	4b1d      	ldr	r3, [pc, #116]	; (1000b734 <ble_scan_report_app_event+0x1a8>)
1000b6be:	4798      	blx	r3
1000b6c0:	1c04      	adds	r4, r0, #0
			DBG_LOG("%c", index);
1000b6c2:	1c28      	adds	r0, r5, #0
1000b6c4:	47b8      	blx	r7
1000b6c6:	20ff      	movs	r0, #255	; 0xff
1000b6c8:	4020      	ands	r0, r4
1000b6ca:	4b1b      	ldr	r3, [pc, #108]	; (1000b738 <ble_scan_report_app_event+0x1ac>)
1000b6cc:	4798      	blx	r3
		} while (!(index == 's')); 
1000b6ce:	b2e4      	uxtb	r4, r4
1000b6d0:	2c73      	cmp	r4, #115	; 0x73
1000b6d2:	d1ee      	bne.n	1000b6b2 <ble_scan_report_app_event+0x126>
		
		if(index == 's') {
			return gap_dev_scan();
1000b6d4:	4b19      	ldr	r3, [pc, #100]	; (1000b73c <ble_scan_report_app_event+0x1b0>)
1000b6d6:	4798      	blx	r3
1000b6d8:	e00f      	b.n	1000b6fa <ble_scan_report_app_event+0x16e>
		if (!scan_index)  {
			DBG_LOG("Perception supported device not found ");
		}		
		
		/* Stop the current scan active */
		at_ble_scan_stop();
1000b6da:	4b14      	ldr	r3, [pc, #80]	; (1000b72c <ble_scan_report_app_event+0x1a0>)
1000b6dc:	4798      	blx	r3
1000b6de:	e7bd      	b.n	1000b65c <ble_scan_report_app_event+0xd0>
					DBG_LOG_CONT("---Perception");
				}
			}			
		}

		if (!scan_index)  {
1000b6e0:	4643      	mov	r3, r8
1000b6e2:	2b00      	cmp	r3, #0
1000b6e4:	d1f9      	bne.n	1000b6da <ble_scan_report_app_event+0x14e>
1000b6e6:	e7af      	b.n	1000b648 <ble_scan_report_app_event+0xbc>
			DBG_LOG("Perception supported device not found ");
1000b6e8:	480a      	ldr	r0, [pc, #40]	; (1000b714 <ble_scan_report_app_event+0x188>)
1000b6ea:	4b09      	ldr	r3, [pc, #36]	; (1000b710 <ble_scan_report_app_event+0x184>)
1000b6ec:	4798      	blx	r3
1000b6ee:	480e      	ldr	r0, [pc, #56]	; (1000b728 <ble_scan_report_app_event+0x19c>)
1000b6f0:	4b0a      	ldr	r3, [pc, #40]	; (1000b71c <ble_scan_report_app_event+0x190>)
1000b6f2:	4798      	blx	r3
		}		
		
		/* Stop the current scan active */
		at_ble_scan_stop();
1000b6f4:	4b0d      	ldr	r3, [pc, #52]	; (1000b72c <ble_scan_report_app_event+0x1a0>)
1000b6f6:	4798      	blx	r3
1000b6f8:	e7d6      	b.n	1000b6a8 <ble_scan_report_app_event+0x11c>
			return gap_dev_scan();
		}
	}		
        ALL_UNUSED(param);
	return AT_BLE_FAILURE;
}
1000b6fa:	b00f      	add	sp, #60	; 0x3c
1000b6fc:	bc3c      	pop	{r2, r3, r4, r5}
1000b6fe:	4690      	mov	r8, r2
1000b700:	4699      	mov	r9, r3
1000b702:	46a2      	mov	sl, r4
1000b704:	46ab      	mov	fp, r5
1000b706:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b708:	10011e14 	.word	0x10011e14
1000b70c:	10012350 	.word	0x10012350
1000b710:	1000f919 	.word	0x1000f919
1000b714:	10010cc8 	.word	0x10010cc8
1000b718:	10011504 	.word	0x10011504
1000b71c:	1000f7f9 	.word	0x1000f7f9
1000b720:	10009efd 	.word	0x10009efd
1000b724:	10011544 	.word	0x10011544
1000b728:	10011554 	.word	0x10011554
1000b72c:	1000c4c5 	.word	0x1000c4c5
1000b730:	1001157c 	.word	0x1001157c
1000b734:	1000a705 	.word	0x1000a705
1000b738:	1000f82d 	.word	0x1000f82d
1000b73c:	10009eb9 	.word	0x10009eb9
1000b740:	1000b511 	.word	0x1000b511
1000b744:	100115ac 	.word	0x100115ac

1000b748 <perception_service_discover>:

	return AT_BLE_FAILURE;
}

at_ble_status_t perception_service_discover(at_ble_handle_t handle)
{
1000b748:	b510      	push	{r4, lr}
	at_ble_status_t status;
	status = at_ble_primary_service_discover_all(
1000b74a:	2101      	movs	r1, #1
1000b74c:	4a06      	ldr	r2, [pc, #24]	; (1000b768 <perception_service_discover+0x20>)
1000b74e:	4b07      	ldr	r3, [pc, #28]	; (1000b76c <perception_service_discover+0x24>)
1000b750:	4798      	blx	r3
1000b752:	1e04      	subs	r4, r0, #0
		handle,
		GATT_DISCOVERY_STARTING_HANDLE,
		GATT_DISCOVERY_ENDING_HANDLE);
	if (status == AT_BLE_SUCCESS) {
1000b754:	d005      	beq.n	1000b762 <perception_service_discover+0x1a>
		DBG_LOG_DEV("GATT Discovery request started ");
	} else {
		DBG_LOG("GATT Discovery request failed");
1000b756:	4806      	ldr	r0, [pc, #24]	; (1000b770 <perception_service_discover+0x28>)
1000b758:	4b06      	ldr	r3, [pc, #24]	; (1000b774 <perception_service_discover+0x2c>)
1000b75a:	4798      	blx	r3
1000b75c:	4806      	ldr	r0, [pc, #24]	; (1000b778 <perception_service_discover+0x30>)
1000b75e:	4b07      	ldr	r3, [pc, #28]	; (1000b77c <perception_service_discover+0x34>)
1000b760:	4798      	blx	r3
	}
	
	return status;
}
1000b762:	1c20      	adds	r0, r4, #0
1000b764:	bd10      	pop	{r4, pc}
1000b766:	46c0      	nop			; (mov r8, r8)
1000b768:	0000ffff 	.word	0x0000ffff
1000b76c:	1000c645 	.word	0x1000c645
1000b770:	10010cc8 	.word	0x10010cc8
1000b774:	1000f919 	.word	0x1000f919
1000b778:	100115c8 	.word	0x100115c8
1000b77c:	1000f7f9 	.word	0x1000f7f9

1000b780 <ble_connected_app_event>:
	return AT_BLE_FAILURE;
}

/* Callback registered for AT_BLE_CONNECTED event from stack */
static at_ble_status_t ble_connected_app_event(void *param)
{
1000b780:	b510      	push	{r4, lr}
1000b782:	1c04      	adds	r4, r0, #0
	at_ble_connected_t *conn_params;
	conn_params = (at_ble_connected_t *)param;	
	
	if(!ble_check_iscentral(conn_params->handle))
1000b784:	8900      	ldrh	r0, [r0, #8]
1000b786:	4b07      	ldr	r3, [pc, #28]	; (1000b7a4 <ble_connected_app_event+0x24>)
1000b788:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
1000b78a:	23e2      	movs	r3, #226	; 0xe2
static at_ble_status_t ble_connected_app_event(void *param)
{
	at_ble_connected_t *conn_params;
	conn_params = (at_ble_connected_t *)param;	
	
	if(!ble_check_iscentral(conn_params->handle))
1000b78c:	2800      	cmp	r0, #0
1000b78e:	d006      	beq.n	1000b79e <ble_connected_app_event+0x1e>
	{
		return AT_BLE_FAILURE;
	}

	perception_state_flag = PERCEPTION_DEV_CONNECTED;
1000b790:	2202      	movs	r2, #2
1000b792:	4b05      	ldr	r3, [pc, #20]	; (1000b7a8 <ble_connected_app_event+0x28>)
1000b794:	701a      	strb	r2, [r3, #0]

	at_ble_status_t discovery_status = AT_BLE_FAILURE;
	discovery_status = perception_service_discover(conn_params->handle);
1000b796:	8920      	ldrh	r0, [r4, #8]
1000b798:	4b04      	ldr	r3, [pc, #16]	; (1000b7ac <ble_connected_app_event+0x2c>)
1000b79a:	4798      	blx	r3

	return discovery_status;
1000b79c:	1c03      	adds	r3, r0, #0
}
1000b79e:	1c18      	adds	r0, r3, #0
1000b7a0:	bd10      	pop	{r4, pc}
1000b7a2:	46c0      	nop			; (mov r8, r8)
1000b7a4:	1000a389 	.word	0x1000a389
1000b7a8:	10011ef0 	.word	0x10011ef0
1000b7ac:	1000b749 	.word	0x1000b749

1000b7b0 <main>:

	send_plf_int_msg_ind(USER_TIMER_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}

int main(void)
{
1000b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7b2:	b083      	sub	sp, #12
	platform_driver_init();
1000b7b4:	4b57      	ldr	r3, [pc, #348]	; (1000b914 <main+0x164>)
1000b7b6:	4798      	blx	r3
	acquire_sleep_lock();
1000b7b8:	4b57      	ldr	r3, [pc, #348]	; (1000b918 <main+0x168>)
1000b7ba:	4798      	blx	r3

	// Initialize serial console
	serial_console_init();
1000b7bc:	4b57      	ldr	r3, [pc, #348]	; (1000b91c <main+0x16c>)
1000b7be:	4798      	blx	r3
	
	// Hardware timer
	hw_timer_init();
1000b7c0:	4b57      	ldr	r3, [pc, #348]	; (1000b920 <main+0x170>)
1000b7c2:	4798      	blx	r3
	
	hw_timer_register_callback(timer_callback_fn);
1000b7c4:	4857      	ldr	r0, [pc, #348]	; (1000b924 <main+0x174>)
1000b7c6:	4b58      	ldr	r3, [pc, #352]	; (1000b928 <main+0x178>)
1000b7c8:	4798      	blx	r3

	DBG_LOG("Initializing Perception Application");
1000b7ca:	4858      	ldr	r0, [pc, #352]	; (1000b92c <main+0x17c>)
1000b7cc:	4b58      	ldr	r3, [pc, #352]	; (1000b930 <main+0x180>)
1000b7ce:	4798      	blx	r3
1000b7d0:	4858      	ldr	r0, [pc, #352]	; (1000b934 <main+0x184>)
1000b7d2:	4b59      	ldr	r3, [pc, #356]	; (1000b938 <main+0x188>)
1000b7d4:	4798      	blx	r3
	
	// Initialize the BLE chip and Set the Device Address
	ble_device_init(NULL);
1000b7d6:	2000      	movs	r0, #0
1000b7d8:	4b58      	ldr	r3, [pc, #352]	; (1000b93c <main+0x18c>)
1000b7da:	4798      	blx	r3

	// Initialize Perception Characteristic Handler
	perception_handle.char_data1 = perception_char_data1;
1000b7dc:	4b58      	ldr	r3, [pc, #352]	; (1000b940 <main+0x190>)
1000b7de:	4a59      	ldr	r2, [pc, #356]	; (1000b944 <main+0x194>)
1000b7e0:	611a      	str	r2, [r3, #16]
	perception_handle.char_data2 = perception_char_data2;
1000b7e2:	4a59      	ldr	r2, [pc, #356]	; (1000b948 <main+0x198>)
1000b7e4:	615a      	str	r2, [r3, #20]
	perception_handle.char_data3 = perception_char_data3;
1000b7e6:	4a59      	ldr	r2, [pc, #356]	; (1000b94c <main+0x19c>)
1000b7e8:	619a      	str	r2, [r3, #24]
	perception_handle.char_data4 = perception_char_data4;
1000b7ea:	4a59      	ldr	r2, [pc, #356]	; (1000b950 <main+0x1a0>)
1000b7ec:	61da      	str	r2, [r3, #28]
	
	// Register callbacks for gap related events
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000b7ee:	2000      	movs	r0, #0
1000b7f0:	2100      	movs	r1, #0
1000b7f2:	4a58      	ldr	r2, [pc, #352]	; (1000b954 <main+0x1a4>)
1000b7f4:	4c58      	ldr	r4, [pc, #352]	; (1000b958 <main+0x1a8>)
1000b7f6:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE,
									perception_gap_cb);
	
	// Register callbacks for gatt client related events
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000b7f8:	2000      	movs	r0, #0
1000b7fa:	2101      	movs	r1, #1
1000b7fc:	4a57      	ldr	r2, [pc, #348]	; (1000b95c <main+0x1ac>)
1000b7fe:	47a0      	blx	r4
static void perception_app_init(void)
{
	at_ble_status_t scan_status;

	/* Initialize the scanning procedure */
	scan_status = gap_dev_scan();
1000b800:	4b57      	ldr	r3, [pc, #348]	; (1000b960 <main+0x1b0>)
1000b802:	4798      	blx	r3

	/* Check for scan status */
	if (scan_status == AT_BLE_INVALID_PARAM) {
1000b804:	28cf      	cmp	r0, #207	; 0xcf
1000b806:	d106      	bne.n	1000b816 <main+0x66>
		DBG_LOG("Scan parameters are invalid");
1000b808:	4848      	ldr	r0, [pc, #288]	; (1000b92c <main+0x17c>)
1000b80a:	4b49      	ldr	r3, [pc, #292]	; (1000b930 <main+0x180>)
1000b80c:	4798      	blx	r3
1000b80e:	4855      	ldr	r0, [pc, #340]	; (1000b964 <main+0x1b4>)
1000b810:	4b49      	ldr	r3, [pc, #292]	; (1000b938 <main+0x188>)
1000b812:	4798      	blx	r3
1000b814:	e007      	b.n	1000b826 <main+0x76>
		} else if (scan_status == AT_BLE_FAILURE) {
1000b816:	28e2      	cmp	r0, #226	; 0xe2
1000b818:	d105      	bne.n	1000b826 <main+0x76>
		DBG_LOG("Scanning Failed Generic error");
1000b81a:	4844      	ldr	r0, [pc, #272]	; (1000b92c <main+0x17c>)
1000b81c:	4b44      	ldr	r3, [pc, #272]	; (1000b930 <main+0x180>)
1000b81e:	4798      	blx	r3
1000b820:	4851      	ldr	r0, [pc, #324]	; (1000b968 <main+0x1b8>)
1000b822:	4b45      	ldr	r3, [pc, #276]	; (1000b938 <main+0x188>)
1000b824:	4798      	blx	r3
	perception_app_init();
	
	while(true)
	{
		// BLE Event task
		ble_event_task(BLE_EVENT_TIMEOUT);
1000b826:	4e51      	ldr	r6, [pc, #324]	; (1000b96c <main+0x1bc>)
		
		// Application task
		if (timer_done) {
1000b828:	4d51      	ldr	r5, [pc, #324]	; (1000b970 <main+0x1c0>)
			if (perception_state_flag == PERCEPTION_DEV_CONNECTING) {
1000b82a:	4f52      	ldr	r7, [pc, #328]	; (1000b974 <main+0x1c4>)
	perception_app_init();
	
	while(true)
	{
		// BLE Event task
		ble_event_task(BLE_EVENT_TIMEOUT);
1000b82c:	2401      	movs	r4, #1
1000b82e:	4264      	negs	r4, r4
1000b830:	1c20      	adds	r0, r4, #0
1000b832:	47b0      	blx	r6
		
		// Application task
		if (timer_done) {
1000b834:	782b      	ldrb	r3, [r5, #0]
1000b836:	2b00      	cmp	r3, #0
1000b838:	d0fa      	beq.n	1000b830 <main+0x80>
			if (perception_state_flag == PERCEPTION_DEV_CONNECTING) {
1000b83a:	783b      	ldrb	r3, [r7, #0]
1000b83c:	2b01      	cmp	r3, #1
1000b83e:	d11c      	bne.n	1000b87a <main+0xca>
				at_ble_disconnected_t perception_connect_request_fail;
				perception_connect_request_fail.reason = AT_BLE_TERMINATED_BY_USER;
1000b840:	ab01      	add	r3, sp, #4
1000b842:	2213      	movs	r2, #19
1000b844:	709a      	strb	r2, [r3, #2]
				perception_connect_request_fail.handle = ble_dev_info[0].conn_info.handle;
1000b846:	4a4c      	ldr	r2, [pc, #304]	; (1000b978 <main+0x1c8>)
1000b848:	8912      	ldrh	r2, [r2, #8]
1000b84a:	801a      	strh	r2, [r3, #0]
				perception_state_flag = PERCEPTION_DEV_UNCONNECTED;
1000b84c:	2200      	movs	r2, #0
1000b84e:	4b49      	ldr	r3, [pc, #292]	; (1000b974 <main+0x1c4>)
1000b850:	701a      	strb	r2, [r3, #0]
				if (at_ble_connect_cancel() == AT_BLE_SUCCESS) {
1000b852:	4b4a      	ldr	r3, [pc, #296]	; (1000b97c <main+0x1cc>)
1000b854:	4798      	blx	r3
1000b856:	2800      	cmp	r0, #0
1000b858:	d109      	bne.n	1000b86e <main+0xbe>
					DBG_LOG("Connection Timeout");
1000b85a:	4834      	ldr	r0, [pc, #208]	; (1000b92c <main+0x17c>)
1000b85c:	4b34      	ldr	r3, [pc, #208]	; (1000b930 <main+0x180>)
1000b85e:	4798      	blx	r3
1000b860:	4847      	ldr	r0, [pc, #284]	; (1000b980 <main+0x1d0>)
1000b862:	4b35      	ldr	r3, [pc, #212]	; (1000b938 <main+0x188>)
1000b864:	4798      	blx	r3
					ble_disconnected_app_event(&perception_connect_request_fail);
1000b866:	a801      	add	r0, sp, #4
1000b868:	4b46      	ldr	r3, [pc, #280]	; (1000b984 <main+0x1d4>)
1000b86a:	4798      	blx	r3
1000b86c:	e005      	b.n	1000b87a <main+0xca>
				} else {
					DBG_LOG("Unable to connect with device");
1000b86e:	482f      	ldr	r0, [pc, #188]	; (1000b92c <main+0x17c>)
1000b870:	4b2f      	ldr	r3, [pc, #188]	; (1000b930 <main+0x180>)
1000b872:	4798      	blx	r3
1000b874:	4844      	ldr	r0, [pc, #272]	; (1000b988 <main+0x1d8>)
1000b876:	4b30      	ldr	r3, [pc, #192]	; (1000b938 <main+0x188>)
1000b878:	4798      	blx	r3
				}
			}

			if (perception_state_flag == PERCEPTION_DEV_CHAR_ALL_VIBE_FOUND) {
1000b87a:	4b3e      	ldr	r3, [pc, #248]	; (1000b974 <main+0x1c4>)
1000b87c:	781b      	ldrb	r3, [r3, #0]
1000b87e:	2b05      	cmp	r3, #5
1000b880:	d143      	bne.n	1000b90a <main+0x15a>
				if (!(at_ble_characteristic_read(ble_dev_info[0].conn_info.handle,
1000b882:	4b3d      	ldr	r3, [pc, #244]	; (1000b978 <main+0x1c8>)
1000b884:	8918      	ldrh	r0, [r3, #8]
1000b886:	4b2e      	ldr	r3, [pc, #184]	; (1000b940 <main+0x190>)
1000b888:	8899      	ldrh	r1, [r3, #4]
1000b88a:	2200      	movs	r2, #0
1000b88c:	2306      	movs	r3, #6
1000b88e:	4c3f      	ldr	r4, [pc, #252]	; (1000b98c <main+0x1dc>)
1000b890:	47a0      	blx	r4
1000b892:	2800      	cmp	r0, #0
1000b894:	d005      	beq.n	1000b8a2 <main+0xf2>
												 perception_handle.char_handle1,
												 PERCEPTION_READ_OFFSET,
												 PERCEPTION_READ_LENGTH)
												 == AT_BLE_SUCCESS)) {
					DBG_LOG("Vibe Motor 1 Characteristic Read Request Failed");
1000b896:	4825      	ldr	r0, [pc, #148]	; (1000b92c <main+0x17c>)
1000b898:	4b25      	ldr	r3, [pc, #148]	; (1000b930 <main+0x180>)
1000b89a:	4798      	blx	r3
1000b89c:	483c      	ldr	r0, [pc, #240]	; (1000b990 <main+0x1e0>)
1000b89e:	4b26      	ldr	r3, [pc, #152]	; (1000b938 <main+0x188>)
1000b8a0:	4798      	blx	r3
				}
				if (!(at_ble_characteristic_read(ble_dev_info[0].conn_info.handle,
1000b8a2:	4b35      	ldr	r3, [pc, #212]	; (1000b978 <main+0x1c8>)
1000b8a4:	8918      	ldrh	r0, [r3, #8]
1000b8a6:	4b26      	ldr	r3, [pc, #152]	; (1000b940 <main+0x190>)
1000b8a8:	88d9      	ldrh	r1, [r3, #6]
1000b8aa:	2200      	movs	r2, #0
1000b8ac:	2306      	movs	r3, #6
1000b8ae:	4c37      	ldr	r4, [pc, #220]	; (1000b98c <main+0x1dc>)
1000b8b0:	47a0      	blx	r4
1000b8b2:	2800      	cmp	r0, #0
1000b8b4:	d005      	beq.n	1000b8c2 <main+0x112>
												 perception_handle.char_handle2,
												 PERCEPTION_READ_OFFSET,
												 PERCEPTION_READ_LENGTH)
												 == AT_BLE_SUCCESS)) {
					DBG_LOG("Vibe Motor 2 Characteristic Read Request Failed");
1000b8b6:	481d      	ldr	r0, [pc, #116]	; (1000b92c <main+0x17c>)
1000b8b8:	4b1d      	ldr	r3, [pc, #116]	; (1000b930 <main+0x180>)
1000b8ba:	4798      	blx	r3
1000b8bc:	4835      	ldr	r0, [pc, #212]	; (1000b994 <main+0x1e4>)
1000b8be:	4b1e      	ldr	r3, [pc, #120]	; (1000b938 <main+0x188>)
1000b8c0:	4798      	blx	r3
				}
				if (!(at_ble_characteristic_read(ble_dev_info[0].conn_info.handle,
1000b8c2:	4b2d      	ldr	r3, [pc, #180]	; (1000b978 <main+0x1c8>)
1000b8c4:	8918      	ldrh	r0, [r3, #8]
1000b8c6:	4b1e      	ldr	r3, [pc, #120]	; (1000b940 <main+0x190>)
1000b8c8:	8919      	ldrh	r1, [r3, #8]
1000b8ca:	2200      	movs	r2, #0
1000b8cc:	2306      	movs	r3, #6
1000b8ce:	4c2f      	ldr	r4, [pc, #188]	; (1000b98c <main+0x1dc>)
1000b8d0:	47a0      	blx	r4
1000b8d2:	2800      	cmp	r0, #0
1000b8d4:	d005      	beq.n	1000b8e2 <main+0x132>
												 perception_handle.char_handle3,
												 PERCEPTION_READ_OFFSET,
												 PERCEPTION_READ_LENGTH)
												 == AT_BLE_SUCCESS)) {
					DBG_LOG("Vibe Motor 3 Characteristic Read Request Failed");
1000b8d6:	4815      	ldr	r0, [pc, #84]	; (1000b92c <main+0x17c>)
1000b8d8:	4b15      	ldr	r3, [pc, #84]	; (1000b930 <main+0x180>)
1000b8da:	4798      	blx	r3
1000b8dc:	482e      	ldr	r0, [pc, #184]	; (1000b998 <main+0x1e8>)
1000b8de:	4b16      	ldr	r3, [pc, #88]	; (1000b938 <main+0x188>)
1000b8e0:	4798      	blx	r3
				}
				if (!(at_ble_characteristic_read(ble_dev_info[0].conn_info.handle,
1000b8e2:	4b25      	ldr	r3, [pc, #148]	; (1000b978 <main+0x1c8>)
1000b8e4:	8918      	ldrh	r0, [r3, #8]
1000b8e6:	4b16      	ldr	r3, [pc, #88]	; (1000b940 <main+0x190>)
1000b8e8:	8959      	ldrh	r1, [r3, #10]
1000b8ea:	2200      	movs	r2, #0
1000b8ec:	2306      	movs	r3, #6
1000b8ee:	4c27      	ldr	r4, [pc, #156]	; (1000b98c <main+0x1dc>)
1000b8f0:	47a0      	blx	r4
1000b8f2:	2800      	cmp	r0, #0
1000b8f4:	d005      	beq.n	1000b902 <main+0x152>
												 perception_handle.char_handle4,
												 PERCEPTION_READ_OFFSET,
												 PERCEPTION_READ_LENGTH)
												 == AT_BLE_SUCCESS)) {
					DBG_LOG("Vibe Motor 4 Characteristic Read Request Failed");
1000b8f6:	480d      	ldr	r0, [pc, #52]	; (1000b92c <main+0x17c>)
1000b8f8:	4b0d      	ldr	r3, [pc, #52]	; (1000b930 <main+0x180>)
1000b8fa:	4798      	blx	r3
1000b8fc:	4827      	ldr	r0, [pc, #156]	; (1000b99c <main+0x1ec>)
1000b8fe:	4b0e      	ldr	r3, [pc, #56]	; (1000b938 <main+0x188>)
1000b900:	4798      	blx	r3
				}

				hw_timer_start(PERCEPTION_CHAR_READ_INTERVAL);
1000b902:	20fa      	movs	r0, #250	; 0xfa
1000b904:	0040      	lsls	r0, r0, #1
1000b906:	4b26      	ldr	r3, [pc, #152]	; (1000b9a0 <main+0x1f0>)
1000b908:	4798      	blx	r3
			}

			timer_done = false;
1000b90a:	2200      	movs	r2, #0
1000b90c:	4b18      	ldr	r3, [pc, #96]	; (1000b970 <main+0x1c0>)
1000b90e:	701a      	strb	r2, [r3, #0]
1000b910:	e78c      	b.n	1000b82c <main+0x7c>
1000b912:	46c0      	nop			; (mov r8, r8)
1000b914:	1000a995 	.word	0x1000a995
1000b918:	1000aebd 	.word	0x1000aebd
1000b91c:	1000a579 	.word	0x1000a579
1000b920:	1000a76d 	.word	0x1000a76d
1000b924:	1000b3f9 	.word	0x1000b3f9
1000b928:	1000a799 	.word	0x1000a799
1000b92c:	10010cc8 	.word	0x10010cc8
1000b930:	1000f919 	.word	0x1000f919
1000b934:	100115e8 	.word	0x100115e8
1000b938:	1000f7f9 	.word	0x1000f7f9
1000b93c:	10009bdd 	.word	0x10009bdd
1000b940:	1001187c 	.word	0x1001187c
1000b944:	10012be4 	.word	0x10012be4
1000b948:	10012bcc 	.word	0x10012bcc
1000b94c:	10012bc4 	.word	0x10012bc4
1000b950:	10012bdc 	.word	0x10012bdc
1000b954:	10011340 	.word	0x10011340
1000b958:	10009b0d 	.word	0x10009b0d
1000b95c:	1001173c 	.word	0x1001173c
1000b960:	10009eb9 	.word	0x10009eb9
1000b964:	1001160c 	.word	0x1001160c
1000b968:	10011628 	.word	0x10011628
1000b96c:	1000a50d 	.word	0x1000a50d
1000b970:	10011ef2 	.word	0x10011ef2
1000b974:	10011ef0 	.word	0x10011ef0
1000b978:	1001207c 	.word	0x1001207c
1000b97c:	1000c611 	.word	0x1000c611
1000b980:	10011648 	.word	0x10011648
1000b984:	1000b4d5 	.word	0x1000b4d5
1000b988:	1001165c 	.word	0x1001165c
1000b98c:	1000c695 	.word	0x1000c695
1000b990:	1001167c 	.word	0x1001167c
1000b994:	100116ac 	.word	0x100116ac
1000b998:	100116dc 	.word	0x100116dc
1000b99c:	1001170c 	.word	0x1001170c
1000b9a0:	1000a7cd 	.word	0x1000a7cd

1000b9a4 <internal_event_post>:
1000b9a4:	b570      	push	{r4, r5, r6, lr}
1000b9a6:	4d0c      	ldr	r5, [pc, #48]	; (1000b9d8 <internal_event_post+0x34>)
1000b9a8:	682c      	ldr	r4, [r5, #0]
1000b9aa:	2c00      	cmp	r4, #0
1000b9ac:	d013      	beq.n	1000b9d6 <internal_event_post+0x32>
1000b9ae:	6826      	ldr	r6, [r4, #0]
1000b9b0:	60e2      	str	r2, [r4, #12]
1000b9b2:	602e      	str	r6, [r5, #0]
1000b9b4:	2500      	movs	r5, #0
1000b9b6:	4a09      	ldr	r2, [pc, #36]	; (1000b9dc <internal_event_post+0x38>)
1000b9b8:	8123      	strh	r3, [r4, #8]
1000b9ba:	6813      	ldr	r3, [r2, #0]
1000b9bc:	6025      	str	r5, [r4, #0]
1000b9be:	80a0      	strh	r0, [r4, #4]
1000b9c0:	80e1      	strh	r1, [r4, #6]
1000b9c2:	42ab      	cmp	r3, r5
1000b9c4:	d101      	bne.n	1000b9ca <internal_event_post+0x26>
1000b9c6:	6014      	str	r4, [r2, #0]
1000b9c8:	e005      	b.n	1000b9d6 <internal_event_post+0x32>
1000b9ca:	681a      	ldr	r2, [r3, #0]
1000b9cc:	2a00      	cmp	r2, #0
1000b9ce:	d001      	beq.n	1000b9d4 <internal_event_post+0x30>
1000b9d0:	1c13      	adds	r3, r2, #0
1000b9d2:	e7fa      	b.n	1000b9ca <internal_event_post+0x26>
1000b9d4:	601c      	str	r4, [r3, #0]
1000b9d6:	bd70      	pop	{r4, r5, r6, pc}
1000b9d8:	10011f9c 	.word	0x10011f9c
1000b9dc:	10011f98 	.word	0x10011f98

1000b9e0 <internal_event_init>:
1000b9e0:	4b08      	ldr	r3, [pc, #32]	; (1000ba04 <internal_event_init+0x24>)
1000b9e2:	2200      	movs	r2, #0
1000b9e4:	1c19      	adds	r1, r3, #0
1000b9e6:	b510      	push	{r4, lr}
1000b9e8:	6818      	ldr	r0, [r3, #0]
1000b9ea:	4b07      	ldr	r3, [pc, #28]	; (1000ba08 <internal_event_init+0x28>)
1000b9ec:	189c      	adds	r4, r3, r2
1000b9ee:	50d0      	str	r0, [r2, r3]
1000b9f0:	3210      	adds	r2, #16
1000b9f2:	1c20      	adds	r0, r4, #0
1000b9f4:	2aa0      	cmp	r2, #160	; 0xa0
1000b9f6:	d1f8      	bne.n	1000b9ea <internal_event_init+0xa>
1000b9f8:	2200      	movs	r2, #0
1000b9fa:	3390      	adds	r3, #144	; 0x90
1000b9fc:	600b      	str	r3, [r1, #0]
1000b9fe:	4b03      	ldr	r3, [pc, #12]	; (1000ba0c <internal_event_init+0x2c>)
1000ba00:	601a      	str	r2, [r3, #0]
1000ba02:	bd10      	pop	{r4, pc}
1000ba04:	10011f9c 	.word	0x10011f9c
1000ba08:	10011ef8 	.word	0x10011ef8
1000ba0c:	10011f98 	.word	0x10011f98

1000ba10 <special_events_handler>:
1000ba10:	b538      	push	{r3, r4, r5, lr}
1000ba12:	4c1b      	ldr	r4, [pc, #108]	; (1000ba80 <special_events_handler+0x70>)
1000ba14:	1c03      	adds	r3, r0, #0
1000ba16:	8825      	ldrh	r5, [r4, #0]
1000ba18:	1c08      	adds	r0, r1, #0
1000ba1a:	1c21      	adds	r1, r4, #0
1000ba1c:	429d      	cmp	r5, r3
1000ba1e:	d107      	bne.n	1000ba30 <special_events_handler+0x20>
1000ba20:	88a5      	ldrh	r5, [r4, #4]
1000ba22:	4285      	cmp	r5, r0
1000ba24:	d104      	bne.n	1000ba30 <special_events_handler+0x20>
1000ba26:	2301      	movs	r3, #1
1000ba28:	425b      	negs	r3, r3
1000ba2a:	8023      	strh	r3, [r4, #0]
1000ba2c:	60a2      	str	r2, [r4, #8]
1000ba2e:	e009      	b.n	1000ba44 <special_events_handler+0x34>
1000ba30:	884c      	ldrh	r4, [r1, #2]
1000ba32:	429c      	cmp	r4, r3
1000ba34:	d10a      	bne.n	1000ba4c <special_events_handler+0x3c>
1000ba36:	888c      	ldrh	r4, [r1, #4]
1000ba38:	4284      	cmp	r4, r0
1000ba3a:	d107      	bne.n	1000ba4c <special_events_handler+0x3c>
1000ba3c:	2301      	movs	r3, #1
1000ba3e:	425b      	negs	r3, r3
1000ba40:	804b      	strh	r3, [r1, #2]
1000ba42:	608a      	str	r2, [r1, #8]
1000ba44:	4b0f      	ldr	r3, [pc, #60]	; (1000ba84 <special_events_handler+0x74>)
1000ba46:	4798      	blx	r3
1000ba48:	2001      	movs	r0, #1
1000ba4a:	e017      	b.n	1000ba7c <special_events_handler+0x6c>
1000ba4c:	490e      	ldr	r1, [pc, #56]	; (1000ba88 <special_events_handler+0x78>)
1000ba4e:	428b      	cmp	r3, r1
1000ba50:	d00e      	beq.n	1000ba70 <special_events_handler+0x60>
1000ba52:	490e      	ldr	r1, [pc, #56]	; (1000ba8c <special_events_handler+0x7c>)
1000ba54:	428b      	cmp	r3, r1
1000ba56:	d007      	beq.n	1000ba68 <special_events_handler+0x58>
1000ba58:	490d      	ldr	r1, [pc, #52]	; (1000ba90 <special_events_handler+0x80>)
1000ba5a:	2000      	movs	r0, #0
1000ba5c:	428b      	cmp	r3, r1
1000ba5e:	d10d      	bne.n	1000ba7c <special_events_handler+0x6c>
1000ba60:	1c10      	adds	r0, r2, #0
1000ba62:	4b0c      	ldr	r3, [pc, #48]	; (1000ba94 <special_events_handler+0x84>)
1000ba64:	4798      	blx	r3
1000ba66:	e7ef      	b.n	1000ba48 <special_events_handler+0x38>
1000ba68:	1c11      	adds	r1, r2, #0
1000ba6a:	4b0b      	ldr	r3, [pc, #44]	; (1000ba98 <special_events_handler+0x88>)
1000ba6c:	2200      	movs	r2, #0
1000ba6e:	e002      	b.n	1000ba76 <special_events_handler+0x66>
1000ba70:	1c11      	adds	r1, r2, #0
1000ba72:	2200      	movs	r2, #0
1000ba74:	4b09      	ldr	r3, [pc, #36]	; (1000ba9c <special_events_handler+0x8c>)
1000ba76:	4798      	blx	r3
1000ba78:	4243      	negs	r3, r0
1000ba7a:	4158      	adcs	r0, r3
1000ba7c:	bd38      	pop	{r3, r4, r5, pc}
1000ba7e:	46c0      	nop			; (mov r8, r8)
1000ba80:	10012bec 	.word	0x10012bec
1000ba84:	1000cd29 	.word	0x1000cd29
1000ba88:	00000e13 	.word	0x00000e13
1000ba8c:	00000e15 	.word	0x00000e15
1000ba90:	00000e01 	.word	0x00000e01
1000ba94:	1000d099 	.word	0x1000d099
1000ba98:	1000d259 	.word	0x1000d259
1000ba9c:	1000d331 	.word	0x1000d331

1000baa0 <at_ble_event_get>:
1000baa0:	2300      	movs	r3, #0
1000baa2:	b5f0      	push	{r4, r5, r6, r7, lr}
1000baa4:	b085      	sub	sp, #20
1000baa6:	9202      	str	r2, [sp, #8]
1000baa8:	7003      	strb	r3, [r0, #0]
1000baaa:	9b02      	ldr	r3, [sp, #8]
1000baac:	9001      	str	r0, [sp, #4]
1000baae:	3b01      	subs	r3, #1
1000bab0:	1c0d      	adds	r5, r1, #0
1000bab2:	9303      	str	r3, [sp, #12]
1000bab4:	3303      	adds	r3, #3
1000bab6:	d802      	bhi.n	1000babe <at_ble_event_get+0x1e>
1000bab8:	9802      	ldr	r0, [sp, #8]
1000baba:	4bad      	ldr	r3, [pc, #692]	; (1000bd70 <at_ble_event_get+0x2d0>)
1000babc:	4798      	blx	r3
1000babe:	9b03      	ldr	r3, [sp, #12]
1000bac0:	4fac      	ldr	r7, [pc, #688]	; (1000bd74 <at_ble_event_get+0x2d4>)
1000bac2:	2400      	movs	r4, #0
1000bac4:	3303      	adds	r3, #3
1000bac6:	d812      	bhi.n	1000baee <at_ble_event_get+0x4e>
1000bac8:	683b      	ldr	r3, [r7, #0]
1000baca:	2b00      	cmp	r3, #0
1000bacc:	d112      	bne.n	1000baf4 <at_ble_event_get+0x54>
1000bace:	2cd0      	cmp	r4, #208	; 0xd0
1000bad0:	d100      	bne.n	1000bad4 <at_ble_event_get+0x34>
1000bad2:	e29c      	b.n	1000c00e <at_ble_event_get+0x56e>
1000bad4:	9802      	ldr	r0, [sp, #8]
1000bad6:	4ba8      	ldr	r3, [pc, #672]	; (1000bd78 <at_ble_event_get+0x2d8>)
1000bad8:	4798      	blx	r3
1000bada:	1e04      	subs	r4, r0, #0
1000badc:	2c02      	cmp	r4, #2
1000bade:	d1f3      	bne.n	1000bac8 <at_ble_event_get+0x28>
1000bae0:	e025      	b.n	1000bb2e <at_ble_event_get+0x8e>
1000bae2:	9802      	ldr	r0, [sp, #8]
1000bae4:	4ba4      	ldr	r3, [pc, #656]	; (1000bd78 <at_ble_event_get+0x2d8>)
1000bae6:	4798      	blx	r3
1000bae8:	1e04      	subs	r4, r0, #0
1000baea:	2c02      	cmp	r4, #2
1000baec:	d01f      	beq.n	1000bb2e <at_ble_event_get+0x8e>
1000baee:	683b      	ldr	r3, [r7, #0]
1000baf0:	2b00      	cmp	r3, #0
1000baf2:	d0f6      	beq.n	1000bae2 <at_ble_event_get+0x42>
1000baf4:	2cd0      	cmp	r4, #208	; 0xd0
1000baf6:	d100      	bne.n	1000bafa <at_ble_event_get+0x5a>
1000baf8:	e289      	b.n	1000c00e <at_ble_event_get+0x56e>
1000bafa:	1ee3      	subs	r3, r4, #3
1000bafc:	1e5a      	subs	r2, r3, #1
1000bafe:	4193      	sbcs	r3, r2
1000bb00:	6838      	ldr	r0, [r7, #0]
1000bb02:	425b      	negs	r3, r3
1000bb04:	401c      	ands	r4, r3
1000bb06:	2800      	cmp	r0, #0
1000bb08:	d100      	bne.n	1000bb0c <at_ble_event_get+0x6c>
1000bb0a:	e286      	b.n	1000c01a <at_ble_event_get+0x57a>
1000bb0c:	6803      	ldr	r3, [r0, #0]
1000bb0e:	68c1      	ldr	r1, [r0, #12]
1000bb10:	603b      	str	r3, [r7, #0]
1000bb12:	4f9a      	ldr	r7, [pc, #616]	; (1000bd7c <at_ble_event_get+0x2dc>)
1000bb14:	88c2      	ldrh	r2, [r0, #6]
1000bb16:	683e      	ldr	r6, [r7, #0]
1000bb18:	8883      	ldrh	r3, [r0, #4]
1000bb1a:	6006      	str	r6, [r0, #0]
1000bb1c:	6038      	str	r0, [r7, #0]
1000bb1e:	2c00      	cmp	r4, #0
1000bb20:	d112      	bne.n	1000bb48 <at_ble_event_get+0xa8>
1000bb22:	4897      	ldr	r0, [pc, #604]	; (1000bd80 <at_ble_event_get+0x2e0>)
1000bb24:	4283      	cmp	r3, r0
1000bb26:	d008      	beq.n	1000bb3a <at_ble_event_get+0x9a>
1000bb28:	4896      	ldr	r0, [pc, #600]	; (1000bd84 <at_ble_event_get+0x2e4>)
1000bb2a:	4283      	cmp	r3, r0
1000bb2c:	d11d      	bne.n	1000bb6a <at_ble_event_get+0xca>
1000bb2e:	233a      	movs	r3, #58	; 0x3a
1000bb30:	2400      	movs	r4, #0
1000bb32:	9a01      	ldr	r2, [sp, #4]
1000bb34:	1c25      	adds	r5, r4, #0
1000bb36:	7013      	strb	r3, [r2, #0]
1000bb38:	e006      	b.n	1000bb48 <at_ble_event_get+0xa8>
1000bb3a:	429a      	cmp	r2, r3
1000bb3c:	d000      	beq.n	1000bb40 <at_ble_event_get+0xa0>
1000bb3e:	e268      	b.n	1000c012 <at_ble_event_get+0x572>
1000bb40:	2338      	movs	r3, #56	; 0x38
1000bb42:	9a01      	ldr	r2, [sp, #4]
1000bb44:	7013      	strb	r3, [r2, #0]
1000bb46:	6029      	str	r1, [r5, #0]
1000bb48:	9b01      	ldr	r3, [sp, #4]
1000bb4a:	781b      	ldrb	r3, [r3, #0]
1000bb4c:	2b3b      	cmp	r3, #59	; 0x3b
1000bb4e:	d003      	beq.n	1000bb58 <at_ble_event_get+0xb8>
1000bb50:	9b03      	ldr	r3, [sp, #12]
1000bb52:	3303      	adds	r3, #3
1000bb54:	d903      	bls.n	1000bb5e <at_ble_event_get+0xbe>
1000bb56:	e264      	b.n	1000c022 <at_ble_event_get+0x582>
1000bb58:	2c00      	cmp	r4, #0
1000bb5a:	d0b0      	beq.n	1000babe <at_ble_event_get+0x1e>
1000bb5c:	e7f8      	b.n	1000bb50 <at_ble_event_get+0xb0>
1000bb5e:	2cd0      	cmp	r4, #208	; 0xd0
1000bb60:	d100      	bne.n	1000bb64 <at_ble_event_get+0xc4>
1000bb62:	e25e      	b.n	1000c022 <at_ble_event_get+0x582>
1000bb64:	4b88      	ldr	r3, [pc, #544]	; (1000bd88 <at_ble_event_get+0x2e8>)
1000bb66:	4798      	blx	r3
1000bb68:	e25b      	b.n	1000c022 <at_ble_event_get+0x582>
1000bb6a:	2abb      	cmp	r2, #187	; 0xbb
1000bb6c:	d123      	bne.n	1000bbb6 <at_ble_event_get+0x116>
1000bb6e:	2bbb      	cmp	r3, #187	; 0xbb
1000bb70:	d121      	bne.n	1000bbb6 <at_ble_event_get+0x116>
1000bb72:	80ac      	strh	r4, [r5, #4]
1000bb74:	788b      	ldrb	r3, [r1, #2]
1000bb76:	784a      	ldrb	r2, [r1, #1]
1000bb78:	021b      	lsls	r3, r3, #8
1000bb7a:	78cf      	ldrb	r7, [r1, #3]
1000bb7c:	7908      	ldrb	r0, [r1, #4]
1000bb7e:	4313      	orrs	r3, r2
1000bb80:	794a      	ldrb	r2, [r1, #5]
1000bb82:	4982      	ldr	r1, [pc, #520]	; (1000bd8c <at_ble_event_get+0x2ec>)
1000bb84:	70af      	strb	r7, [r5, #2]
1000bb86:	802b      	strh	r3, [r5, #0]
1000bb88:	428b      	cmp	r3, r1
1000bb8a:	d806      	bhi.n	1000bb9a <at_ble_event_get+0xfa>
1000bb8c:	4a80      	ldr	r2, [pc, #512]	; (1000bd90 <at_ble_event_get+0x2f0>)
1000bb8e:	4293      	cmp	r3, r2
1000bb90:	d20b      	bcs.n	1000bbaa <at_ble_event_get+0x10a>
1000bb92:	4a80      	ldr	r2, [pc, #512]	; (1000bd94 <at_ble_event_get+0x2f4>)
1000bb94:	4293      	cmp	r3, r2
1000bb96:	d008      	beq.n	1000bbaa <at_ble_event_get+0x10a>
1000bb98:	e009      	b.n	1000bbae <at_ble_event_get+0x10e>
1000bb9a:	497f      	ldr	r1, [pc, #508]	; (1000bd98 <at_ble_event_get+0x2f8>)
1000bb9c:	428b      	cmp	r3, r1
1000bb9e:	d106      	bne.n	1000bbae <at_ble_event_get+0x10e>
1000bba0:	0213      	lsls	r3, r2, #8
1000bba2:	4303      	orrs	r3, r0
1000bba4:	80ab      	strh	r3, [r5, #4]
1000bba6:	2337      	movs	r3, #55	; 0x37
1000bba8:	e002      	b.n	1000bbb0 <at_ble_event_get+0x110>
1000bbaa:	2336      	movs	r3, #54	; 0x36
1000bbac:	e000      	b.n	1000bbb0 <at_ble_event_get+0x110>
1000bbae:	2300      	movs	r3, #0
1000bbb0:	9a01      	ldr	r2, [sp, #4]
1000bbb2:	7013      	strb	r3, [r2, #0]
1000bbb4:	e7c8      	b.n	1000bb48 <at_ble_event_get+0xa8>
1000bbb6:	4879      	ldr	r0, [pc, #484]	; (1000bd9c <at_ble_event_get+0x2fc>)
1000bbb8:	4283      	cmp	r3, r0
1000bbba:	d100      	bne.n	1000bbbe <at_ble_event_get+0x11e>
1000bbbc:	e14c      	b.n	1000be58 <at_ble_event_get+0x3b8>
1000bbbe:	d864      	bhi.n	1000bc8a <at_ble_event_get+0x1ea>
1000bbc0:	4877      	ldr	r0, [pc, #476]	; (1000bda0 <at_ble_event_get+0x300>)
1000bbc2:	4283      	cmp	r3, r0
1000bbc4:	d100      	bne.n	1000bbc8 <at_ble_event_get+0x128>
1000bbc6:	e1cd      	b.n	1000bf64 <at_ble_event_get+0x4c4>
1000bbc8:	d82f      	bhi.n	1000bc2a <at_ble_event_get+0x18a>
1000bbca:	4876      	ldr	r0, [pc, #472]	; (1000bda4 <at_ble_event_get+0x304>)
1000bbcc:	4283      	cmp	r3, r0
1000bbce:	d100      	bne.n	1000bbd2 <at_ble_event_get+0x132>
1000bbd0:	e1d6      	b.n	1000bf80 <at_ble_event_get+0x4e0>
1000bbd2:	d813      	bhi.n	1000bbfc <at_ble_event_get+0x15c>
1000bbd4:	4874      	ldr	r0, [pc, #464]	; (1000bda8 <at_ble_event_get+0x308>)
1000bbd6:	4283      	cmp	r3, r0
1000bbd8:	d100      	bne.n	1000bbdc <at_ble_event_get+0x13c>
1000bbda:	e19f      	b.n	1000bf1c <at_ble_event_get+0x47c>
1000bbdc:	d804      	bhi.n	1000bbe8 <at_ble_event_get+0x148>
1000bbde:	2438      	movs	r4, #56	; 0x38
1000bbe0:	42a3      	cmp	r3, r4
1000bbe2:	d100      	bne.n	1000bbe6 <at_ble_event_get+0x146>
1000bbe4:	e20f      	b.n	1000c006 <at_ble_event_get+0x566>
1000bbe6:	e0b6      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bbe8:	4870      	ldr	r0, [pc, #448]	; (1000bdac <at_ble_event_get+0x30c>)
1000bbea:	4283      	cmp	r3, r0
1000bbec:	d100      	bne.n	1000bbf0 <at_ble_event_get+0x150>
1000bbee:	e19b      	b.n	1000bf28 <at_ble_event_get+0x488>
1000bbf0:	30fe      	adds	r0, #254	; 0xfe
1000bbf2:	30ff      	adds	r0, #255	; 0xff
1000bbf4:	4283      	cmp	r3, r0
1000bbf6:	d100      	bne.n	1000bbfa <at_ble_event_get+0x15a>
1000bbf8:	e1c8      	b.n	1000bf8c <at_ble_event_get+0x4ec>
1000bbfa:	e0ac      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bbfc:	486c      	ldr	r0, [pc, #432]	; (1000bdb0 <at_ble_event_get+0x310>)
1000bbfe:	4283      	cmp	r3, r0
1000bc00:	d100      	bne.n	1000bc04 <at_ble_event_get+0x164>
1000bc02:	e1a3      	b.n	1000bf4c <at_ble_event_get+0x4ac>
1000bc04:	d808      	bhi.n	1000bc18 <at_ble_event_get+0x178>
1000bc06:	486b      	ldr	r0, [pc, #428]	; (1000bdb4 <at_ble_event_get+0x314>)
1000bc08:	4283      	cmp	r3, r0
1000bc0a:	d100      	bne.n	1000bc0e <at_ble_event_get+0x16e>
1000bc0c:	e192      	b.n	1000bf34 <at_ble_event_get+0x494>
1000bc0e:	486a      	ldr	r0, [pc, #424]	; (1000bdb8 <at_ble_event_get+0x318>)
1000bc10:	4283      	cmp	r3, r0
1000bc12:	d100      	bne.n	1000bc16 <at_ble_event_get+0x176>
1000bc14:	e194      	b.n	1000bf40 <at_ble_event_get+0x4a0>
1000bc16:	e09e      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bc18:	4868      	ldr	r0, [pc, #416]	; (1000bdbc <at_ble_event_get+0x31c>)
1000bc1a:	4283      	cmp	r3, r0
1000bc1c:	d100      	bne.n	1000bc20 <at_ble_event_get+0x180>
1000bc1e:	e19b      	b.n	1000bf58 <at_ble_event_get+0x4b8>
1000bc20:	4867      	ldr	r0, [pc, #412]	; (1000bdc0 <at_ble_event_get+0x320>)
1000bc22:	4283      	cmp	r3, r0
1000bc24:	d100      	bne.n	1000bc28 <at_ble_event_get+0x188>
1000bc26:	e1c5      	b.n	1000bfb4 <at_ble_event_get+0x514>
1000bc28:	e095      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bc2a:	4866      	ldr	r0, [pc, #408]	; (1000bdc4 <at_ble_event_get+0x324>)
1000bc2c:	4283      	cmp	r3, r0
1000bc2e:	d100      	bne.n	1000bc32 <at_ble_event_get+0x192>
1000bc30:	e1ba      	b.n	1000bfa8 <at_ble_event_get+0x508>
1000bc32:	d812      	bhi.n	1000bc5a <at_ble_event_get+0x1ba>
1000bc34:	4864      	ldr	r0, [pc, #400]	; (1000bdc8 <at_ble_event_get+0x328>)
1000bc36:	4283      	cmp	r3, r0
1000bc38:	d100      	bne.n	1000bc3c <at_ble_event_get+0x19c>
1000bc3a:	e1c1      	b.n	1000bfc0 <at_ble_event_get+0x520>
1000bc3c:	d804      	bhi.n	1000bc48 <at_ble_event_get+0x1a8>
1000bc3e:	4863      	ldr	r0, [pc, #396]	; (1000bdcc <at_ble_event_get+0x32c>)
1000bc40:	4283      	cmp	r3, r0
1000bc42:	d100      	bne.n	1000bc46 <at_ble_event_get+0x1a6>
1000bc44:	e192      	b.n	1000bf6c <at_ble_event_get+0x4cc>
1000bc46:	e086      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bc48:	4861      	ldr	r0, [pc, #388]	; (1000bdd0 <at_ble_event_get+0x330>)
1000bc4a:	4283      	cmp	r3, r0
1000bc4c:	d100      	bne.n	1000bc50 <at_ble_event_get+0x1b0>
1000bc4e:	e1a1      	b.n	1000bf94 <at_ble_event_get+0x4f4>
1000bc50:	4860      	ldr	r0, [pc, #384]	; (1000bdd4 <at_ble_event_get+0x334>)
1000bc52:	4283      	cmp	r3, r0
1000bc54:	d100      	bne.n	1000bc58 <at_ble_event_get+0x1b8>
1000bc56:	e1a3      	b.n	1000bfa0 <at_ble_event_get+0x500>
1000bc58:	e07d      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bc5a:	4a5f      	ldr	r2, [pc, #380]	; (1000bdd8 <at_ble_event_get+0x338>)
1000bc5c:	4293      	cmp	r3, r2
1000bc5e:	d100      	bne.n	1000bc62 <at_ble_event_get+0x1c2>
1000bc60:	e07f      	b.n	1000bd62 <at_ble_event_get+0x2c2>
1000bc62:	d808      	bhi.n	1000bc76 <at_ble_event_get+0x1d6>
1000bc64:	3a08      	subs	r2, #8
1000bc66:	4293      	cmp	r3, r2
1000bc68:	d077      	beq.n	1000bd5a <at_ble_event_get+0x2ba>
1000bc6a:	4a5c      	ldr	r2, [pc, #368]	; (1000bddc <at_ble_event_get+0x33c>)
1000bc6c:	2439      	movs	r4, #57	; 0x39
1000bc6e:	4293      	cmp	r3, r2
1000bc70:	d100      	bne.n	1000bc74 <at_ble_event_get+0x1d4>
1000bc72:	e1c8      	b.n	1000c006 <at_ble_event_get+0x566>
1000bc74:	e06f      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bc76:	22d1      	movs	r2, #209	; 0xd1
1000bc78:	0112      	lsls	r2, r2, #4
1000bc7a:	4293      	cmp	r3, r2
1000bc7c:	d100      	bne.n	1000bc80 <at_ble_event_get+0x1e0>
1000bc7e:	e0df      	b.n	1000be40 <at_ble_event_get+0x3a0>
1000bc80:	4a57      	ldr	r2, [pc, #348]	; (1000bde0 <at_ble_event_get+0x340>)
1000bc82:	4293      	cmp	r3, r2
1000bc84:	d100      	bne.n	1000bc88 <at_ble_event_get+0x1e8>
1000bc86:	e0e1      	b.n	1000be4c <at_ble_event_get+0x3ac>
1000bc88:	e065      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bc8a:	4856      	ldr	r0, [pc, #344]	; (1000bde4 <at_ble_event_get+0x344>)
1000bc8c:	4283      	cmp	r3, r0
1000bc8e:	d100      	bne.n	1000bc92 <at_ble_event_get+0x1f2>
1000bc90:	e118      	b.n	1000bec4 <at_ble_event_get+0x424>
1000bc92:	d82e      	bhi.n	1000bcf2 <at_ble_event_get+0x252>
1000bc94:	4854      	ldr	r0, [pc, #336]	; (1000bde8 <at_ble_event_get+0x348>)
1000bc96:	4283      	cmp	r3, r0
1000bc98:	d100      	bne.n	1000bc9c <at_ble_event_get+0x1fc>
1000bc9a:	e13b      	b.n	1000bf14 <at_ble_event_get+0x474>
1000bc9c:	d812      	bhi.n	1000bcc4 <at_ble_event_get+0x224>
1000bc9e:	4853      	ldr	r0, [pc, #332]	; (1000bdec <at_ble_event_get+0x34c>)
1000bca0:	4283      	cmp	r3, r0
1000bca2:	d100      	bne.n	1000bca6 <at_ble_event_get+0x206>
1000bca4:	e0ee      	b.n	1000be84 <at_ble_event_get+0x3e4>
1000bca6:	d804      	bhi.n	1000bcb2 <at_ble_event_get+0x212>
1000bca8:	3803      	subs	r0, #3
1000bcaa:	4283      	cmp	r3, r0
1000bcac:	d100      	bne.n	1000bcb0 <at_ble_event_get+0x210>
1000bcae:	e0d9      	b.n	1000be64 <at_ble_event_get+0x3c4>
1000bcb0:	e051      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bcb2:	484f      	ldr	r0, [pc, #316]	; (1000bdf0 <at_ble_event_get+0x350>)
1000bcb4:	4283      	cmp	r3, r0
1000bcb6:	d100      	bne.n	1000bcba <at_ble_event_get+0x21a>
1000bcb8:	e0d8      	b.n	1000be6c <at_ble_event_get+0x3cc>
1000bcba:	484e      	ldr	r0, [pc, #312]	; (1000bdf4 <at_ble_event_get+0x354>)
1000bcbc:	4283      	cmp	r3, r0
1000bcbe:	d100      	bne.n	1000bcc2 <at_ble_event_get+0x222>
1000bcc0:	e0fb      	b.n	1000beba <at_ble_event_get+0x41a>
1000bcc2:	e048      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bcc4:	484c      	ldr	r0, [pc, #304]	; (1000bdf8 <at_ble_event_get+0x358>)
1000bcc6:	4283      	cmp	r3, r0
1000bcc8:	d100      	bne.n	1000bccc <at_ble_event_get+0x22c>
1000bcca:	e0e1      	b.n	1000be90 <at_ble_event_get+0x3f0>
1000bccc:	d808      	bhi.n	1000bce0 <at_ble_event_get+0x240>
1000bcce:	484b      	ldr	r0, [pc, #300]	; (1000bdfc <at_ble_event_get+0x35c>)
1000bcd0:	4283      	cmp	r3, r0
1000bcd2:	d100      	bne.n	1000bcd6 <at_ble_event_get+0x236>
1000bcd4:	e11a      	b.n	1000bf0c <at_ble_event_get+0x46c>
1000bcd6:	484a      	ldr	r0, [pc, #296]	; (1000be00 <at_ble_event_get+0x360>)
1000bcd8:	4283      	cmp	r3, r0
1000bcda:	d100      	bne.n	1000bcde <at_ble_event_get+0x23e>
1000bcdc:	e0dd      	b.n	1000be9a <at_ble_event_get+0x3fa>
1000bcde:	e03a      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bce0:	4848      	ldr	r0, [pc, #288]	; (1000be04 <at_ble_event_get+0x364>)
1000bce2:	4283      	cmp	r3, r0
1000bce4:	d100      	bne.n	1000bce8 <at_ble_event_get+0x248>
1000bce6:	e0dc      	b.n	1000bea2 <at_ble_event_get+0x402>
1000bce8:	4847      	ldr	r0, [pc, #284]	; (1000be08 <at_ble_event_get+0x368>)
1000bcea:	4283      	cmp	r3, r0
1000bcec:	d100      	bne.n	1000bcf0 <at_ble_event_get+0x250>
1000bcee:	e0de      	b.n	1000beae <at_ble_event_get+0x40e>
1000bcf0:	e031      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bcf2:	4846      	ldr	r0, [pc, #280]	; (1000be0c <at_ble_event_get+0x36c>)
1000bcf4:	4283      	cmp	r3, r0
1000bcf6:	d100      	bne.n	1000bcfa <at_ble_event_get+0x25a>
1000bcf8:	e0f6      	b.n	1000bee8 <at_ble_event_get+0x448>
1000bcfa:	d816      	bhi.n	1000bd2a <at_ble_event_get+0x28a>
1000bcfc:	4844      	ldr	r0, [pc, #272]	; (1000be10 <at_ble_event_get+0x370>)
1000bcfe:	4283      	cmp	r3, r0
1000bd00:	d100      	bne.n	1000bd04 <at_ble_event_get+0x264>
1000bd02:	e0f7      	b.n	1000bef4 <at_ble_event_get+0x454>
1000bd04:	d808      	bhi.n	1000bd18 <at_ble_event_get+0x278>
1000bd06:	4843      	ldr	r0, [pc, #268]	; (1000be14 <at_ble_event_get+0x374>)
1000bd08:	4283      	cmp	r3, r0
1000bd0a:	d100      	bne.n	1000bd0e <at_ble_event_get+0x26e>
1000bd0c:	e0e0      	b.n	1000bed0 <at_ble_event_get+0x430>
1000bd0e:	4842      	ldr	r0, [pc, #264]	; (1000be18 <at_ble_event_get+0x378>)
1000bd10:	4283      	cmp	r3, r0
1000bd12:	d100      	bne.n	1000bd16 <at_ble_event_get+0x276>
1000bd14:	e0b0      	b.n	1000be78 <at_ble_event_get+0x3d8>
1000bd16:	e01e      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bd18:	4a40      	ldr	r2, [pc, #256]	; (1000be1c <at_ble_event_get+0x37c>)
1000bd1a:	4293      	cmp	r3, r2
1000bd1c:	d100      	bne.n	1000bd20 <at_ble_event_get+0x280>
1000bd1e:	e0dd      	b.n	1000bedc <at_ble_event_get+0x43c>
1000bd20:	4a3f      	ldr	r2, [pc, #252]	; (1000be20 <at_ble_event_get+0x380>)
1000bd22:	4293      	cmp	r3, r2
1000bd24:	d100      	bne.n	1000bd28 <at_ble_event_get+0x288>
1000bd26:	e0eb      	b.n	1000bf00 <at_ble_event_get+0x460>
1000bd28:	e015      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bd2a:	483e      	ldr	r0, [pc, #248]	; (1000be24 <at_ble_event_get+0x384>)
1000bd2c:	4283      	cmp	r3, r0
1000bd2e:	d100      	bne.n	1000bd32 <at_ble_event_get+0x292>
1000bd30:	e158      	b.n	1000bfe4 <at_ble_event_get+0x544>
1000bd32:	d808      	bhi.n	1000bd46 <at_ble_event_get+0x2a6>
1000bd34:	483c      	ldr	r0, [pc, #240]	; (1000be28 <at_ble_event_get+0x388>)
1000bd36:	4283      	cmp	r3, r0
1000bd38:	d100      	bne.n	1000bd3c <at_ble_event_get+0x29c>
1000bd3a:	e147      	b.n	1000bfcc <at_ble_event_get+0x52c>
1000bd3c:	483b      	ldr	r0, [pc, #236]	; (1000be2c <at_ble_event_get+0x38c>)
1000bd3e:	4283      	cmp	r3, r0
1000bd40:	d100      	bne.n	1000bd44 <at_ble_event_get+0x2a4>
1000bd42:	e149      	b.n	1000bfd8 <at_ble_event_get+0x538>
1000bd44:	e007      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000bd46:	483a      	ldr	r0, [pc, #232]	; (1000be30 <at_ble_event_get+0x390>)
1000bd48:	4283      	cmp	r3, r0
1000bd4a:	d100      	bne.n	1000bd4e <at_ble_event_get+0x2ae>
1000bd4c:	e150      	b.n	1000bff0 <at_ble_event_get+0x550>
1000bd4e:	4839      	ldr	r0, [pc, #228]	; (1000be34 <at_ble_event_get+0x394>)
1000bd50:	4283      	cmp	r3, r0
1000bd52:	d100      	bne.n	1000bd56 <at_ble_event_get+0x2b6>
1000bd54:	e152      	b.n	1000bffc <at_ble_event_get+0x55c>
1000bd56:	2400      	movs	r4, #0
1000bd58:	e155      	b.n	1000c006 <at_ble_event_get+0x566>
1000bd5a:	1c08      	adds	r0, r1, #0
1000bd5c:	4b36      	ldr	r3, [pc, #216]	; (1000be38 <at_ble_event_get+0x398>)
1000bd5e:	1c29      	adds	r1, r5, #0
1000bd60:	e07d      	b.n	1000be5e <at_ble_event_get+0x3be>
1000bd62:	1c08      	adds	r0, r1, #0
1000bd64:	4b35      	ldr	r3, [pc, #212]	; (1000be3c <at_ble_event_get+0x39c>)
1000bd66:	1c29      	adds	r1, r5, #0
1000bd68:	4798      	blx	r3
1000bd6a:	2404      	movs	r4, #4
1000bd6c:	e14b      	b.n	1000c006 <at_ble_event_get+0x566>
1000bd6e:	46c0      	nop			; (mov r8, r8)
1000bd70:	1000cd61 	.word	0x1000cd61
1000bd74:	10011f98 	.word	0x10011f98
1000bd78:	1000ac59 	.word	0x1000ac59
1000bd7c:	10011f9c 	.word	0x10011f9c
1000bd80:	0000ffff 	.word	0x0000ffff
1000bd84:	0000fffe 	.word	0x0000fffe
1000bd88:	1000cd63 	.word	0x1000cd63
1000bd8c:	0000201e 	.word	0x0000201e
1000bd90:	0000201d 	.word	0x0000201d
1000bd94:	00000c03 	.word	0x00000c03
1000bd98:	0000201f 	.word	0x0000201f
1000bd9c:	00000d1c 	.word	0x00000d1c
1000bda0:	00000c0c 	.word	0x00000c0c
1000bda4:	00000c02 	.word	0x00000c02
1000bda8:	00000a02 	.word	0x00000a02
1000bdac:	00000a03 	.word	0x00000a03
1000bdb0:	00000c06 	.word	0x00000c06
1000bdb4:	00000c04 	.word	0x00000c04
1000bdb8:	00000c05 	.word	0x00000c05
1000bdbc:	00000c07 	.word	0x00000c07
1000bdc0:	00000c09 	.word	0x00000c09
1000bdc4:	00000c17 	.word	0x00000c17
1000bdc8:	00000c12 	.word	0x00000c12
1000bdcc:	00000c0d 	.word	0x00000c0d
1000bdd0:	00000c13 	.word	0x00000c13
1000bdd4:	00000c15 	.word	0x00000c15
1000bdd8:	00000d08 	.word	0x00000d08
1000bddc:	00000d01 	.word	0x00000d01
1000bde0:	00000d15 	.word	0x00000d15
1000bde4:	00000e1b 	.word	0x00000e1b
1000bde8:	00000e0f 	.word	0x00000e0f
1000bdec:	00000e03 	.word	0x00000e03
1000bdf0:	00000e06 	.word	0x00000e06
1000bdf4:	00000e0a 	.word	0x00000e0a
1000bdf8:	00000e15 	.word	0x00000e15
1000bdfc:	00000e11 	.word	0x00000e11
1000be00:	00000e13 	.word	0x00000e13
1000be04:	00000e17 	.word	0x00000e17
1000be08:	00000e19 	.word	0x00000e19
1000be0c:	00000e27 	.word	0x00000e27
1000be10:	00000e21 	.word	0x00000e21
1000be14:	00000e1c 	.word	0x00000e1c
1000be18:	00000e1d 	.word	0x00000e1d
1000be1c:	00000e22 	.word	0x00000e22
1000be20:	00000e25 	.word	0x00000e25
1000be24:	00001b05 	.word	0x00001b05
1000be28:	00001b01 	.word	0x00001b01
1000be2c:	00001b03 	.word	0x00001b03
1000be30:	00001b06 	.word	0x00001b06
1000be34:	00001b08 	.word	0x00001b08
1000be38:	1000db8d 	.word	0x1000db8d
1000be3c:	1000db71 	.word	0x1000db71
1000be40:	1c08      	adds	r0, r1, #0
1000be42:	4b79      	ldr	r3, [pc, #484]	; (1000c028 <at_ble_event_get+0x588>)
1000be44:	1c29      	adds	r1, r5, #0
1000be46:	4798      	blx	r3
1000be48:	2401      	movs	r4, #1
1000be4a:	e0dc      	b.n	1000c006 <at_ble_event_get+0x566>
1000be4c:	1c08      	adds	r0, r1, #0
1000be4e:	4b77      	ldr	r3, [pc, #476]	; (1000c02c <at_ble_event_get+0x58c>)
1000be50:	1c29      	adds	r1, r5, #0
1000be52:	4798      	blx	r3
1000be54:	240f      	movs	r4, #15
1000be56:	e0d6      	b.n	1000c006 <at_ble_event_get+0x566>
1000be58:	1c08      	adds	r0, r1, #0
1000be5a:	1c29      	adds	r1, r5, #0
1000be5c:	4b74      	ldr	r3, [pc, #464]	; (1000c030 <at_ble_event_get+0x590>)
1000be5e:	4798      	blx	r3
1000be60:	1c04      	adds	r4, r0, #0
1000be62:	e0d0      	b.n	1000c006 <at_ble_event_get+0x566>
1000be64:	1c10      	adds	r0, r2, #0
1000be66:	4b73      	ldr	r3, [pc, #460]	; (1000c034 <at_ble_event_get+0x594>)
1000be68:	1c2a      	adds	r2, r5, #0
1000be6a:	e014      	b.n	1000be96 <at_ble_event_get+0x3f6>
1000be6c:	1c10      	adds	r0, r2, #0
1000be6e:	4b72      	ldr	r3, [pc, #456]	; (1000c038 <at_ble_event_get+0x598>)
1000be70:	1c2a      	adds	r2, r5, #0
1000be72:	4798      	blx	r3
1000be74:	2411      	movs	r4, #17
1000be76:	e0c6      	b.n	1000c006 <at_ble_event_get+0x566>
1000be78:	1c10      	adds	r0, r2, #0
1000be7a:	4b70      	ldr	r3, [pc, #448]	; (1000c03c <at_ble_event_get+0x59c>)
1000be7c:	1c2a      	adds	r2, r5, #0
1000be7e:	4798      	blx	r3
1000be80:	2412      	movs	r4, #18
1000be82:	e0c0      	b.n	1000c006 <at_ble_event_get+0x566>
1000be84:	1c08      	adds	r0, r1, #0
1000be86:	4b6e      	ldr	r3, [pc, #440]	; (1000c040 <at_ble_event_get+0x5a0>)
1000be88:	1c29      	adds	r1, r5, #0
1000be8a:	4798      	blx	r3
1000be8c:	2406      	movs	r4, #6
1000be8e:	e0ba      	b.n	1000c006 <at_ble_event_get+0x566>
1000be90:	1c10      	adds	r0, r2, #0
1000be92:	1c2a      	adds	r2, r5, #0
1000be94:	4b6b      	ldr	r3, [pc, #428]	; (1000c044 <at_ble_event_get+0x5a4>)
1000be96:	4798      	blx	r3
1000be98:	e7e2      	b.n	1000be60 <at_ble_event_get+0x3c0>
1000be9a:	1c10      	adds	r0, r2, #0
1000be9c:	4b6a      	ldr	r3, [pc, #424]	; (1000c048 <at_ble_event_get+0x5a8>)
1000be9e:	1c2a      	adds	r2, r5, #0
1000bea0:	e7f9      	b.n	1000be96 <at_ble_event_get+0x3f6>
1000bea2:	1c10      	adds	r0, r2, #0
1000bea4:	4b69      	ldr	r3, [pc, #420]	; (1000c04c <at_ble_event_get+0x5ac>)
1000bea6:	1c2a      	adds	r2, r5, #0
1000bea8:	4798      	blx	r3
1000beaa:	240d      	movs	r4, #13
1000beac:	e0ab      	b.n	1000c006 <at_ble_event_get+0x566>
1000beae:	1c10      	adds	r0, r2, #0
1000beb0:	4b67      	ldr	r3, [pc, #412]	; (1000c050 <at_ble_event_get+0x5b0>)
1000beb2:	1c2a      	adds	r2, r5, #0
1000beb4:	4798      	blx	r3
1000beb6:	240e      	movs	r4, #14
1000beb8:	e0a5      	b.n	1000c006 <at_ble_event_get+0x566>
1000beba:	1c10      	adds	r0, r2, #0
1000bebc:	4b65      	ldr	r3, [pc, #404]	; (1000c054 <at_ble_event_get+0x5b4>)
1000bebe:	1c2a      	adds	r2, r5, #0
1000bec0:	4798      	blx	r3
1000bec2:	e075      	b.n	1000bfb0 <at_ble_event_get+0x510>
1000bec4:	1c10      	adds	r0, r2, #0
1000bec6:	4b64      	ldr	r3, [pc, #400]	; (1000c058 <at_ble_event_get+0x5b8>)
1000bec8:	1c2a      	adds	r2, r5, #0
1000beca:	4798      	blx	r3
1000becc:	240b      	movs	r4, #11
1000bece:	e09a      	b.n	1000c006 <at_ble_event_get+0x566>
1000bed0:	1c10      	adds	r0, r2, #0
1000bed2:	4b62      	ldr	r3, [pc, #392]	; (1000c05c <at_ble_event_get+0x5bc>)
1000bed4:	1c2a      	adds	r2, r5, #0
1000bed6:	4798      	blx	r3
1000bed8:	2410      	movs	r4, #16
1000beda:	e094      	b.n	1000c006 <at_ble_event_get+0x566>
1000bedc:	1c08      	adds	r0, r1, #0
1000bede:	4b60      	ldr	r3, [pc, #384]	; (1000c060 <at_ble_event_get+0x5c0>)
1000bee0:	1c29      	adds	r1, r5, #0
1000bee2:	4798      	blx	r3
1000bee4:	2428      	movs	r4, #40	; 0x28
1000bee6:	e08e      	b.n	1000c006 <at_ble_event_get+0x566>
1000bee8:	1c08      	adds	r0, r1, #0
1000beea:	4b5e      	ldr	r3, [pc, #376]	; (1000c064 <at_ble_event_get+0x5c4>)
1000beec:	1c29      	adds	r1, r5, #0
1000beee:	4798      	blx	r3
1000bef0:	2429      	movs	r4, #41	; 0x29
1000bef2:	e088      	b.n	1000c006 <at_ble_event_get+0x566>
1000bef4:	1c08      	adds	r0, r1, #0
1000bef6:	4b5c      	ldr	r3, [pc, #368]	; (1000c068 <at_ble_event_get+0x5c8>)
1000bef8:	1c29      	adds	r1, r5, #0
1000befa:	4798      	blx	r3
1000befc:	2427      	movs	r4, #39	; 0x27
1000befe:	e082      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf00:	1c08      	adds	r0, r1, #0
1000bf02:	4b5a      	ldr	r3, [pc, #360]	; (1000c06c <at_ble_event_get+0x5cc>)
1000bf04:	1c29      	adds	r1, r5, #0
1000bf06:	4798      	blx	r3
1000bf08:	242a      	movs	r4, #42	; 0x2a
1000bf0a:	e07c      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf0c:	1c10      	adds	r0, r2, #0
1000bf0e:	4b58      	ldr	r3, [pc, #352]	; (1000c070 <at_ble_event_get+0x5d0>)
1000bf10:	1c2a      	adds	r2, r5, #0
1000bf12:	e7c0      	b.n	1000be96 <at_ble_event_get+0x3f6>
1000bf14:	1c10      	adds	r0, r2, #0
1000bf16:	4b57      	ldr	r3, [pc, #348]	; (1000c074 <at_ble_event_get+0x5d4>)
1000bf18:	1c2a      	adds	r2, r5, #0
1000bf1a:	e7bc      	b.n	1000be96 <at_ble_event_get+0x3f6>
1000bf1c:	1c08      	adds	r0, r1, #0
1000bf1e:	4b56      	ldr	r3, [pc, #344]	; (1000c078 <at_ble_event_get+0x5d8>)
1000bf20:	1c29      	adds	r1, r5, #0
1000bf22:	4798      	blx	r3
1000bf24:	242b      	movs	r4, #43	; 0x2b
1000bf26:	e06e      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf28:	1c08      	adds	r0, r1, #0
1000bf2a:	4b54      	ldr	r3, [pc, #336]	; (1000c07c <at_ble_event_get+0x5dc>)
1000bf2c:	1c29      	adds	r1, r5, #0
1000bf2e:	4798      	blx	r3
1000bf30:	242c      	movs	r4, #44	; 0x2c
1000bf32:	e068      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf34:	1c10      	adds	r0, r2, #0
1000bf36:	4b52      	ldr	r3, [pc, #328]	; (1000c080 <at_ble_event_get+0x5e0>)
1000bf38:	1c2a      	adds	r2, r5, #0
1000bf3a:	4798      	blx	r3
1000bf3c:	2413      	movs	r4, #19
1000bf3e:	e062      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf40:	1c10      	adds	r0, r2, #0
1000bf42:	4b50      	ldr	r3, [pc, #320]	; (1000c084 <at_ble_event_get+0x5e4>)
1000bf44:	1c2a      	adds	r2, r5, #0
1000bf46:	4798      	blx	r3
1000bf48:	2414      	movs	r4, #20
1000bf4a:	e05c      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf4c:	1c10      	adds	r0, r2, #0
1000bf4e:	4b4e      	ldr	r3, [pc, #312]	; (1000c088 <at_ble_event_get+0x5e8>)
1000bf50:	1c2a      	adds	r2, r5, #0
1000bf52:	4798      	blx	r3
1000bf54:	2415      	movs	r4, #21
1000bf56:	e056      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf58:	1c10      	adds	r0, r2, #0
1000bf5a:	4b4c      	ldr	r3, [pc, #304]	; (1000c08c <at_ble_event_get+0x5ec>)
1000bf5c:	1c2a      	adds	r2, r5, #0
1000bf5e:	4798      	blx	r3
1000bf60:	2416      	movs	r4, #22
1000bf62:	e050      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf64:	1c10      	adds	r0, r2, #0
1000bf66:	4b4a      	ldr	r3, [pc, #296]	; (1000c090 <at_ble_event_get+0x5f0>)
1000bf68:	1c2a      	adds	r2, r5, #0
1000bf6a:	e794      	b.n	1000be96 <at_ble_event_get+0x3f6>
1000bf6c:	1c10      	adds	r0, r2, #0
1000bf6e:	4b48      	ldr	r3, [pc, #288]	; (1000c090 <at_ble_event_get+0x5f0>)
1000bf70:	1c2a      	adds	r2, r5, #0
1000bf72:	4798      	blx	r3
1000bf74:	88a9      	ldrh	r1, [r5, #4]
1000bf76:	1c04      	adds	r4, r0, #0
1000bf78:	4b46      	ldr	r3, [pc, #280]	; (1000c094 <at_ble_event_get+0x5f4>)
1000bf7a:	8828      	ldrh	r0, [r5, #0]
1000bf7c:	4798      	blx	r3
1000bf7e:	e042      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf80:	1c10      	adds	r0, r2, #0
1000bf82:	4b45      	ldr	r3, [pc, #276]	; (1000c098 <at_ble_event_get+0x5f8>)
1000bf84:	1c2a      	adds	r2, r5, #0
1000bf86:	4798      	blx	r3
1000bf88:	2423      	movs	r4, #35	; 0x23
1000bf8a:	e03c      	b.n	1000c006 <at_ble_event_get+0x566>
1000bf8c:	1c10      	adds	r0, r2, #0
1000bf8e:	4b43      	ldr	r3, [pc, #268]	; (1000c09c <at_ble_event_get+0x5fc>)
1000bf90:	1c2a      	adds	r2, r5, #0
1000bf92:	e780      	b.n	1000be96 <at_ble_event_get+0x3f6>
1000bf94:	0a12      	lsrs	r2, r2, #8
1000bf96:	1c08      	adds	r0, r1, #0
1000bf98:	802a      	strh	r2, [r5, #0]
1000bf9a:	1c29      	adds	r1, r5, #0
1000bf9c:	4b40      	ldr	r3, [pc, #256]	; (1000c0a0 <at_ble_event_get+0x600>)
1000bf9e:	e75e      	b.n	1000be5e <at_ble_event_get+0x3be>
1000bfa0:	1c10      	adds	r0, r2, #0
1000bfa2:	4b40      	ldr	r3, [pc, #256]	; (1000c0a4 <at_ble_event_get+0x604>)
1000bfa4:	1c2a      	adds	r2, r5, #0
1000bfa6:	e776      	b.n	1000be96 <at_ble_event_get+0x3f6>
1000bfa8:	1c08      	adds	r0, r1, #0
1000bfaa:	4b3f      	ldr	r3, [pc, #252]	; (1000c0a8 <at_ble_event_get+0x608>)
1000bfac:	1c29      	adds	r1, r5, #0
1000bfae:	4798      	blx	r3
1000bfb0:	243b      	movs	r4, #59	; 0x3b
1000bfb2:	e028      	b.n	1000c006 <at_ble_event_get+0x566>
1000bfb4:	1c10      	adds	r0, r2, #0
1000bfb6:	4b3d      	ldr	r3, [pc, #244]	; (1000c0ac <at_ble_event_get+0x60c>)
1000bfb8:	1c2a      	adds	r2, r5, #0
1000bfba:	4798      	blx	r3
1000bfbc:	2418      	movs	r4, #24
1000bfbe:	e022      	b.n	1000c006 <at_ble_event_get+0x566>
1000bfc0:	1c10      	adds	r0, r2, #0
1000bfc2:	4b3b      	ldr	r3, [pc, #236]	; (1000c0b0 <at_ble_event_get+0x610>)
1000bfc4:	1c2a      	adds	r2, r5, #0
1000bfc6:	4798      	blx	r3
1000bfc8:	2420      	movs	r4, #32
1000bfca:	e01c      	b.n	1000c006 <at_ble_event_get+0x566>
1000bfcc:	1c10      	adds	r0, r2, #0
1000bfce:	4b39      	ldr	r3, [pc, #228]	; (1000c0b4 <at_ble_event_get+0x614>)
1000bfd0:	1c2a      	adds	r2, r5, #0
1000bfd2:	4798      	blx	r3
1000bfd4:	2433      	movs	r4, #51	; 0x33
1000bfd6:	e016      	b.n	1000c006 <at_ble_event_get+0x566>
1000bfd8:	1c10      	adds	r0, r2, #0
1000bfda:	4b37      	ldr	r3, [pc, #220]	; (1000c0b8 <at_ble_event_get+0x618>)
1000bfdc:	1c2a      	adds	r2, r5, #0
1000bfde:	4798      	blx	r3
1000bfe0:	2430      	movs	r4, #48	; 0x30
1000bfe2:	e010      	b.n	1000c006 <at_ble_event_get+0x566>
1000bfe4:	1c10      	adds	r0, r2, #0
1000bfe6:	4b35      	ldr	r3, [pc, #212]	; (1000c0bc <at_ble_event_get+0x61c>)
1000bfe8:	1c2a      	adds	r2, r5, #0
1000bfea:	4798      	blx	r3
1000bfec:	2434      	movs	r4, #52	; 0x34
1000bfee:	e00a      	b.n	1000c006 <at_ble_event_get+0x566>
1000bff0:	1c10      	adds	r0, r2, #0
1000bff2:	4b33      	ldr	r3, [pc, #204]	; (1000c0c0 <at_ble_event_get+0x620>)
1000bff4:	1c2a      	adds	r2, r5, #0
1000bff6:	4798      	blx	r3
1000bff8:	2435      	movs	r4, #53	; 0x35
1000bffa:	e004      	b.n	1000c006 <at_ble_event_get+0x566>
1000bffc:	1c10      	adds	r0, r2, #0
1000bffe:	4b31      	ldr	r3, [pc, #196]	; (1000c0c4 <at_ble_event_get+0x624>)
1000c000:	1c2a      	adds	r2, r5, #0
1000c002:	4798      	blx	r3
1000c004:	2432      	movs	r4, #50	; 0x32
1000c006:	9b01      	ldr	r3, [sp, #4]
1000c008:	701c      	strb	r4, [r3, #0]
1000c00a:	2400      	movs	r4, #0
1000c00c:	e59c      	b.n	1000bb48 <at_ble_event_get+0xa8>
1000c00e:	24d0      	movs	r4, #208	; 0xd0
1000c010:	e59a      	b.n	1000bb48 <at_ble_event_get+0xa8>
1000c012:	2abb      	cmp	r2, #187	; 0xbb
1000c014:	d000      	beq.n	1000c018 <at_ble_event_get+0x578>
1000c016:	e69e      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000c018:	e7f5      	b.n	1000c006 <at_ble_event_get+0x566>
1000c01a:	2c00      	cmp	r4, #0
1000c01c:	d000      	beq.n	1000c020 <at_ble_event_get+0x580>
1000c01e:	e593      	b.n	1000bb48 <at_ble_event_get+0xa8>
1000c020:	e699      	b.n	1000bd56 <at_ble_event_get+0x2b6>
1000c022:	1c20      	adds	r0, r4, #0
1000c024:	b005      	add	sp, #20
1000c026:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c028:	1000dd85 	.word	0x1000dd85
1000c02c:	1000df91 	.word	0x1000df91
1000c030:	1000dfb5 	.word	0x1000dfb5
1000c034:	1000cf05 	.word	0x1000cf05
1000c038:	1000d785 	.word	0x1000d785
1000c03c:	1000d801 	.word	0x1000d801
1000c040:	1000d1bd 	.word	0x1000d1bd
1000c044:	1000d259 	.word	0x1000d259
1000c048:	1000d331 	.word	0x1000d331
1000c04c:	1000d5b9 	.word	0x1000d5b9
1000c050:	1000d659 	.word	0x1000d659
1000c054:	1000d711 	.word	0x1000d711
1000c058:	1000d739 	.word	0x1000d739
1000c05c:	1000d74f 	.word	0x1000d74f
1000c060:	1000d819 	.word	0x1000d819
1000c064:	1000d847 	.word	0x1000d847
1000c068:	1000d85d 	.word	0x1000d85d
1000c06c:	1000d887 	.word	0x1000d887
1000c070:	1000d6b5 	.word	0x1000d6b5
1000c074:	1000d6df 	.word	0x1000d6df
1000c078:	1000c95d 	.word	0x1000c95d
1000c07c:	1000c989 	.word	0x1000c989
1000c080:	1000e285 	.word	0x1000e285
1000c084:	1000e2c1 	.word	0x1000e2c1
1000c088:	1000e309 	.word	0x1000e309
1000c08c:	1000e34d 	.word	0x1000e34d
1000c090:	1000e381 	.word	0x1000e381
1000c094:	1000e1ad 	.word	0x1000e1ad
1000c098:	1000e44d 	.word	0x1000e44d
1000c09c:	1000e3d5 	.word	0x1000e3d5
1000c0a0:	1000c8b5 	.word	0x1000c8b5
1000c0a4:	1000c921 	.word	0x1000c921
1000c0a8:	1000c8e5 	.word	0x1000c8e5
1000c0ac:	1000e45d 	.word	0x1000e45d
1000c0b0:	1000e49d 	.word	0x1000e49d
1000c0b4:	1000e5e9 	.word	0x1000e5e9
1000c0b8:	1000e5f3 	.word	0x1000e5f3
1000c0bc:	1000e5f9 	.word	0x1000e5f9
1000c0c0:	1000e5ff 	.word	0x1000e5ff
1000c0c4:	1000e60b 	.word	0x1000e60b

1000c0c8 <internal_event_flush>:
1000c0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c0ca:	490e      	ldr	r1, [pc, #56]	; (1000c104 <internal_event_flush+0x3c>)
1000c0cc:	2400      	movs	r4, #0
1000c0ce:	680b      	ldr	r3, [r1, #0]
1000c0d0:	1c0f      	adds	r7, r1, #0
1000c0d2:	1c1e      	adds	r6, r3, #0
1000c0d4:	4a0c      	ldr	r2, [pc, #48]	; (1000c108 <internal_event_flush+0x40>)
1000c0d6:	6815      	ldr	r5, [r2, #0]
1000c0d8:	9201      	str	r2, [sp, #4]
1000c0da:	2b00      	cmp	r3, #0
1000c0dc:	d00e      	beq.n	1000c0fc <internal_event_flush+0x34>
1000c0de:	889a      	ldrh	r2, [r3, #4]
1000c0e0:	6819      	ldr	r1, [r3, #0]
1000c0e2:	4282      	cmp	r2, r0
1000c0e4:	d107      	bne.n	1000c0f6 <internal_event_flush+0x2e>
1000c0e6:	2c00      	cmp	r4, #0
1000c0e8:	d001      	beq.n	1000c0ee <internal_event_flush+0x26>
1000c0ea:	6021      	str	r1, [r4, #0]
1000c0ec:	e000      	b.n	1000c0f0 <internal_event_flush+0x28>
1000c0ee:	1c0e      	adds	r6, r1, #0
1000c0f0:	601d      	str	r5, [r3, #0]
1000c0f2:	1c1d      	adds	r5, r3, #0
1000c0f4:	1c23      	adds	r3, r4, #0
1000c0f6:	1c1c      	adds	r4, r3, #0
1000c0f8:	1c0b      	adds	r3, r1, #0
1000c0fa:	e7ee      	b.n	1000c0da <internal_event_flush+0x12>
1000c0fc:	9b01      	ldr	r3, [sp, #4]
1000c0fe:	603e      	str	r6, [r7, #0]
1000c100:	601d      	str	r5, [r3, #0]
1000c102:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c104:	10011f98 	.word	0x10011f98
1000c108:	10011f9c 	.word	0x10011f9c

1000c10c <internal_conn_flush>:
1000c10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c10e:	4a12      	ldr	r2, [pc, #72]	; (1000c158 <internal_conn_flush+0x4c>)
1000c110:	9000      	str	r0, [sp, #0]
1000c112:	6813      	ldr	r3, [r2, #0]
1000c114:	4811      	ldr	r0, [pc, #68]	; (1000c15c <internal_conn_flush+0x50>)
1000c116:	1c1f      	adds	r7, r3, #0
1000c118:	2100      	movs	r1, #0
1000c11a:	4684      	mov	ip, r0
1000c11c:	6804      	ldr	r4, [r0, #0]
1000c11e:	9201      	str	r2, [sp, #4]
1000c120:	2b00      	cmp	r3, #0
1000c122:	d014      	beq.n	1000c14e <internal_conn_flush+0x42>
1000c124:	88d8      	ldrh	r0, [r3, #6]
1000c126:	9a00      	ldr	r2, [sp, #0]
1000c128:	681d      	ldr	r5, [r3, #0]
1000c12a:	0a06      	lsrs	r6, r0, #8
1000c12c:	4296      	cmp	r6, r2
1000c12e:	d10b      	bne.n	1000c148 <internal_conn_flush+0x3c>
1000c130:	26fd      	movs	r6, #253	; 0xfd
1000c132:	4006      	ands	r6, r0
1000c134:	2e0c      	cmp	r6, #12
1000c136:	d107      	bne.n	1000c148 <internal_conn_flush+0x3c>
1000c138:	2900      	cmp	r1, #0
1000c13a:	d001      	beq.n	1000c140 <internal_conn_flush+0x34>
1000c13c:	600d      	str	r5, [r1, #0]
1000c13e:	e000      	b.n	1000c142 <internal_conn_flush+0x36>
1000c140:	1c2f      	adds	r7, r5, #0
1000c142:	601c      	str	r4, [r3, #0]
1000c144:	1c1c      	adds	r4, r3, #0
1000c146:	1c0b      	adds	r3, r1, #0
1000c148:	1c19      	adds	r1, r3, #0
1000c14a:	1c2b      	adds	r3, r5, #0
1000c14c:	e7e8      	b.n	1000c120 <internal_conn_flush+0x14>
1000c14e:	9b01      	ldr	r3, [sp, #4]
1000c150:	601f      	str	r7, [r3, #0]
1000c152:	4663      	mov	r3, ip
1000c154:	601c      	str	r4, [r3, #0]
1000c156:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c158:	10011f98 	.word	0x10011f98
1000c15c:	10011f9c 	.word	0x10011f9c

1000c160 <at_ble_device_name_set>:
1000c160:	b530      	push	{r4, r5, lr}
1000c162:	23cf      	movs	r3, #207	; 0xcf
1000c164:	2800      	cmp	r0, #0
1000c166:	d010      	beq.n	1000c18a <at_ble_device_name_set+0x2a>
1000c168:	1e4a      	subs	r2, r1, #1
1000c16a:	2a1f      	cmp	r2, #31
1000c16c:	d80d      	bhi.n	1000c18a <at_ble_device_name_set+0x2a>
1000c16e:	4a08      	ldr	r2, [pc, #32]	; (1000c190 <at_ble_device_name_set+0x30>)
1000c170:	1c13      	adds	r3, r2, #0
1000c172:	33aa      	adds	r3, #170	; 0xaa
1000c174:	8019      	strh	r1, [r3, #0]
1000c176:	2300      	movs	r3, #0
1000c178:	1c1c      	adds	r4, r3, #0
1000c17a:	5cc5      	ldrb	r5, [r0, r3]
1000c17c:	34ac      	adds	r4, #172	; 0xac
1000c17e:	3301      	adds	r3, #1
1000c180:	5515      	strb	r5, [r2, r4]
1000c182:	b2dc      	uxtb	r4, r3
1000c184:	428c      	cmp	r4, r1
1000c186:	d3f7      	bcc.n	1000c178 <at_ble_device_name_set+0x18>
1000c188:	2300      	movs	r3, #0
1000c18a:	1c18      	adds	r0, r3, #0
1000c18c:	bd30      	pop	{r4, r5, pc}
1000c18e:	46c0      	nop			; (mov r8, r8)
1000c190:	10012c8a 	.word	0x10012c8a

1000c194 <at_ble_addr_get>:
1000c194:	b510      	push	{r4, lr}
1000c196:	1c04      	adds	r4, r0, #0
1000c198:	20cf      	movs	r0, #207	; 0xcf
1000c19a:	2c00      	cmp	r4, #0
1000c19c:	d006      	beq.n	1000c1ac <at_ble_addr_get+0x18>
1000c19e:	4b04      	ldr	r3, [pc, #16]	; (1000c1b0 <at_ble_addr_get+0x1c>)
1000c1a0:	38ce      	subs	r0, #206	; 0xce
1000c1a2:	1c21      	adds	r1, r4, #0
1000c1a4:	4798      	blx	r3
1000c1a6:	4b03      	ldr	r3, [pc, #12]	; (1000c1b4 <at_ble_addr_get+0x20>)
1000c1a8:	791b      	ldrb	r3, [r3, #4]
1000c1aa:	7023      	strb	r3, [r4, #0]
1000c1ac:	bd10      	pop	{r4, pc}
1000c1ae:	46c0      	nop			; (mov r8, r8)
1000c1b0:	1000da21 	.word	0x1000da21
1000c1b4:	10012c8a 	.word	0x10012c8a

1000c1b8 <at_ble_set_dev_config>:
1000c1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c1ba:	7906      	ldrb	r6, [r0, #4]
1000c1bc:	b089      	sub	sp, #36	; 0x24
1000c1be:	25cf      	movs	r5, #207	; 0xcf
1000c1c0:	2e03      	cmp	r6, #3
1000c1c2:	d838      	bhi.n	1000c236 <at_ble_set_dev_config+0x7e>
1000c1c4:	7803      	ldrb	r3, [r0, #0]
1000c1c6:	3511      	adds	r5, #17
1000c1c8:	2b0f      	cmp	r3, #15
1000c1ca:	d834      	bhi.n	1000c236 <at_ble_set_dev_config+0x7e>
1000c1cc:	2380      	movs	r3, #128	; 0x80
1000c1ce:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c1d0:	3d11      	subs	r5, #17
1000c1d2:	009b      	lsls	r3, r3, #2
1000c1d4:	429f      	cmp	r7, r3
1000c1d6:	d82e      	bhi.n	1000c236 <at_ble_set_dev_config+0x7e>
1000c1d8:	7fc5      	ldrb	r5, [r0, #31]
1000c1da:	7f83      	ldrb	r3, [r0, #30]
1000c1dc:	01ad      	lsls	r5, r5, #6
1000c1de:	015b      	lsls	r3, r3, #5
1000c1e0:	431d      	orrs	r5, r3
1000c1e2:	7ec3      	ldrb	r3, [r0, #27]
1000c1e4:	431d      	orrs	r5, r3
1000c1e6:	7f43      	ldrb	r3, [r0, #29]
1000c1e8:	011b      	lsls	r3, r3, #4
1000c1ea:	431d      	orrs	r5, r3
1000c1ec:	7f03      	ldrb	r3, [r0, #28]
1000c1ee:	009b      	lsls	r3, r3, #2
1000c1f0:	431d      	orrs	r5, r3
1000c1f2:	4b12      	ldr	r3, [pc, #72]	; (1000c23c <at_ble_set_dev_config+0x84>)
1000c1f4:	b2ed      	uxtb	r5, r5
1000c1f6:	711e      	strb	r6, [r3, #4]
1000c1f8:	7903      	ldrb	r3, [r0, #4]
1000c1fa:	3b02      	subs	r3, #2
1000c1fc:	2b01      	cmp	r3, #1
1000c1fe:	d801      	bhi.n	1000c204 <at_ble_set_dev_config+0x4c>
1000c200:	2302      	movs	r3, #2
1000c202:	7103      	strb	r3, [r0, #4]
1000c204:	1c04      	adds	r4, r0, #0
1000c206:	1c23      	adds	r3, r4, #0
1000c208:	330b      	adds	r3, #11
1000c20a:	8861      	ldrh	r1, [r4, #2]
1000c20c:	9307      	str	r3, [sp, #28]
1000c20e:	7923      	ldrb	r3, [r4, #4]
1000c210:	7800      	ldrb	r0, [r0, #0]
1000c212:	9300      	str	r3, [sp, #0]
1000c214:	9501      	str	r5, [sp, #4]
1000c216:	8c25      	ldrh	r5, [r4, #32]
1000c218:	1d62      	adds	r2, r4, #5
1000c21a:	9502      	str	r5, [sp, #8]
1000c21c:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000c21e:	9b07      	ldr	r3, [sp, #28]
1000c220:	9503      	str	r5, [sp, #12]
1000c222:	9704      	str	r7, [sp, #16]
1000c224:	4d06      	ldr	r5, [pc, #24]	; (1000c240 <at_ble_set_dev_config+0x88>)
1000c226:	47a8      	blx	r5
1000c228:	7126      	strb	r6, [r4, #4]
1000c22a:	1c05      	adds	r5, r0, #0
1000c22c:	1c21      	adds	r1, r4, #0
1000c22e:	4803      	ldr	r0, [pc, #12]	; (1000c23c <at_ble_set_dev_config+0x84>)
1000c230:	2226      	movs	r2, #38	; 0x26
1000c232:	4b04      	ldr	r3, [pc, #16]	; (1000c244 <at_ble_set_dev_config+0x8c>)
1000c234:	4798      	blx	r3
1000c236:	1c28      	adds	r0, r5, #0
1000c238:	b009      	add	sp, #36	; 0x24
1000c23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c23c:	10012c8a 	.word	0x10012c8a
1000c240:	1000d919 	.word	0x1000d919
1000c244:	1000f7d7 	.word	0x1000f7d7

1000c248 <at_ble_init>:
1000c248:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c24a:	b087      	sub	sp, #28
1000c24c:	af03      	add	r7, sp, #12
1000c24e:	494d      	ldr	r1, [pc, #308]	; (1000c384 <at_ble_init+0x13c>)
1000c250:	1c04      	adds	r4, r0, #0
1000c252:	220b      	movs	r2, #11
1000c254:	4b4c      	ldr	r3, [pc, #304]	; (1000c388 <at_ble_init+0x140>)
1000c256:	1c38      	adds	r0, r7, #0
1000c258:	4798      	blx	r3
1000c25a:	2205      	movs	r2, #5
1000c25c:	4b4b      	ldr	r3, [pc, #300]	; (1000c38c <at_ble_init+0x144>)
1000c25e:	801a      	strh	r2, [r3, #0]
1000c260:	2300      	movs	r3, #0
1000c262:	4a4b      	ldr	r2, [pc, #300]	; (1000c390 <at_ble_init+0x148>)
1000c264:	6013      	str	r3, [r2, #0]
1000c266:	4a4b      	ldr	r2, [pc, #300]	; (1000c394 <at_ble_init+0x14c>)
1000c268:	7013      	strb	r3, [r2, #0]
1000c26a:	4a4b      	ldr	r2, [pc, #300]	; (1000c398 <at_ble_init+0x150>)
1000c26c:	7013      	strb	r3, [r2, #0]
1000c26e:	4b4b      	ldr	r3, [pc, #300]	; (1000c39c <at_ble_init+0x154>)
1000c270:	4798      	blx	r3
1000c272:	4b4b      	ldr	r3, [pc, #300]	; (1000c3a0 <at_ble_init+0x158>)
1000c274:	4798      	blx	r3
1000c276:	4b4b      	ldr	r3, [pc, #300]	; (1000c3a4 <at_ble_init+0x15c>)
1000c278:	4798      	blx	r3
1000c27a:	4b4b      	ldr	r3, [pc, #300]	; (1000c3a8 <at_ble_init+0x160>)
1000c27c:	4798      	blx	r3
1000c27e:	2c00      	cmp	r4, #0
1000c280:	d009      	beq.n	1000c296 <at_ble_init+0x4e>
1000c282:	6820      	ldr	r0, [r4, #0]
1000c284:	2800      	cmp	r0, #0
1000c286:	d006      	beq.n	1000c296 <at_ble_init+0x4e>
1000c288:	6861      	ldr	r1, [r4, #4]
1000c28a:	2900      	cmp	r1, #0
1000c28c:	d101      	bne.n	1000c292 <at_ble_init+0x4a>
1000c28e:	26e2      	movs	r6, #226	; 0xe2
1000c290:	e075      	b.n	1000c37e <at_ble_init+0x136>
1000c292:	4b46      	ldr	r3, [pc, #280]	; (1000c3ac <at_ble_init+0x164>)
1000c294:	4798      	blx	r3
1000c296:	4b46      	ldr	r3, [pc, #280]	; (1000c3b0 <at_ble_init+0x168>)
1000c298:	4798      	blx	r3
1000c29a:	2801      	cmp	r0, #1
1000c29c:	d8f7      	bhi.n	1000c28e <at_ble_init+0x46>
1000c29e:	4845      	ldr	r0, [pc, #276]	; (1000c3b4 <at_ble_init+0x16c>)
1000c2a0:	4b45      	ldr	r3, [pc, #276]	; (1000c3b8 <at_ble_init+0x170>)
1000c2a2:	4798      	blx	r3
1000c2a4:	2800      	cmp	r0, #0
1000c2a6:	d1f2      	bne.n	1000c28e <at_ble_init+0x46>
1000c2a8:	4b44      	ldr	r3, [pc, #272]	; (1000c3bc <at_ble_init+0x174>)
1000c2aa:	4798      	blx	r3
1000c2ac:	4b44      	ldr	r3, [pc, #272]	; (1000c3c0 <at_ble_init+0x178>)
1000c2ae:	4798      	blx	r3
1000c2b0:	466b      	mov	r3, sp
1000c2b2:	2201      	movs	r2, #1
1000c2b4:	1cdc      	adds	r4, r3, #3
1000c2b6:	1c20      	adds	r0, r4, #0
1000c2b8:	a901      	add	r1, sp, #4
1000c2ba:	4252      	negs	r2, r2
1000c2bc:	4b41      	ldr	r3, [pc, #260]	; (1000c3c4 <at_ble_init+0x17c>)
1000c2be:	4798      	blx	r3
1000c2c0:	2800      	cmp	r0, #0
1000c2c2:	d102      	bne.n	1000c2ca <at_ble_init+0x82>
1000c2c4:	7823      	ldrb	r3, [r4, #0]
1000c2c6:	2b39      	cmp	r3, #57	; 0x39
1000c2c8:	d1f2      	bne.n	1000c2b0 <at_ble_init+0x68>
1000c2ca:	4b3f      	ldr	r3, [pc, #252]	; (1000c3c8 <at_ble_init+0x180>)
1000c2cc:	4798      	blx	r3
1000c2ce:	1e06      	subs	r6, r0, #0
1000c2d0:	d155      	bne.n	1000c37e <at_ble_init+0x136>
1000c2d2:	1c03      	adds	r3, r0, #0
1000c2d4:	2101      	movs	r1, #1
1000c2d6:	4a3d      	ldr	r2, [pc, #244]	; (1000c3cc <at_ble_init+0x184>)
1000c2d8:	4249      	negs	r1, r1
1000c2da:	189a      	adds	r2, r3, r2
1000c2dc:	3312      	adds	r3, #18
1000c2de:	8151      	strh	r1, [r2, #10]
1000c2e0:	2b90      	cmp	r3, #144	; 0x90
1000c2e2:	d1f7      	bne.n	1000c2d4 <at_ble_init+0x8c>
1000c2e4:	4c3a      	ldr	r4, [pc, #232]	; (1000c3d0 <at_ble_init+0x188>)
1000c2e6:	3b81      	subs	r3, #129	; 0x81
1000c2e8:	7023      	strb	r3, [r4, #0]
1000c2ea:	4b3a      	ldr	r3, [pc, #232]	; (1000c3d4 <at_ble_init+0x18c>)
1000c2ec:	4a3a      	ldr	r2, [pc, #232]	; (1000c3d8 <at_ble_init+0x190>)
1000c2ee:	8063      	strh	r3, [r4, #2]
1000c2f0:	2300      	movs	r3, #0
1000c2f2:	7123      	strb	r3, [r4, #4]
1000c2f4:	3301      	adds	r3, #1
1000c2f6:	1e58      	subs	r0, r3, #1
1000c2f8:	0119      	lsls	r1, r3, #4
1000c2fa:	4301      	orrs	r1, r0
1000c2fc:	3302      	adds	r3, #2
1000c2fe:	7011      	strb	r1, [r2, #0]
1000c300:	3201      	adds	r2, #1
1000c302:	2b21      	cmp	r3, #33	; 0x21
1000c304:	d1f7      	bne.n	1000c2f6 <at_ble_init+0xae>
1000c306:	33e0      	adds	r3, #224	; 0xe0
1000c308:	33ff      	adds	r3, #255	; 0xff
1000c30a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000c30c:	1c23      	adds	r3, r4, #0
1000c30e:	2500      	movs	r5, #0
1000c310:	3373      	adds	r3, #115	; 0x73
1000c312:	701d      	strb	r5, [r3, #0]
1000c314:	1c23      	adds	r3, r4, #0
1000c316:	3372      	adds	r3, #114	; 0x72
1000c318:	701d      	strb	r5, [r3, #0]
1000c31a:	1c23      	adds	r3, r4, #0
1000c31c:	3376      	adds	r3, #118	; 0x76
1000c31e:	701d      	strb	r5, [r3, #0]
1000c320:	1c23      	adds	r3, r4, #0
1000c322:	33cc      	adds	r3, #204	; 0xcc
1000c324:	801d      	strh	r5, [r3, #0]
1000c326:	1c22      	adds	r2, r4, #0
1000c328:	23a0      	movs	r3, #160	; 0xa0
1000c32a:	32d0      	adds	r2, #208	; 0xd0
1000c32c:	005b      	lsls	r3, r3, #1
1000c32e:	8013      	strh	r3, [r2, #0]
1000c330:	1c22      	adds	r2, r4, #0
1000c332:	32ce      	adds	r2, #206	; 0xce
1000c334:	8013      	strh	r3, [r2, #0]
1000c336:	1c23      	adds	r3, r4, #0
1000c338:	33d2      	adds	r3, #210	; 0xd2
1000c33a:	801d      	strh	r5, [r3, #0]
1000c33c:	22fa      	movs	r2, #250	; 0xfa
1000c33e:	1c23      	adds	r3, r4, #0
1000c340:	0052      	lsls	r2, r2, #1
1000c342:	33d4      	adds	r3, #212	; 0xd4
1000c344:	801a      	strh	r2, [r3, #0]
1000c346:	1c23      	adds	r3, r4, #0
1000c348:	33d6      	adds	r3, #214	; 0xd6
1000c34a:	701d      	strb	r5, [r3, #0]
1000c34c:	1c20      	adds	r0, r4, #0
1000c34e:	4b23      	ldr	r3, [pc, #140]	; (1000c3dc <at_ble_init+0x194>)
1000c350:	76e5      	strb	r5, [r4, #27]
1000c352:	7725      	strb	r5, [r4, #28]
1000c354:	7765      	strb	r5, [r4, #29]
1000c356:	77a5      	strb	r5, [r4, #30]
1000c358:	77e5      	strb	r5, [r4, #31]
1000c35a:	8425      	strh	r5, [r4, #32]
1000c35c:	8465      	strh	r5, [r4, #34]	; 0x22
1000c35e:	4798      	blx	r3
1000c360:	1c23      	adds	r3, r4, #0
1000c362:	2207      	movs	r2, #7
1000c364:	3374      	adds	r3, #116	; 0x74
1000c366:	701a      	strb	r2, [r3, #0]
1000c368:	1c23      	adds	r3, r4, #0
1000c36a:	3204      	adds	r2, #4
1000c36c:	33aa      	adds	r3, #170	; 0xaa
1000c36e:	801a      	strh	r2, [r3, #0]
1000c370:	1c2b      	adds	r3, r5, #0
1000c372:	5d7a      	ldrb	r2, [r7, r5]
1000c374:	33ac      	adds	r3, #172	; 0xac
1000c376:	3501      	adds	r5, #1
1000c378:	54e2      	strb	r2, [r4, r3]
1000c37a:	2d0b      	cmp	r5, #11
1000c37c:	d1f8      	bne.n	1000c370 <at_ble_init+0x128>
1000c37e:	1c30      	adds	r0, r6, #0
1000c380:	b007      	add	sp, #28
1000c382:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c384:	10011764 	.word	0x10011764
1000c388:	1000f7d7 	.word	0x1000f7d7
1000c38c:	10012bf8 	.word	0x10012bf8
1000c390:	10012040 	.word	0x10012040
1000c394:	10011fa8 	.word	0x10011fa8
1000c398:	1001189c 	.word	0x1001189c
1000c39c:	1000e4ad 	.word	0x1000e4ad
1000c3a0:	1000c639 	.word	0x1000c639
1000c3a4:	1000c739 	.word	0x1000c739
1000c3a8:	1000c951 	.word	0x1000c951
1000c3ac:	1000c76d 	.word	0x1000c76d
1000c3b0:	1000a995 	.word	0x1000a995
1000c3b4:	1000cc51 	.word	0x1000cc51
1000c3b8:	1000ab95 	.word	0x1000ab95
1000c3bc:	1000cce9 	.word	0x1000cce9
1000c3c0:	1000b9e1 	.word	0x1000b9e1
1000c3c4:	1000baa1 	.word	0x1000baa1
1000c3c8:	1000d8a9 	.word	0x1000d8a9
1000c3cc:	10012bfa 	.word	0x10012bfa
1000c3d0:	10012c8a 	.word	0x10012c8a
1000c3d4:	00003a98 	.word	0x00003a98
1000c3d8:	10012c95 	.word	0x10012c95
1000c3dc:	1000c1b9 	.word	0x1000c1b9

1000c3e0 <at_ble_addr_set>:
1000c3e0:	b538      	push	{r3, r4, r5, lr}
1000c3e2:	1c45      	adds	r5, r0, #1
1000c3e4:	1c03      	adds	r3, r0, #0
1000c3e6:	20cf      	movs	r0, #207	; 0xcf
1000c3e8:	2d00      	cmp	r5, #0
1000c3ea:	d018      	beq.n	1000c41e <at_ble_addr_set+0x3e>
1000c3ec:	781a      	ldrb	r2, [r3, #0]
1000c3ee:	2a03      	cmp	r2, #3
1000c3f0:	d815      	bhi.n	1000c41e <at_ble_addr_set+0x3e>
1000c3f2:	2a01      	cmp	r2, #1
1000c3f4:	d102      	bne.n	1000c3fc <at_ble_addr_set+0x1c>
1000c3f6:	785a      	ldrb	r2, [r3, #1]
1000c3f8:	2a00      	cmp	r2, #0
1000c3fa:	d010      	beq.n	1000c41e <at_ble_addr_set+0x3e>
1000c3fc:	1c1c      	adds	r4, r3, #0
1000c3fe:	1c29      	adds	r1, r5, #0
1000c400:	2206      	movs	r2, #6
1000c402:	4b07      	ldr	r3, [pc, #28]	; (1000c420 <at_ble_addr_set+0x40>)
1000c404:	4807      	ldr	r0, [pc, #28]	; (1000c424 <at_ble_addr_set+0x44>)
1000c406:	4798      	blx	r3
1000c408:	7823      	ldrb	r3, [r4, #0]
1000c40a:	4807      	ldr	r0, [pc, #28]	; (1000c428 <at_ble_addr_set+0x48>)
1000c40c:	7103      	strb	r3, [r0, #4]
1000c40e:	4b07      	ldr	r3, [pc, #28]	; (1000c42c <at_ble_addr_set+0x4c>)
1000c410:	4798      	blx	r3
1000c412:	7823      	ldrb	r3, [r4, #0]
1000c414:	2b00      	cmp	r3, #0
1000c416:	d102      	bne.n	1000c41e <at_ble_addr_set+0x3e>
1000c418:	1c28      	adds	r0, r5, #0
1000c41a:	4b05      	ldr	r3, [pc, #20]	; (1000c430 <at_ble_addr_set+0x50>)
1000c41c:	4798      	blx	r3
1000c41e:	bd38      	pop	{r3, r4, r5, pc}
1000c420:	1000f7d7 	.word	0x1000f7d7
1000c424:	10012c8f 	.word	0x10012c8f
1000c428:	10012c8a 	.word	0x10012c8a
1000c42c:	1000c1b9 	.word	0x1000c1b9
1000c430:	1000cd65 	.word	0x1000cd65

1000c434 <at_ble_scan_start>:
1000c434:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c436:	b08d      	sub	sp, #52	; 0x34
1000c438:	1c06      	adds	r6, r0, #0
1000c43a:	a812      	add	r0, sp, #72	; 0x48
1000c43c:	7807      	ldrb	r7, [r0, #0]
1000c43e:	a813      	add	r0, sp, #76	; 0x4c
1000c440:	7800      	ldrb	r0, [r0, #0]
1000c442:	9007      	str	r0, [sp, #28]
1000c444:	a814      	add	r0, sp, #80	; 0x50
1000c446:	7800      	ldrb	r0, [r0, #0]
1000c448:	9008      	str	r0, [sp, #32]
1000c44a:	20cf      	movs	r0, #207	; 0xcf
1000c44c:	2f02      	cmp	r7, #2
1000c44e:	d82e      	bhi.n	1000c4ae <at_ble_scan_start+0x7a>
1000c450:	42b1      	cmp	r1, r6
1000c452:	d82c      	bhi.n	1000c4ae <at_ble_scan_start+0x7a>
1000c454:	2b01      	cmp	r3, #1
1000c456:	d82a      	bhi.n	1000c4ae <at_ble_scan_start+0x7a>
1000c458:	1f0c      	subs	r4, r1, #4
1000c45a:	4d16      	ldr	r5, [pc, #88]	; (1000c4b4 <at_ble_scan_start+0x80>)
1000c45c:	b2a4      	uxth	r4, r4
1000c45e:	42ac      	cmp	r4, r5
1000c460:	d825      	bhi.n	1000c4ae <at_ble_scan_start+0x7a>
1000c462:	1f34      	subs	r4, r6, #4
1000c464:	b2a4      	uxth	r4, r4
1000c466:	42ac      	cmp	r4, r5
1000c468:	d821      	bhi.n	1000c4ae <at_ble_scan_start+0x7a>
1000c46a:	9c07      	ldr	r4, [sp, #28]
1000c46c:	2c00      	cmp	r4, #0
1000c46e:	d001      	beq.n	1000c474 <at_ble_scan_start+0x40>
1000c470:	2f02      	cmp	r7, #2
1000c472:	d11c      	bne.n	1000c4ae <at_ble_scan_start+0x7a>
1000c474:	1c1c      	adds	r4, r3, #0
1000c476:	4b10      	ldr	r3, [pc, #64]	; (1000c4b8 <at_ble_scan_start+0x84>)
1000c478:	1c0d      	adds	r5, r1, #0
1000c47a:	9209      	str	r2, [sp, #36]	; 0x24
1000c47c:	4798      	blx	r3
1000c47e:	4b0f      	ldr	r3, [pc, #60]	; (1000c4bc <at_ble_scan_start+0x88>)
1000c480:	1c01      	adds	r1, r0, #0
1000c482:	885a      	ldrh	r2, [r3, #2]
1000c484:	9b07      	ldr	r3, [sp, #28]
1000c486:	4260      	negs	r0, r4
1000c488:	4160      	adcs	r0, r4
1000c48a:	9303      	str	r3, [sp, #12]
1000c48c:	9b08      	ldr	r3, [sp, #32]
1000c48e:	9702      	str	r7, [sp, #8]
1000c490:	9304      	str	r3, [sp, #16]
1000c492:	2364      	movs	r3, #100	; 0x64
1000c494:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000c496:	ac04      	add	r4, sp, #16
1000c498:	435f      	muls	r7, r3
1000c49a:	3b4b      	subs	r3, #75	; 0x4b
1000c49c:	b2bf      	uxth	r7, r7
1000c49e:	3011      	adds	r0, #17
1000c4a0:	191b      	adds	r3, r3, r4
1000c4a2:	9600      	str	r6, [sp, #0]
1000c4a4:	9501      	str	r5, [sp, #4]
1000c4a6:	9705      	str	r7, [sp, #20]
1000c4a8:	4c05      	ldr	r4, [pc, #20]	; (1000c4c0 <at_ble_scan_start+0x8c>)
1000c4aa:	47a0      	blx	r4
1000c4ac:	2000      	movs	r0, #0
1000c4ae:	b00d      	add	sp, #52	; 0x34
1000c4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c4b2:	46c0      	nop			; (mov r8, r8)
1000c4b4:	00003ffc 	.word	0x00003ffc
1000c4b8:	1000dcd5 	.word	0x1000dcd5
1000c4bc:	10012c8a 	.word	0x10012c8a
1000c4c0:	1000dced 	.word	0x1000dced

1000c4c4 <at_ble_scan_stop>:
1000c4c4:	b510      	push	{r4, lr}
1000c4c6:	4b05      	ldr	r3, [pc, #20]	; (1000c4dc <at_ble_scan_stop+0x18>)
1000c4c8:	4798      	blx	r3
1000c4ca:	1e04      	subs	r4, r0, #0
1000c4cc:	d103      	bne.n	1000c4d6 <at_ble_scan_stop+0x12>
1000c4ce:	20d1      	movs	r0, #209	; 0xd1
1000c4d0:	4b03      	ldr	r3, [pc, #12]	; (1000c4e0 <at_ble_scan_stop+0x1c>)
1000c4d2:	0100      	lsls	r0, r0, #4
1000c4d4:	4798      	blx	r3
1000c4d6:	1c20      	adds	r0, r4, #0
1000c4d8:	bd10      	pop	{r4, pc}
1000c4da:	46c0      	nop			; (mov r8, r8)
1000c4dc:	1000db01 	.word	0x1000db01
1000c4e0:	1000c0c9 	.word	0x1000c0c9

1000c4e4 <at_ble_connect>:
1000c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4e6:	b091      	sub	sp, #68	; 0x44
1000c4e8:	930d      	str	r3, [sp, #52]	; 0x34
1000c4ea:	4b2d      	ldr	r3, [pc, #180]	; (1000c5a0 <at_ble_connect+0xbc>)
1000c4ec:	900a      	str	r0, [sp, #40]	; 0x28
1000c4ee:	910b      	str	r1, [sp, #44]	; 0x2c
1000c4f0:	920c      	str	r2, [sp, #48]	; 0x30
1000c4f2:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000c4f4:	4798      	blx	r3
1000c4f6:	254b      	movs	r5, #75	; 0x4b
1000c4f8:	2807      	cmp	r0, #7
1000c4fa:	d84d      	bhi.n	1000c598 <at_ble_connect+0xb4>
1000c4fc:	8863      	ldrh	r3, [r4, #2]
1000c4fe:	4a29      	ldr	r2, [pc, #164]	; (1000c5a4 <at_ble_connect+0xc0>)
1000c500:	3b06      	subs	r3, #6
1000c502:	b29b      	uxth	r3, r3
1000c504:	3584      	adds	r5, #132	; 0x84
1000c506:	4293      	cmp	r3, r2
1000c508:	d846      	bhi.n	1000c598 <at_ble_connect+0xb4>
1000c50a:	8823      	ldrh	r3, [r4, #0]
1000c50c:	3b06      	subs	r3, #6
1000c50e:	b29b      	uxth	r3, r3
1000c510:	4293      	cmp	r3, r2
1000c512:	d841      	bhi.n	1000c598 <at_ble_connect+0xb4>
1000c514:	88e3      	ldrh	r3, [r4, #6]
1000c516:	4a24      	ldr	r2, [pc, #144]	; (1000c5a8 <at_ble_connect+0xc4>)
1000c518:	3b0a      	subs	r3, #10
1000c51a:	b29b      	uxth	r3, r3
1000c51c:	4293      	cmp	r3, r2
1000c51e:	d83b      	bhi.n	1000c598 <at_ble_connect+0xb4>
1000c520:	23f4      	movs	r3, #244	; 0xf4
1000c522:	88a2      	ldrh	r2, [r4, #4]
1000c524:	33ff      	adds	r3, #255	; 0xff
1000c526:	429a      	cmp	r2, r3
1000c528:	d836      	bhi.n	1000c598 <at_ble_connect+0xb4>
1000c52a:	af0e      	add	r7, sp, #56	; 0x38
1000c52c:	4b1f      	ldr	r3, [pc, #124]	; (1000c5ac <at_ble_connect+0xc8>)
1000c52e:	2001      	movs	r0, #1
1000c530:	1c39      	adds	r1, r7, #0
1000c532:	4798      	blx	r3
1000c534:	4e1e      	ldr	r6, [pc, #120]	; (1000c5b0 <at_ble_connect+0xcc>)
1000c536:	1c05      	adds	r5, r0, #0
1000c538:	7933      	ldrb	r3, [r6, #4]
1000c53a:	703b      	strb	r3, [r7, #0]
1000c53c:	2800      	cmp	r0, #0
1000c53e:	d12a      	bne.n	1000c596 <at_ble_connect+0xb2>
1000c540:	4b1c      	ldr	r3, [pc, #112]	; (1000c5b4 <at_ble_connect+0xd0>)
1000c542:	4798      	blx	r3
1000c544:	3675      	adds	r6, #117	; 0x75
1000c546:	7833      	ldrb	r3, [r6, #0]
1000c548:	1c01      	adds	r1, r0, #0
1000c54a:	3b01      	subs	r3, #1
1000c54c:	2b01      	cmp	r3, #1
1000c54e:	d901      	bls.n	1000c554 <at_ble_connect+0x70>
1000c550:	2302      	movs	r3, #2
1000c552:	7033      	strb	r3, [r6, #0]
1000c554:	4b16      	ldr	r3, [pc, #88]	; (1000c5b0 <at_ble_connect+0xcc>)
1000c556:	1c1a      	adds	r2, r3, #0
1000c558:	3275      	adds	r2, #117	; 0x75
1000c55a:	7810      	ldrb	r0, [r2, #0]
1000c55c:	885a      	ldrh	r2, [r3, #2]
1000c55e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000c560:	3012      	adds	r0, #18
1000c562:	9300      	str	r3, [sp, #0]
1000c564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c566:	b2c0      	uxtb	r0, r0
1000c568:	9301      	str	r3, [sp, #4]
1000c56a:	8823      	ldrh	r3, [r4, #0]
1000c56c:	9302      	str	r3, [sp, #8]
1000c56e:	8863      	ldrh	r3, [r4, #2]
1000c570:	9303      	str	r3, [sp, #12]
1000c572:	88a3      	ldrh	r3, [r4, #4]
1000c574:	9304      	str	r3, [sp, #16]
1000c576:	88e3      	ldrh	r3, [r4, #6]
1000c578:	9305      	str	r3, [sp, #20]
1000c57a:	8923      	ldrh	r3, [r4, #8]
1000c57c:	9306      	str	r3, [sp, #24]
1000c57e:	8963      	ldrh	r3, [r4, #10]
1000c580:	ac04      	add	r4, sp, #16
1000c582:	9307      	str	r3, [sp, #28]
1000c584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000c586:	9308      	str	r3, [sp, #32]
1000c588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c58a:	9309      	str	r3, [sp, #36]	; 0x24
1000c58c:	2329      	movs	r3, #41	; 0x29
1000c58e:	191b      	adds	r3, r3, r4
1000c590:	4c09      	ldr	r4, [pc, #36]	; (1000c5b8 <at_ble_connect+0xd4>)
1000c592:	47a0      	blx	r4
1000c594:	e000      	b.n	1000c598 <at_ble_connect+0xb4>
1000c596:	25e2      	movs	r5, #226	; 0xe2
1000c598:	1c28      	adds	r0, r5, #0
1000c59a:	b011      	add	sp, #68	; 0x44
1000c59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c59e:	46c0      	nop			; (mov r8, r8)
1000c5a0:	1000cedd 	.word	0x1000cedd
1000c5a4:	00000c7a 	.word	0x00000c7a
1000c5a8:	00000c76 	.word	0x00000c76
1000c5ac:	1000da21 	.word	0x1000da21
1000c5b0:	10012c8a 	.word	0x10012c8a
1000c5b4:	1000dcd5 	.word	0x1000dcd5
1000c5b8:	1000de0d 	.word	0x1000de0d

1000c5bc <at_ble_disconnect>:
1000c5bc:	b538      	push	{r3, r4, r5, lr}
1000c5be:	1c04      	adds	r4, r0, #0
1000c5c0:	4b04      	ldr	r3, [pc, #16]	; (1000c5d4 <at_ble_disconnect+0x18>)
1000c5c2:	1c08      	adds	r0, r1, #0
1000c5c4:	1c21      	adds	r1, r4, #0
1000c5c6:	4798      	blx	r3
1000c5c8:	1c05      	adds	r5, r0, #0
1000c5ca:	4b03      	ldr	r3, [pc, #12]	; (1000c5d8 <at_ble_disconnect+0x1c>)
1000c5cc:	1c20      	adds	r0, r4, #0
1000c5ce:	4798      	blx	r3
1000c5d0:	1c28      	adds	r0, r5, #0
1000c5d2:	bd38      	pop	{r3, r4, r5, pc}
1000c5d4:	1000d179 	.word	0x1000d179
1000c5d8:	1000c10d 	.word	0x1000c10d

1000c5dc <at_ble_conn_update_reply>:
1000c5dc:	b510      	push	{r4, lr}
1000c5de:	4c01      	ldr	r4, [pc, #4]	; (1000c5e4 <at_ble_conn_update_reply+0x8>)
1000c5e0:	47a0      	blx	r4
1000c5e2:	bd10      	pop	{r4, pc}
1000c5e4:	1000d669 	.word	0x1000d669

1000c5e8 <at_ble_random_address_resolve>:
1000c5e8:	b510      	push	{r4, lr}
1000c5ea:	23cf      	movs	r3, #207	; 0xcf
1000c5ec:	2800      	cmp	r0, #0
1000c5ee:	d00a      	beq.n	1000c606 <at_ble_random_address_resolve+0x1e>
1000c5f0:	2900      	cmp	r1, #0
1000c5f2:	d008      	beq.n	1000c606 <at_ble_random_address_resolve+0x1e>
1000c5f4:	2a00      	cmp	r2, #0
1000c5f6:	d006      	beq.n	1000c606 <at_ble_random_address_resolve+0x1e>
1000c5f8:	780c      	ldrb	r4, [r1, #0]
1000c5fa:	2c02      	cmp	r4, #2
1000c5fc:	d103      	bne.n	1000c606 <at_ble_random_address_resolve+0x1e>
1000c5fe:	4b03      	ldr	r3, [pc, #12]	; (1000c60c <at_ble_random_address_resolve+0x24>)
1000c600:	3101      	adds	r1, #1
1000c602:	4798      	blx	r3
1000c604:	2300      	movs	r3, #0
1000c606:	1c18      	adds	r0, r3, #0
1000c608:	bd10      	pop	{r4, pc}
1000c60a:	46c0      	nop			; (mov r8, r8)
1000c60c:	1000df29 	.word	0x1000df29

1000c610 <at_ble_connect_cancel>:
1000c610:	b508      	push	{r3, lr}
1000c612:	4b03      	ldr	r3, [pc, #12]	; (1000c620 <at_ble_connect_cancel+0x10>)
1000c614:	4798      	blx	r3
1000c616:	1e03      	subs	r3, r0, #0
1000c618:	d000      	beq.n	1000c61c <at_ble_connect_cancel+0xc>
1000c61a:	23e2      	movs	r3, #226	; 0xe2
1000c61c:	1c18      	adds	r0, r3, #0
1000c61e:	bd08      	pop	{r3, pc}
1000c620:	1000db01 	.word	0x1000db01

1000c624 <at_ble_uuid_len2type>:
1000c624:	1e83      	subs	r3, r0, #2
1000c626:	b2db      	uxtb	r3, r3
1000c628:	2003      	movs	r0, #3
1000c62a:	2b0e      	cmp	r3, #14
1000c62c:	d801      	bhi.n	1000c632 <at_ble_uuid_len2type+0xe>
1000c62e:	4a01      	ldr	r2, [pc, #4]	; (1000c634 <at_ble_uuid_len2type+0x10>)
1000c630:	5cd0      	ldrb	r0, [r2, r3]
1000c632:	4770      	bx	lr
1000c634:	1001176f 	.word	0x1001176f

1000c638 <init_gatt_client_module>:
1000c638:	2200      	movs	r2, #0
1000c63a:	4b01      	ldr	r3, [pc, #4]	; (1000c640 <init_gatt_client_module+0x8>)
1000c63c:	801a      	strh	r2, [r3, #0]
1000c63e:	4770      	bx	lr
1000c640:	10011fa0 	.word	0x10011fa0

1000c644 <at_ble_primary_service_discover_all>:
1000c644:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c646:	24cf      	movs	r4, #207	; 0xcf
1000c648:	2900      	cmp	r1, #0
1000c64a:	d00a      	beq.n	1000c662 <at_ble_primary_service_discover_all+0x1e>
1000c64c:	428a      	cmp	r2, r1
1000c64e:	d308      	bcc.n	1000c662 <at_ble_primary_service_discover_all+0x1e>
1000c650:	2400      	movs	r4, #0
1000c652:	1c13      	adds	r3, r2, #0
1000c654:	9001      	str	r0, [sp, #4]
1000c656:	1c0a      	adds	r2, r1, #0
1000c658:	9400      	str	r4, [sp, #0]
1000c65a:	2002      	movs	r0, #2
1000c65c:	1c21      	adds	r1, r4, #0
1000c65e:	4d02      	ldr	r5, [pc, #8]	; (1000c668 <at_ble_primary_service_discover_all+0x24>)
1000c660:	47a8      	blx	r5
1000c662:	1c20      	adds	r0, r4, #0
1000c664:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c666:	46c0      	nop			; (mov r8, r8)
1000c668:	1000e11d 	.word	0x1000e11d

1000c66c <at_ble_characteristic_discover_all>:
1000c66c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c66e:	24cf      	movs	r4, #207	; 0xcf
1000c670:	2900      	cmp	r1, #0
1000c672:	d00a      	beq.n	1000c68a <at_ble_characteristic_discover_all+0x1e>
1000c674:	428a      	cmp	r2, r1
1000c676:	d308      	bcc.n	1000c68a <at_ble_characteristic_discover_all+0x1e>
1000c678:	2400      	movs	r4, #0
1000c67a:	1c13      	adds	r3, r2, #0
1000c67c:	9001      	str	r0, [sp, #4]
1000c67e:	1c0a      	adds	r2, r1, #0
1000c680:	9400      	str	r4, [sp, #0]
1000c682:	2005      	movs	r0, #5
1000c684:	1c21      	adds	r1, r4, #0
1000c686:	4d02      	ldr	r5, [pc, #8]	; (1000c690 <at_ble_characteristic_discover_all+0x24>)
1000c688:	47a8      	blx	r5
1000c68a:	1c20      	adds	r0, r4, #0
1000c68c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c68e:	46c0      	nop			; (mov r8, r8)
1000c690:	1000e11d 	.word	0x1000e11d

1000c694 <at_ble_characteristic_read>:
1000c694:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c696:	1c0f      	adds	r7, r1, #0
1000c698:	1c16      	adds	r6, r2, #0
1000c69a:	2500      	movs	r5, #0
1000c69c:	4c08      	ldr	r4, [pc, #32]	; (1000c6c0 <at_ble_characteristic_read+0x2c>)
1000c69e:	b085      	sub	sp, #20
1000c6a0:	8821      	ldrh	r1, [r4, #0]
1000c6a2:	1c3a      	adds	r2, r7, #0
1000c6a4:	9300      	str	r3, [sp, #0]
1000c6a6:	9002      	str	r0, [sp, #8]
1000c6a8:	1c33      	adds	r3, r6, #0
1000c6aa:	9501      	str	r5, [sp, #4]
1000c6ac:	2008      	movs	r0, #8
1000c6ae:	4e05      	ldr	r6, [pc, #20]	; (1000c6c4 <at_ble_characteristic_read+0x30>)
1000c6b0:	47b0      	blx	r6
1000c6b2:	1c28      	adds	r0, r5, #0
1000c6b4:	8823      	ldrh	r3, [r4, #0]
1000c6b6:	3301      	adds	r3, #1
1000c6b8:	8023      	strh	r3, [r4, #0]
1000c6ba:	b005      	add	sp, #20
1000c6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c6be:	46c0      	nop			; (mov r8, r8)
1000c6c0:	10011fa0 	.word	0x10011fa0
1000c6c4:	1000e1ed 	.word	0x1000e1ed

1000c6c8 <db_searchATT>:
1000c6c8:	b570      	push	{r4, r5, r6, lr}
1000c6ca:	1c05      	adds	r5, r0, #0
1000c6cc:	2400      	movs	r4, #0
1000c6ce:	4b0c      	ldr	r3, [pc, #48]	; (1000c700 <db_searchATT+0x38>)
1000c6d0:	6819      	ldr	r1, [r3, #0]
1000c6d2:	4b0c      	ldr	r3, [pc, #48]	; (1000c704 <db_searchATT+0x3c>)
1000c6d4:	681e      	ldr	r6, [r3, #0]
1000c6d6:	428c      	cmp	r4, r1
1000c6d8:	dc10      	bgt.n	1000c6fc <db_searchATT+0x34>
1000c6da:	200c      	movs	r0, #12
1000c6dc:	1863      	adds	r3, r4, r1
1000c6de:	0fda      	lsrs	r2, r3, #31
1000c6e0:	18d3      	adds	r3, r2, r3
1000c6e2:	1c02      	adds	r2, r0, #0
1000c6e4:	105b      	asrs	r3, r3, #1
1000c6e6:	435a      	muls	r2, r3
1000c6e8:	18b0      	adds	r0, r6, r2
1000c6ea:	8802      	ldrh	r2, [r0, #0]
1000c6ec:	42aa      	cmp	r2, r5
1000c6ee:	d201      	bcs.n	1000c6f4 <db_searchATT+0x2c>
1000c6f0:	1e59      	subs	r1, r3, #1
1000c6f2:	e7f0      	b.n	1000c6d6 <db_searchATT+0xe>
1000c6f4:	42aa      	cmp	r2, r5
1000c6f6:	d902      	bls.n	1000c6fe <db_searchATT+0x36>
1000c6f8:	1c5c      	adds	r4, r3, #1
1000c6fa:	e7ec      	b.n	1000c6d6 <db_searchATT+0xe>
1000c6fc:	2000      	movs	r0, #0
1000c6fe:	bd70      	pop	{r4, r5, r6, pc}
1000c700:	10011fb4 	.word	0x10011fb4
1000c704:	10011fac 	.word	0x10011fac

1000c708 <at_ble_read_authorize_reply.part.2>:
1000c708:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c70a:	4b09      	ldr	r3, [pc, #36]	; (1000c730 <at_ble_read_authorize_reply.part.2+0x28>)
1000c70c:	1c05      	adds	r5, r0, #0
1000c70e:	1c08      	adds	r0, r1, #0
1000c710:	1c0c      	adds	r4, r1, #0
1000c712:	4798      	blx	r3
1000c714:	2800      	cmp	r0, #0
1000c716:	d009      	beq.n	1000c72c <at_ble_read_authorize_reply.part.2+0x24>
1000c718:	6882      	ldr	r2, [r0, #8]
1000c71a:	2a00      	cmp	r2, #0
1000c71c:	d006      	beq.n	1000c72c <at_ble_read_authorize_reply.part.2+0x24>
1000c71e:	8883      	ldrh	r3, [r0, #4]
1000c720:	1c29      	adds	r1, r5, #0
1000c722:	9200      	str	r2, [sp, #0]
1000c724:	1c20      	adds	r0, r4, #0
1000c726:	2200      	movs	r2, #0
1000c728:	4c02      	ldr	r4, [pc, #8]	; (1000c734 <at_ble_read_authorize_reply.part.2+0x2c>)
1000c72a:	47a0      	blx	r4
1000c72c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c72e:	46c0      	nop			; (mov r8, r8)
1000c730:	1000c6c9 	.word	0x1000c6c9
1000c734:	1000e025 	.word	0x1000e025

1000c738 <initi_gatt_server_module>:
1000c738:	2300      	movs	r3, #0
1000c73a:	4a06      	ldr	r2, [pc, #24]	; (1000c754 <initi_gatt_server_module+0x1c>)
1000c73c:	7013      	strb	r3, [r2, #0]
1000c73e:	4a06      	ldr	r2, [pc, #24]	; (1000c758 <initi_gatt_server_module+0x20>)
1000c740:	6013      	str	r3, [r2, #0]
1000c742:	4a06      	ldr	r2, [pc, #24]	; (1000c75c <initi_gatt_server_module+0x24>)
1000c744:	6013      	str	r3, [r2, #0]
1000c746:	4a06      	ldr	r2, [pc, #24]	; (1000c760 <initi_gatt_server_module+0x28>)
1000c748:	6013      	str	r3, [r2, #0]
1000c74a:	4a06      	ldr	r2, [pc, #24]	; (1000c764 <initi_gatt_server_module+0x2c>)
1000c74c:	6013      	str	r3, [r2, #0]
1000c74e:	4a06      	ldr	r2, [pc, #24]	; (1000c768 <initi_gatt_server_module+0x30>)
1000c750:	6013      	str	r3, [r2, #0]
1000c752:	4770      	bx	lr
1000c754:	10011fa8 	.word	0x10011fa8
1000c758:	10011fb8 	.word	0x10011fb8
1000c75c:	10011fb4 	.word	0x10011fb4
1000c760:	10011fa4 	.word	0x10011fa4
1000c764:	10011fb0 	.word	0x10011fb0
1000c768:	10011fac 	.word	0x10011fac

1000c76c <db_init>:
1000c76c:	4b0a      	ldr	r3, [pc, #40]	; (1000c798 <db_init+0x2c>)
1000c76e:	4a0b      	ldr	r2, [pc, #44]	; (1000c79c <db_init+0x30>)
1000c770:	6018      	str	r0, [r3, #0]
1000c772:	084b      	lsrs	r3, r1, #1
1000c774:	6013      	str	r3, [r2, #0]
1000c776:	4a0a      	ldr	r2, [pc, #40]	; (1000c7a0 <db_init+0x34>)
1000c778:	18c3      	adds	r3, r0, r3
1000c77a:	6013      	str	r3, [r2, #0]
1000c77c:	4a09      	ldr	r2, [pc, #36]	; (1000c7a4 <db_init+0x38>)
1000c77e:	1841      	adds	r1, r0, r1
1000c780:	6013      	str	r3, [r2, #0]
1000c782:	2303      	movs	r3, #3
1000c784:	2200      	movs	r2, #0
1000c786:	3103      	adds	r1, #3
1000c788:	4399      	bics	r1, r3
1000c78a:	4b07      	ldr	r3, [pc, #28]	; (1000c7a8 <db_init+0x3c>)
1000c78c:	3904      	subs	r1, #4
1000c78e:	6019      	str	r1, [r3, #0]
1000c790:	4b06      	ldr	r3, [pc, #24]	; (1000c7ac <db_init+0x40>)
1000c792:	601a      	str	r2, [r3, #0]
1000c794:	4770      	bx	lr
1000c796:	46c0      	nop			; (mov r8, r8)
1000c798:	10011fbc 	.word	0x10011fbc
1000c79c:	10011fb8 	.word	0x10011fb8
1000c7a0:	10011fa4 	.word	0x10011fa4
1000c7a4:	10011fb0 	.word	0x10011fb0
1000c7a8:	10011fac 	.word	0x10011fac
1000c7ac:	10011fb4 	.word	0x10011fb4

1000c7b0 <at_ble_characteristic_value_set>:
1000c7b0:	b570      	push	{r4, r5, r6, lr}
1000c7b2:	4b0b      	ldr	r3, [pc, #44]	; (1000c7e0 <at_ble_characteristic_value_set+0x30>)
1000c7b4:	1c06      	adds	r6, r0, #0
1000c7b6:	1c0c      	adds	r4, r1, #0
1000c7b8:	1c15      	adds	r5, r2, #0
1000c7ba:	4798      	blx	r3
1000c7bc:	2800      	cmp	r0, #0
1000c7be:	d008      	beq.n	1000c7d2 <at_ble_characteristic_value_set+0x22>
1000c7c0:	6880      	ldr	r0, [r0, #8]
1000c7c2:	2800      	cmp	r0, #0
1000c7c4:	d005      	beq.n	1000c7d2 <at_ble_characteristic_value_set+0x22>
1000c7c6:	1c21      	adds	r1, r4, #0
1000c7c8:	1c2a      	adds	r2, r5, #0
1000c7ca:	4b06      	ldr	r3, [pc, #24]	; (1000c7e4 <at_ble_characteristic_value_set+0x34>)
1000c7cc:	4798      	blx	r3
1000c7ce:	2000      	movs	r0, #0
1000c7d0:	e004      	b.n	1000c7dc <at_ble_characteristic_value_set+0x2c>
1000c7d2:	1c30      	adds	r0, r6, #0
1000c7d4:	1c29      	adds	r1, r5, #0
1000c7d6:	1c22      	adds	r2, r4, #0
1000c7d8:	4b03      	ldr	r3, [pc, #12]	; (1000c7e8 <at_ble_characteristic_value_set+0x38>)
1000c7da:	4798      	blx	r3
1000c7dc:	bd70      	pop	{r4, r5, r6, pc}
1000c7de:	46c0      	nop			; (mov r8, r8)
1000c7e0:	1000c6c9 	.word	0x1000c6c9
1000c7e4:	1000f7d7 	.word	0x1000f7d7
1000c7e8:	1000e4c1 	.word	0x1000e4c1

1000c7ec <at_ble_characteristic_value_get>:
1000c7ec:	b570      	push	{r4, r5, r6, lr}
1000c7ee:	4b0c      	ldr	r3, [pc, #48]	; (1000c820 <at_ble_characteristic_value_get+0x34>)
1000c7f0:	1c06      	adds	r6, r0, #0
1000c7f2:	1c0c      	adds	r4, r1, #0
1000c7f4:	1c15      	adds	r5, r2, #0
1000c7f6:	4798      	blx	r3
1000c7f8:	2800      	cmp	r0, #0
1000c7fa:	d00b      	beq.n	1000c814 <at_ble_characteristic_value_get+0x28>
1000c7fc:	6883      	ldr	r3, [r0, #8]
1000c7fe:	2b00      	cmp	r3, #0
1000c800:	d008      	beq.n	1000c814 <at_ble_characteristic_value_get+0x28>
1000c802:	8883      	ldrh	r3, [r0, #4]
1000c804:	802b      	strh	r3, [r5, #0]
1000c806:	8882      	ldrh	r2, [r0, #4]
1000c808:	6881      	ldr	r1, [r0, #8]
1000c80a:	4b06      	ldr	r3, [pc, #24]	; (1000c824 <at_ble_characteristic_value_get+0x38>)
1000c80c:	1c20      	adds	r0, r4, #0
1000c80e:	4798      	blx	r3
1000c810:	2000      	movs	r0, #0
1000c812:	e004      	b.n	1000c81e <at_ble_characteristic_value_get+0x32>
1000c814:	1c30      	adds	r0, r6, #0
1000c816:	1c29      	adds	r1, r5, #0
1000c818:	1c22      	adds	r2, r4, #0
1000c81a:	4b03      	ldr	r3, [pc, #12]	; (1000c828 <at_ble_characteristic_value_get+0x3c>)
1000c81c:	4798      	blx	r3
1000c81e:	bd70      	pop	{r4, r5, r6, pc}
1000c820:	1000c6c9 	.word	0x1000c6c9
1000c824:	1000f7d7 	.word	0x1000f7d7
1000c828:	1000e54d 	.word	0x1000e54d

1000c82c <at_ble_write_authorize_reply>:
1000c82c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c82e:	b085      	sub	sp, #20
1000c830:	1c04      	adds	r4, r0, #0
1000c832:	9101      	str	r1, [sp, #4]
1000c834:	2900      	cmp	r1, #0
1000c836:	d128      	bne.n	1000c88a <at_ble_write_authorize_reply+0x5e>
1000c838:	8843      	ldrh	r3, [r0, #2]
1000c83a:	1c27      	adds	r7, r4, #0
1000c83c:	9300      	str	r3, [sp, #0]
1000c83e:	1c18      	adds	r0, r3, #0
1000c840:	4b16      	ldr	r3, [pc, #88]	; (1000c89c <at_ble_write_authorize_reply+0x70>)
1000c842:	4798      	blx	r3
1000c844:	3708      	adds	r7, #8
1000c846:	2800      	cmp	r0, #0
1000c848:	d009      	beq.n	1000c85e <at_ble_write_authorize_reply+0x32>
1000c84a:	6880      	ldr	r0, [r0, #8]
1000c84c:	2800      	cmp	r0, #0
1000c84e:	d006      	beq.n	1000c85e <at_ble_write_authorize_reply+0x32>
1000c850:	88a3      	ldrh	r3, [r4, #4]
1000c852:	88e2      	ldrh	r2, [r4, #6]
1000c854:	18c0      	adds	r0, r0, r3
1000c856:	1c39      	adds	r1, r7, #0
1000c858:	4b11      	ldr	r3, [pc, #68]	; (1000c8a0 <at_ble_write_authorize_reply+0x74>)
1000c85a:	4798      	blx	r3
1000c85c:	e015      	b.n	1000c88a <at_ble_write_authorize_reply+0x5e>
1000c85e:	ab02      	add	r3, sp, #8
1000c860:	1d9e      	adds	r6, r3, #6
1000c862:	2300      	movs	r3, #0
1000c864:	4d0f      	ldr	r5, [pc, #60]	; (1000c8a4 <at_ble_write_authorize_reply+0x78>)
1000c866:	8033      	strh	r3, [r6, #0]
1000c868:	6829      	ldr	r1, [r5, #0]
1000c86a:	1c32      	adds	r2, r6, #0
1000c86c:	4b0e      	ldr	r3, [pc, #56]	; (1000c8a8 <at_ble_write_authorize_reply+0x7c>)
1000c86e:	9800      	ldr	r0, [sp, #0]
1000c870:	4798      	blx	r3
1000c872:	682b      	ldr	r3, [r5, #0]
1000c874:	88a0      	ldrh	r0, [r4, #4]
1000c876:	88e2      	ldrh	r2, [r4, #6]
1000c878:	1818      	adds	r0, r3, r0
1000c87a:	1c39      	adds	r1, r7, #0
1000c87c:	4b08      	ldr	r3, [pc, #32]	; (1000c8a0 <at_ble_write_authorize_reply+0x74>)
1000c87e:	4798      	blx	r3
1000c880:	8860      	ldrh	r0, [r4, #2]
1000c882:	8832      	ldrh	r2, [r6, #0]
1000c884:	6829      	ldr	r1, [r5, #0]
1000c886:	4b09      	ldr	r3, [pc, #36]	; (1000c8ac <at_ble_write_authorize_reply+0x80>)
1000c888:	4798      	blx	r3
1000c88a:	8860      	ldrh	r0, [r4, #2]
1000c88c:	8821      	ldrh	r1, [r4, #0]
1000c88e:	9a01      	ldr	r2, [sp, #4]
1000c890:	4b07      	ldr	r3, [pc, #28]	; (1000c8b0 <at_ble_write_authorize_reply+0x84>)
1000c892:	4798      	blx	r3
1000c894:	2000      	movs	r0, #0
1000c896:	b005      	add	sp, #20
1000c898:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c89a:	46c0      	nop			; (mov r8, r8)
1000c89c:	1000c6c9 	.word	0x1000c6c9
1000c8a0:	1000f7d7 	.word	0x1000f7d7
1000c8a4:	100118a0 	.word	0x100118a0
1000c8a8:	1000c7ed 	.word	0x1000c7ed
1000c8ac:	1000c7b1 	.word	0x1000c7b1
1000c8b0:	1000e091 	.word	0x1000e091

1000c8b4 <gatts_handle_read_req>:
1000c8b4:	b538      	push	{r3, r4, r5, lr}
1000c8b6:	1c0c      	adds	r4, r1, #0
1000c8b8:	4b07      	ldr	r3, [pc, #28]	; (1000c8d8 <gatts_handle_read_req+0x24>)
1000c8ba:	4798      	blx	r3
1000c8bc:	8865      	ldrh	r5, [r4, #2]
1000c8be:	4b07      	ldr	r3, [pc, #28]	; (1000c8dc <gatts_handle_read_req+0x28>)
1000c8c0:	1c28      	adds	r0, r5, #0
1000c8c2:	4798      	blx	r3
1000c8c4:	7883      	ldrb	r3, [r0, #2]
1000c8c6:	2026      	movs	r0, #38	; 0x26
1000c8c8:	07db      	lsls	r3, r3, #31
1000c8ca:	d404      	bmi.n	1000c8d6 <gatts_handle_read_req+0x22>
1000c8cc:	8820      	ldrh	r0, [r4, #0]
1000c8ce:	1c29      	adds	r1, r5, #0
1000c8d0:	4b03      	ldr	r3, [pc, #12]	; (1000c8e0 <gatts_handle_read_req+0x2c>)
1000c8d2:	4798      	blx	r3
1000c8d4:	203b      	movs	r0, #59	; 0x3b
1000c8d6:	bd38      	pop	{r3, r4, r5, pc}
1000c8d8:	1000dfd5 	.word	0x1000dfd5
1000c8dc:	1000c6c9 	.word	0x1000c6c9
1000c8e0:	1000c709 	.word	0x1000c709

1000c8e4 <gatts_handle_att_info_req>:
1000c8e4:	b538      	push	{r3, r4, r5, lr}
1000c8e6:	1c0d      	adds	r5, r1, #0
1000c8e8:	4b0a      	ldr	r3, [pc, #40]	; (1000c914 <gatts_handle_att_info_req+0x30>)
1000c8ea:	1c14      	adds	r4, r2, #0
1000c8ec:	4798      	blx	r3
1000c8ee:	882d      	ldrh	r5, [r5, #0]
1000c8f0:	4b09      	ldr	r3, [pc, #36]	; (1000c918 <gatts_handle_att_info_req+0x34>)
1000c8f2:	1c28      	adds	r0, r5, #0
1000c8f4:	4798      	blx	r3
1000c8f6:	0a22      	lsrs	r2, r4, #8
1000c8f8:	1c03      	adds	r3, r0, #0
1000c8fa:	4c08      	ldr	r4, [pc, #32]	; (1000c91c <gatts_handle_att_info_req+0x38>)
1000c8fc:	b291      	uxth	r1, r2
1000c8fe:	2800      	cmp	r0, #0
1000c900:	d003      	beq.n	1000c90a <gatts_handle_att_info_req+0x26>
1000c902:	8882      	ldrh	r2, [r0, #4]
1000c904:	2300      	movs	r3, #0
1000c906:	1c28      	adds	r0, r5, #0
1000c908:	e001      	b.n	1000c90e <gatts_handle_att_info_req+0x2a>
1000c90a:	1c28      	adds	r0, r5, #0
1000c90c:	2201      	movs	r2, #1
1000c90e:	47a0      	blx	r4
1000c910:	203b      	movs	r0, #59	; 0x3b
1000c912:	bd38      	pop	{r3, r4, r5, pc}
1000c914:	1000e019 	.word	0x1000e019
1000c918:	1000c6c9 	.word	0x1000c6c9
1000c91c:	1000e0d5 	.word	0x1000e0d5

1000c920 <gatts_handle_write_req>:
1000c920:	b510      	push	{r4, lr}
1000c922:	1c14      	adds	r4, r2, #0
1000c924:	4b07      	ldr	r3, [pc, #28]	; (1000c944 <gatts_handle_write_req+0x24>)
1000c926:	4798      	blx	r3
1000c928:	4b07      	ldr	r3, [pc, #28]	; (1000c948 <gatts_handle_write_req+0x28>)
1000c92a:	8860      	ldrh	r0, [r4, #2]
1000c92c:	4798      	blx	r3
1000c92e:	2302      	movs	r3, #2
1000c930:	7881      	ldrb	r1, [r0, #2]
1000c932:	2022      	movs	r0, #34	; 0x22
1000c934:	4019      	ands	r1, r3
1000c936:	d103      	bne.n	1000c940 <gatts_handle_write_req+0x20>
1000c938:	1c20      	adds	r0, r4, #0
1000c93a:	4b04      	ldr	r3, [pc, #16]	; (1000c94c <gatts_handle_write_req+0x2c>)
1000c93c:	4798      	blx	r3
1000c93e:	201f      	movs	r0, #31
1000c940:	bd10      	pop	{r4, pc}
1000c942:	46c0      	nop			; (mov r8, r8)
1000c944:	1000dfe1 	.word	0x1000dfe1
1000c948:	1000c6c9 	.word	0x1000c6c9
1000c94c:	1000c82d 	.word	0x1000c82d

1000c950 <init_l2cc_task_module>:
1000c950:	220a      	movs	r2, #10
1000c952:	4b01      	ldr	r3, [pc, #4]	; (1000c958 <init_l2cc_task_module+0x8>)
1000c954:	701a      	strb	r2, [r3, #0]
1000c956:	4770      	bx	lr
1000c958:	1001189c 	.word	0x1001189c

1000c95c <l2cc_data_send_rsp_handler>:
1000c95c:	b510      	push	{r4, lr}
1000c95e:	7802      	ldrb	r2, [r0, #0]
1000c960:	700a      	strb	r2, [r1, #0]
1000c962:	7883      	ldrb	r3, [r0, #2]
1000c964:	7844      	ldrb	r4, [r0, #1]
1000c966:	021b      	lsls	r3, r3, #8
1000c968:	4323      	orrs	r3, r4
1000c96a:	804b      	strh	r3, [r1, #2]
1000c96c:	7903      	ldrb	r3, [r0, #4]
1000c96e:	78c0      	ldrb	r0, [r0, #3]
1000c970:	021b      	lsls	r3, r3, #8
1000c972:	4303      	orrs	r3, r0
1000c974:	808b      	strh	r3, [r1, #4]
1000c976:	2a00      	cmp	r2, #0
1000c978:	d103      	bne.n	1000c982 <l2cc_data_send_rsp_handler+0x26>
1000c97a:	4a02      	ldr	r2, [pc, #8]	; (1000c984 <l2cc_data_send_rsp_handler+0x28>)
1000c97c:	7813      	ldrb	r3, [r2, #0]
1000c97e:	3301      	adds	r3, #1
1000c980:	7013      	strb	r3, [r2, #0]
1000c982:	bd10      	pop	{r4, pc}
1000c984:	1001189c 	.word	0x1001189c

1000c988 <l2cc_data_received_handler>:
1000c988:	b508      	push	{r3, lr}
1000c98a:	1c03      	adds	r3, r0, #0
1000c98c:	7842      	ldrb	r2, [r0, #1]
1000c98e:	7800      	ldrb	r0, [r0, #0]
1000c990:	0212      	lsls	r2, r2, #8
1000c992:	4302      	orrs	r2, r0
1000c994:	800a      	strh	r2, [r1, #0]
1000c996:	78da      	ldrb	r2, [r3, #3]
1000c998:	7898      	ldrb	r0, [r3, #2]
1000c99a:	0212      	lsls	r2, r2, #8
1000c99c:	4302      	orrs	r2, r0
1000c99e:	804a      	strh	r2, [r1, #2]
1000c9a0:	795a      	ldrb	r2, [r3, #5]
1000c9a2:	7918      	ldrb	r0, [r3, #4]
1000c9a4:	0212      	lsls	r2, r2, #8
1000c9a6:	4302      	orrs	r2, r0
1000c9a8:	808a      	strh	r2, [r1, #4]
1000c9aa:	1d88      	adds	r0, r1, #6
1000c9ac:	1d99      	adds	r1, r3, #6
1000c9ae:	4b01      	ldr	r3, [pc, #4]	; (1000c9b4 <l2cc_data_received_handler+0x2c>)
1000c9b0:	4798      	blx	r3
1000c9b2:	bd08      	pop	{r3, pc}
1000c9b4:	1000f7d7 	.word	0x1000f7d7

1000c9b8 <at_ble_authenticate>:
1000c9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c9ba:	1c0c      	adds	r4, r1, #0
1000c9bc:	211f      	movs	r1, #31
1000c9be:	b08b      	sub	sp, #44	; 0x2c
1000c9c0:	9307      	str	r3, [sp, #28]
1000c9c2:	ab02      	add	r3, sp, #8
1000c9c4:	18c9      	adds	r1, r1, r3
1000c9c6:	230f      	movs	r3, #15
1000c9c8:	700b      	strb	r3, [r1, #0]
1000c9ca:	4b40      	ldr	r3, [pc, #256]	; (1000cacc <at_ble_authenticate+0x114>)
1000c9cc:	1c05      	adds	r5, r0, #0
1000c9ce:	1c16      	adds	r6, r2, #0
1000c9d0:	4798      	blx	r3
1000c9d2:	1c07      	adds	r7, r0, #0
1000c9d4:	2001      	movs	r0, #1
1000c9d6:	2f07      	cmp	r7, #7
1000c9d8:	d875      	bhi.n	1000cac6 <at_ble_authenticate+0x10e>
1000c9da:	2c00      	cmp	r4, #0
1000c9dc:	d113      	bne.n	1000ca06 <at_ble_authenticate+0x4e>
1000c9de:	2312      	movs	r3, #18
1000c9e0:	435f      	muls	r7, r3
1000c9e2:	4b3b      	ldr	r3, [pc, #236]	; (1000cad0 <at_ble_authenticate+0x118>)
1000c9e4:	5cfb      	ldrb	r3, [r7, r3]
1000c9e6:	4283      	cmp	r3, r0
1000c9e8:	d001      	beq.n	1000c9ee <at_ble_authenticate+0x36>
1000c9ea:	20cf      	movs	r0, #207	; 0xcf
1000c9ec:	e06b      	b.n	1000cac6 <at_ble_authenticate+0x10e>
1000c9ee:	9504      	str	r5, [sp, #16]
1000c9f0:	9400      	str	r4, [sp, #0]
1000c9f2:	9401      	str	r4, [sp, #4]
1000c9f4:	9402      	str	r4, [sp, #8]
1000c9f6:	9403      	str	r4, [sp, #12]
1000c9f8:	1c20      	adds	r0, r4, #0
1000c9fa:	1c21      	adds	r1, r4, #0
1000c9fc:	1c22      	adds	r2, r4, #0
1000c9fe:	1c23      	adds	r3, r4, #0
1000ca00:	4d34      	ldr	r5, [pc, #208]	; (1000cad4 <at_ble_authenticate+0x11c>)
1000ca02:	47a8      	blx	r5
1000ca04:	e05e      	b.n	1000cac4 <at_ble_authenticate+0x10c>
1000ca06:	7922      	ldrb	r2, [r4, #4]
1000ca08:	2a06      	cmp	r2, #6
1000ca0a:	d9ee      	bls.n	1000c9ea <at_ble_authenticate+0x32>
1000ca0c:	7963      	ldrb	r3, [r4, #5]
1000ca0e:	2b10      	cmp	r3, #16
1000ca10:	d8eb      	bhi.n	1000c9ea <at_ble_authenticate+0x32>
1000ca12:	429a      	cmp	r2, r3
1000ca14:	d8e9      	bhi.n	1000c9ea <at_ble_authenticate+0x32>
1000ca16:	7a23      	ldrb	r3, [r4, #8]
1000ca18:	2b04      	cmp	r3, #4
1000ca1a:	d8e6      	bhi.n	1000c9ea <at_ble_authenticate+0x32>
1000ca1c:	79a3      	ldrb	r3, [r4, #6]
1000ca1e:	2b07      	cmp	r3, #7
1000ca20:	d8e3      	bhi.n	1000c9ea <at_ble_authenticate+0x32>
1000ca22:	79e3      	ldrb	r3, [r4, #7]
1000ca24:	2b07      	cmp	r3, #7
1000ca26:	d8e0      	bhi.n	1000c9ea <at_ble_authenticate+0x32>
1000ca28:	78a3      	ldrb	r3, [r4, #2]
1000ca2a:	2b00      	cmp	r3, #0
1000ca2c:	d006      	beq.n	1000ca3c <at_ble_authenticate+0x84>
1000ca2e:	2e00      	cmp	r6, #0
1000ca30:	d0db      	beq.n	1000c9ea <at_ble_authenticate+0x32>
1000ca32:	4829      	ldr	r0, [pc, #164]	; (1000cad8 <at_ble_authenticate+0x120>)
1000ca34:	1c31      	adds	r1, r6, #0
1000ca36:	221c      	movs	r2, #28
1000ca38:	4b28      	ldr	r3, [pc, #160]	; (1000cadc <at_ble_authenticate+0x124>)
1000ca3a:	4798      	blx	r3
1000ca3c:	9b07      	ldr	r3, [sp, #28]
1000ca3e:	2b00      	cmp	r3, #0
1000ca40:	d005      	beq.n	1000ca4e <at_ble_authenticate+0x96>
1000ca42:	4827      	ldr	r0, [pc, #156]	; (1000cae0 <at_ble_authenticate+0x128>)
1000ca44:	1c19      	adds	r1, r3, #0
1000ca46:	309a      	adds	r0, #154	; 0x9a
1000ca48:	2210      	movs	r2, #16
1000ca4a:	4b24      	ldr	r3, [pc, #144]	; (1000cadc <at_ble_authenticate+0x124>)
1000ca4c:	4798      	blx	r3
1000ca4e:	7863      	ldrb	r3, [r4, #1]
1000ca50:	78a2      	ldrb	r2, [r4, #2]
1000ca52:	009b      	lsls	r3, r3, #2
1000ca54:	4313      	orrs	r3, r2
1000ca56:	2212      	movs	r2, #18
1000ca58:	4357      	muls	r7, r2
1000ca5a:	4a1d      	ldr	r2, [pc, #116]	; (1000cad0 <at_ble_authenticate+0x118>)
1000ca5c:	b2db      	uxtb	r3, r3
1000ca5e:	5cba      	ldrb	r2, [r7, r2]
1000ca60:	2a00      	cmp	r2, #0
1000ca62:	d116      	bne.n	1000ca92 <at_ble_authenticate+0xda>
1000ca64:	79a0      	ldrb	r0, [r4, #6]
1000ca66:	0742      	lsls	r2, r0, #29
1000ca68:	d502      	bpl.n	1000ca70 <at_ble_authenticate+0xb8>
1000ca6a:	9a07      	ldr	r2, [sp, #28]
1000ca6c:	2a00      	cmp	r2, #0
1000ca6e:	d0bc      	beq.n	1000c9ea <at_ble_authenticate+0x32>
1000ca70:	07c2      	lsls	r2, r0, #31
1000ca72:	d501      	bpl.n	1000ca78 <at_ble_authenticate+0xc0>
1000ca74:	2e00      	cmp	r6, #0
1000ca76:	d0b8      	beq.n	1000c9ea <at_ble_authenticate+0x32>
1000ca78:	7966      	ldrb	r6, [r4, #5]
1000ca7a:	7821      	ldrb	r1, [r4, #0]
1000ca7c:	78e2      	ldrb	r2, [r4, #3]
1000ca7e:	9600      	str	r6, [sp, #0]
1000ca80:	9001      	str	r0, [sp, #4]
1000ca82:	79e0      	ldrb	r0, [r4, #7]
1000ca84:	9002      	str	r0, [sp, #8]
1000ca86:	7a20      	ldrb	r0, [r4, #8]
1000ca88:	4c16      	ldr	r4, [pc, #88]	; (1000cae4 <at_ble_authenticate+0x12c>)
1000ca8a:	9003      	str	r0, [sp, #12]
1000ca8c:	1c28      	adds	r0, r5, #0
1000ca8e:	47a0      	blx	r4
1000ca90:	e018      	b.n	1000cac4 <at_ble_authenticate+0x10c>
1000ca92:	2a01      	cmp	r2, #1
1000ca94:	d1a9      	bne.n	1000c9ea <at_ble_authenticate+0x32>
1000ca96:	79e0      	ldrb	r0, [r4, #7]
1000ca98:	0742      	lsls	r2, r0, #29
1000ca9a:	d502      	bpl.n	1000caa2 <at_ble_authenticate+0xea>
1000ca9c:	9a07      	ldr	r2, [sp, #28]
1000ca9e:	2a00      	cmp	r2, #0
1000caa0:	d0a3      	beq.n	1000c9ea <at_ble_authenticate+0x32>
1000caa2:	07c2      	lsls	r2, r0, #31
1000caa4:	d501      	bpl.n	1000caaa <at_ble_authenticate+0xf2>
1000caa6:	2e00      	cmp	r6, #0
1000caa8:	d09f      	beq.n	1000c9ea <at_ble_authenticate+0x32>
1000caaa:	7966      	ldrb	r6, [r4, #5]
1000caac:	7821      	ldrb	r1, [r4, #0]
1000caae:	78e2      	ldrb	r2, [r4, #3]
1000cab0:	9600      	str	r6, [sp, #0]
1000cab2:	79a6      	ldrb	r6, [r4, #6]
1000cab4:	9002      	str	r0, [sp, #8]
1000cab6:	9601      	str	r6, [sp, #4]
1000cab8:	7a20      	ldrb	r0, [r4, #8]
1000caba:	9504      	str	r5, [sp, #16]
1000cabc:	9003      	str	r0, [sp, #12]
1000cabe:	4c05      	ldr	r4, [pc, #20]	; (1000cad4 <at_ble_authenticate+0x11c>)
1000cac0:	2001      	movs	r0, #1
1000cac2:	47a0      	blx	r4
1000cac4:	2000      	movs	r0, #0
1000cac6:	b00b      	add	sp, #44	; 0x2c
1000cac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000caca:	46c0      	nop			; (mov r8, r8)
1000cacc:	1000cea1 	.word	0x1000cea1
1000cad0:	10012bfa 	.word	0x10012bfa
1000cad4:	1000d411 	.word	0x1000d411
1000cad8:	10012d08 	.word	0x10012d08
1000cadc:	1000f7d7 	.word	0x1000f7d7
1000cae0:	10012c8a 	.word	0x10012c8a
1000cae4:	1000d1f1 	.word	0x1000d1f1

1000cae8 <at_ble_pair_key_reply>:
1000cae8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000caea:	b085      	sub	sp, #20
1000caec:	1c05      	adds	r5, r0, #0
1000caee:	1c0c      	adds	r4, r1, #0
1000caf0:	1c16      	adds	r6, r2, #0
1000caf2:	2100      	movs	r1, #0
1000caf4:	4668      	mov	r0, sp
1000caf6:	2210      	movs	r2, #16
1000caf8:	4b18      	ldr	r3, [pc, #96]	; (1000cb5c <at_ble_pair_key_reply+0x74>)
1000cafa:	4798      	blx	r3
1000cafc:	2101      	movs	r1, #1
1000cafe:	2e00      	cmp	r6, #0
1000cb00:	d101      	bne.n	1000cb06 <at_ble_pair_key_reply+0x1e>
1000cb02:	1c31      	adds	r1, r6, #0
1000cb04:	466e      	mov	r6, sp
1000cb06:	2c00      	cmp	r4, #0
1000cb08:	d116      	bne.n	1000cb38 <at_ble_pair_key_reply+0x50>
1000cb0a:	2701      	movs	r7, #1
1000cb0c:	1c23      	adds	r3, r4, #0
1000cb0e:	1d70      	adds	r0, r6, #5
1000cb10:	3e01      	subs	r6, #1
1000cb12:	7802      	ldrb	r2, [r0, #0]
1000cb14:	3801      	subs	r0, #1
1000cb16:	3a30      	subs	r2, #48	; 0x30
1000cb18:	437a      	muls	r2, r7
1000cb1a:	189b      	adds	r3, r3, r2
1000cb1c:	220a      	movs	r2, #10
1000cb1e:	4357      	muls	r7, r2
1000cb20:	42b0      	cmp	r0, r6
1000cb22:	d1f6      	bne.n	1000cb12 <at_ble_pair_key_reply+0x2a>
1000cb24:	466a      	mov	r2, sp
1000cb26:	4668      	mov	r0, sp
1000cb28:	7013      	strb	r3, [r2, #0]
1000cb2a:	0a1a      	lsrs	r2, r3, #8
1000cb2c:	7042      	strb	r2, [r0, #1]
1000cb2e:	0c1a      	lsrs	r2, r3, #16
1000cb30:	0e1b      	lsrs	r3, r3, #24
1000cb32:	7082      	strb	r2, [r0, #2]
1000cb34:	70c3      	strb	r3, [r0, #3]
1000cb36:	e009      	b.n	1000cb4c <at_ble_pair_key_reply+0x64>
1000cb38:	20cf      	movs	r0, #207	; 0xcf
1000cb3a:	2c01      	cmp	r4, #1
1000cb3c:	d10c      	bne.n	1000cb58 <at_ble_pair_key_reply+0x70>
1000cb3e:	2300      	movs	r3, #0
1000cb40:	4668      	mov	r0, sp
1000cb42:	5cf2      	ldrb	r2, [r6, r3]
1000cb44:	54c2      	strb	r2, [r0, r3]
1000cb46:	3301      	adds	r3, #1
1000cb48:	2b10      	cmp	r3, #16
1000cb4a:	d1f9      	bne.n	1000cb40 <at_ble_pair_key_reply+0x58>
1000cb4c:	2004      	movs	r0, #4
1000cb4e:	466a      	mov	r2, sp
1000cb50:	1c2b      	adds	r3, r5, #0
1000cb52:	4c03      	ldr	r4, [pc, #12]	; (1000cb60 <at_ble_pair_key_reply+0x78>)
1000cb54:	47a0      	blx	r4
1000cb56:	2000      	movs	r0, #0
1000cb58:	b005      	add	sp, #20
1000cb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb5c:	1000f7e9 	.word	0x1000f7e9
1000cb60:	1000d48d 	.word	0x1000d48d

1000cb64 <at_ble_send_slave_sec_request>:
1000cb64:	b570      	push	{r4, r5, r6, lr}
1000cb66:	4b0c      	ldr	r3, [pc, #48]	; (1000cb98 <at_ble_send_slave_sec_request+0x34>)
1000cb68:	1c0e      	adds	r6, r1, #0
1000cb6a:	2100      	movs	r1, #0
1000cb6c:	1c05      	adds	r5, r0, #0
1000cb6e:	1c14      	adds	r4, r2, #0
1000cb70:	4798      	blx	r3
1000cb72:	2301      	movs	r3, #1
1000cb74:	2807      	cmp	r0, #7
1000cb76:	d80d      	bhi.n	1000cb94 <at_ble_send_slave_sec_request+0x30>
1000cb78:	3311      	adds	r3, #17
1000cb7a:	4358      	muls	r0, r3
1000cb7c:	4b07      	ldr	r3, [pc, #28]	; (1000cb9c <at_ble_send_slave_sec_request+0x38>)
1000cb7e:	5cc2      	ldrb	r2, [r0, r3]
1000cb80:	23e0      	movs	r3, #224	; 0xe0
1000cb82:	2a01      	cmp	r2, #1
1000cb84:	d106      	bne.n	1000cb94 <at_ble_send_slave_sec_request+0x30>
1000cb86:	00b1      	lsls	r1, r6, #2
1000cb88:	430c      	orrs	r4, r1
1000cb8a:	4b05      	ldr	r3, [pc, #20]	; (1000cba0 <at_ble_send_slave_sec_request+0x3c>)
1000cb8c:	b2e1      	uxtb	r1, r4
1000cb8e:	1c28      	adds	r0, r5, #0
1000cb90:	4798      	blx	r3
1000cb92:	2300      	movs	r3, #0
1000cb94:	1c18      	adds	r0, r3, #0
1000cb96:	bd70      	pop	{r4, r5, r6, pc}
1000cb98:	1000cea1 	.word	0x1000cea1
1000cb9c:	10012bfa 	.word	0x10012bfa
1000cba0:	1000d4dd 	.word	0x1000d4dd

1000cba4 <at_ble_encryption_start>:
1000cba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cba6:	23cf      	movs	r3, #207	; 0xcf
1000cba8:	2900      	cmp	r1, #0
1000cbaa:	d02b      	beq.n	1000cc04 <at_ble_encryption_start+0x60>
1000cbac:	2a05      	cmp	r2, #5
1000cbae:	d829      	bhi.n	1000cc04 <at_ble_encryption_start+0x60>
1000cbb0:	2701      	movs	r7, #1
1000cbb2:	1c3d      	adds	r5, r7, #0
1000cbb4:	2433      	movs	r4, #51	; 0x33
1000cbb6:	4095      	lsls	r5, r2
1000cbb8:	4225      	tst	r5, r4
1000cbba:	d023      	beq.n	1000cc04 <at_ble_encryption_start+0x60>
1000cbbc:	7e8c      	ldrb	r4, [r1, #26]
1000cbbe:	3c07      	subs	r4, #7
1000cbc0:	2c09      	cmp	r4, #9
1000cbc2:	d81f      	bhi.n	1000cc04 <at_ble_encryption_start+0x60>
1000cbc4:	4b10      	ldr	r3, [pc, #64]	; (1000cc08 <at_ble_encryption_start+0x64>)
1000cbc6:	1c0c      	adds	r4, r1, #0
1000cbc8:	2100      	movs	r1, #0
1000cbca:	1c15      	adds	r5, r2, #0
1000cbcc:	1c06      	adds	r6, r0, #0
1000cbce:	4798      	blx	r3
1000cbd0:	1c3b      	adds	r3, r7, #0
1000cbd2:	2807      	cmp	r0, #7
1000cbd4:	d816      	bhi.n	1000cc04 <at_ble_encryption_start+0x60>
1000cbd6:	2312      	movs	r3, #18
1000cbd8:	4358      	muls	r0, r3
1000cbda:	4b0c      	ldr	r3, [pc, #48]	; (1000cc0c <at_ble_encryption_start+0x68>)
1000cbdc:	5cc7      	ldrb	r7, [r0, r3]
1000cbde:	23e0      	movs	r3, #224	; 0xe0
1000cbe0:	2f00      	cmp	r7, #0
1000cbe2:	d10f      	bne.n	1000cc04 <at_ble_encryption_start+0x60>
1000cbe4:	1c21      	adds	r1, r4, #0
1000cbe6:	221c      	movs	r2, #28
1000cbe8:	4b09      	ldr	r3, [pc, #36]	; (1000cc10 <at_ble_encryption_start+0x6c>)
1000cbea:	480a      	ldr	r0, [pc, #40]	; (1000cc14 <at_ble_encryption_start+0x70>)
1000cbec:	4798      	blx	r3
1000cbee:	1c23      	adds	r3, r4, #0
1000cbf0:	7ea1      	ldrb	r1, [r4, #26]
1000cbf2:	8a22      	ldrh	r2, [r4, #16]
1000cbf4:	3312      	adds	r3, #18
1000cbf6:	9100      	str	r1, [sp, #0]
1000cbf8:	9501      	str	r5, [sp, #4]
1000cbfa:	1c21      	adds	r1, r4, #0
1000cbfc:	1c30      	adds	r0, r6, #0
1000cbfe:	4c06      	ldr	r4, [pc, #24]	; (1000cc18 <at_ble_encryption_start+0x74>)
1000cc00:	47a0      	blx	r4
1000cc02:	1c3b      	adds	r3, r7, #0
1000cc04:	1c18      	adds	r0, r3, #0
1000cc06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000cc08:	1000cea1 	.word	0x1000cea1
1000cc0c:	10012bfa 	.word	0x10012bfa
1000cc10:	1000f7d7 	.word	0x1000f7d7
1000cc14:	10012d08 	.word	0x10012d08
1000cc18:	1000d51d 	.word	0x1000d51d

1000cc1c <at_ble_encryption_request_reply>:
1000cc1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000cc1e:	24cf      	movs	r4, #207	; 0xcf
1000cc20:	2b00      	cmp	r3, #0
1000cc22:	d011      	beq.n	1000cc48 <at_ble_encryption_request_reply+0x2c>
1000cc24:	2a00      	cmp	r2, #0
1000cc26:	d00a      	beq.n	1000cc3e <at_ble_encryption_request_reply+0x22>
1000cc28:	2905      	cmp	r1, #5
1000cc2a:	d80d      	bhi.n	1000cc48 <at_ble_encryption_request_reply+0x2c>
1000cc2c:	2501      	movs	r5, #1
1000cc2e:	2633      	movs	r6, #51	; 0x33
1000cc30:	408d      	lsls	r5, r1
1000cc32:	4235      	tst	r5, r6
1000cc34:	d008      	beq.n	1000cc48 <at_ble_encryption_request_reply+0x2c>
1000cc36:	7e9d      	ldrb	r5, [r3, #26]
1000cc38:	3d07      	subs	r5, #7
1000cc3a:	2d09      	cmp	r5, #9
1000cc3c:	d804      	bhi.n	1000cc48 <at_ble_encryption_request_reply+0x2c>
1000cc3e:	7e9c      	ldrb	r4, [r3, #26]
1000cc40:	9400      	str	r4, [sp, #0]
1000cc42:	4c02      	ldr	r4, [pc, #8]	; (1000cc4c <at_ble_encryption_request_reply+0x30>)
1000cc44:	47a0      	blx	r4
1000cc46:	2400      	movs	r4, #0
1000cc48:	1c20      	adds	r0, r4, #0
1000cc4a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000cc4c:	1000d5d9 	.word	0x1000d5d9

1000cc50 <rx_callback>:
1000cc50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cc52:	88c5      	ldrh	r5, [r0, #6]
1000cc54:	8807      	ldrh	r7, [r0, #0]
1000cc56:	8886      	ldrh	r6, [r0, #4]
1000cc58:	2d00      	cmp	r5, #0
1000cc5a:	d10c      	bne.n	1000cc76 <rx_callback+0x26>
1000cc5c:	4b19      	ldr	r3, [pc, #100]	; (1000ccc4 <rx_callback+0x74>)
1000cc5e:	1c38      	adds	r0, r7, #0
1000cc60:	1c31      	adds	r1, r6, #0
1000cc62:	1c2a      	adds	r2, r5, #0
1000cc64:	4798      	blx	r3
1000cc66:	1e03      	subs	r3, r0, #0
1000cc68:	d12a      	bne.n	1000ccc0 <rx_callback+0x70>
1000cc6a:	1c38      	adds	r0, r7, #0
1000cc6c:	1c31      	adds	r1, r6, #0
1000cc6e:	1c1a      	adds	r2, r3, #0
1000cc70:	4c15      	ldr	r4, [pc, #84]	; (1000ccc8 <rx_callback+0x78>)
1000cc72:	47a0      	blx	r4
1000cc74:	e024      	b.n	1000ccc0 <rx_callback+0x70>
1000cc76:	2296      	movs	r2, #150	; 0x96
1000cc78:	4c14      	ldr	r4, [pc, #80]	; (1000cccc <rx_callback+0x7c>)
1000cc7a:	0092      	lsls	r2, r2, #2
1000cc7c:	8823      	ldrh	r3, [r4, #0]
1000cc7e:	195b      	adds	r3, r3, r5
1000cc80:	4293      	cmp	r3, r2
1000cc82:	dd01      	ble.n	1000cc88 <rx_callback+0x38>
1000cc84:	2300      	movs	r3, #0
1000cc86:	8023      	strh	r3, [r4, #0]
1000cc88:	1c01      	adds	r1, r0, #0
1000cc8a:	4a11      	ldr	r2, [pc, #68]	; (1000ccd0 <rx_callback+0x80>)
1000cc8c:	8823      	ldrh	r3, [r4, #0]
1000cc8e:	3108      	adds	r1, #8
1000cc90:	189b      	adds	r3, r3, r2
1000cc92:	9301      	str	r3, [sp, #4]
1000cc94:	1c18      	adds	r0, r3, #0
1000cc96:	1c2a      	adds	r2, r5, #0
1000cc98:	4b0e      	ldr	r3, [pc, #56]	; (1000ccd4 <rx_callback+0x84>)
1000cc9a:	4798      	blx	r3
1000cc9c:	1c38      	adds	r0, r7, #0
1000cc9e:	1c31      	adds	r1, r6, #0
1000cca0:	9a01      	ldr	r2, [sp, #4]
1000cca2:	4b08      	ldr	r3, [pc, #32]	; (1000ccc4 <rx_callback+0x74>)
1000cca4:	4798      	blx	r3
1000cca6:	2800      	cmp	r0, #0
1000cca8:	d10a      	bne.n	1000ccc0 <rx_callback+0x70>
1000ccaa:	4b09      	ldr	r3, [pc, #36]	; (1000ccd0 <rx_callback+0x80>)
1000ccac:	8822      	ldrh	r2, [r4, #0]
1000ccae:	1c31      	adds	r1, r6, #0
1000ccb0:	18d2      	adds	r2, r2, r3
1000ccb2:	1c38      	adds	r0, r7, #0
1000ccb4:	1c2b      	adds	r3, r5, #0
1000ccb6:	4e04      	ldr	r6, [pc, #16]	; (1000ccc8 <rx_callback+0x78>)
1000ccb8:	47b0      	blx	r6
1000ccba:	8823      	ldrh	r3, [r4, #0]
1000ccbc:	18ed      	adds	r5, r5, r3
1000ccbe:	8025      	strh	r5, [r4, #0]
1000ccc0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ccc2:	46c0      	nop			; (mov r8, r8)
1000ccc4:	1000ba11 	.word	0x1000ba11
1000ccc8:	1000b9a5 	.word	0x1000b9a5
1000cccc:	10012d64 	.word	0x10012d64
1000ccd0:	10013168 	.word	0x10013168
1000ccd4:	1000f7d7 	.word	0x1000f7d7

1000ccd8 <interface_send>:
1000ccd8:	b508      	push	{r3, lr}
1000ccda:	4b02      	ldr	r3, [pc, #8]	; (1000cce4 <interface_send+0xc>)
1000ccdc:	4798      	blx	r3
1000ccde:	2000      	movs	r0, #0
1000cce0:	bd08      	pop	{r3, pc}
1000cce2:	46c0      	nop			; (mov r8, r8)
1000cce4:	1000abb1 	.word	0x1000abb1

1000cce8 <interface_init>:
1000cce8:	2280      	movs	r2, #128	; 0x80
1000ccea:	b510      	push	{r4, lr}
1000ccec:	2100      	movs	r1, #0
1000ccee:	4c08      	ldr	r4, [pc, #32]	; (1000cd10 <interface_init+0x28>)
1000ccf0:	0092      	lsls	r2, r2, #2
1000ccf2:	4808      	ldr	r0, [pc, #32]	; (1000cd14 <interface_init+0x2c>)
1000ccf4:	47a0      	blx	r4
1000ccf6:	2296      	movs	r2, #150	; 0x96
1000ccf8:	2100      	movs	r1, #0
1000ccfa:	0092      	lsls	r2, r2, #2
1000ccfc:	4806      	ldr	r0, [pc, #24]	; (1000cd18 <interface_init+0x30>)
1000ccfe:	47a0      	blx	r4
1000cd00:	2200      	movs	r2, #0
1000cd02:	4b06      	ldr	r3, [pc, #24]	; (1000cd1c <interface_init+0x34>)
1000cd04:	801a      	strh	r2, [r3, #0]
1000cd06:	4a06      	ldr	r2, [pc, #24]	; (1000cd20 <interface_init+0x38>)
1000cd08:	4b06      	ldr	r3, [pc, #24]	; (1000cd24 <interface_init+0x3c>)
1000cd0a:	601a      	str	r2, [r3, #0]
1000cd0c:	bd10      	pop	{r4, pc}
1000cd0e:	46c0      	nop			; (mov r8, r8)
1000cd10:	1000f7e9 	.word	0x1000f7e9
1000cd14:	10012f68 	.word	0x10012f68
1000cd18:	10013168 	.word	0x10013168
1000cd1c:	10012d64 	.word	0x10012d64
1000cd20:	10012d68 	.word	0x10012d68
1000cd24:	100118a0 	.word	0x100118a0

1000cd28 <platform_cmd_cmpl_signal>:
1000cd28:	2201      	movs	r2, #1
1000cd2a:	4b01      	ldr	r3, [pc, #4]	; (1000cd30 <platform_cmd_cmpl_signal+0x8>)
1000cd2c:	601a      	str	r2, [r3, #0]
1000cd2e:	4770      	bx	lr
1000cd30:	10011fc0 	.word	0x10011fc0

1000cd34 <platform_cmd_cmpl_wait>:
1000cd34:	b510      	push	{r4, lr}
1000cd36:	1c04      	adds	r4, r0, #0
1000cd38:	4b07      	ldr	r3, [pc, #28]	; (1000cd58 <platform_cmd_cmpl_wait+0x24>)
1000cd3a:	681a      	ldr	r2, [r3, #0]
1000cd3c:	2a01      	cmp	r2, #1
1000cd3e:	d003      	beq.n	1000cd48 <platform_cmd_cmpl_wait+0x14>
1000cd40:	4b06      	ldr	r3, [pc, #24]	; (1000cd5c <platform_cmd_cmpl_wait+0x28>)
1000cd42:	2000      	movs	r0, #0
1000cd44:	4798      	blx	r3
1000cd46:	e7f7      	b.n	1000cd38 <platform_cmd_cmpl_wait+0x4>
1000cd48:	6819      	ldr	r1, [r3, #0]
1000cd4a:	2901      	cmp	r1, #1
1000cd4c:	d102      	bne.n	1000cd54 <platform_cmd_cmpl_wait+0x20>
1000cd4e:	2200      	movs	r2, #0
1000cd50:	601a      	str	r2, [r3, #0]
1000cd52:	e000      	b.n	1000cd56 <platform_cmd_cmpl_wait+0x22>
1000cd54:	7022      	strb	r2, [r4, #0]
1000cd56:	bd10      	pop	{r4, pc}
1000cd58:	10011fc0 	.word	0x10011fc0
1000cd5c:	1000ac59 	.word	0x1000ac59

1000cd60 <start_timer>:
1000cd60:	4770      	bx	lr

1000cd62 <stop_timer>:
1000cd62:	4770      	bx	lr

1000cd64 <dbg_le_set_bd_addr_req_handler>:
1000cd64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cd66:	466b      	mov	r3, sp
1000cd68:	1dde      	adds	r6, r3, #7
1000cd6a:	2300      	movs	r3, #0
1000cd6c:	7033      	strb	r3, [r6, #0]
1000cd6e:	230f      	movs	r3, #15
1000cd70:	4c13      	ldr	r4, [pc, #76]	; (1000cdc0 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000cd72:	2703      	movs	r7, #3
1000cd74:	7023      	strb	r3, [r4, #0]
1000cd76:	2300      	movs	r3, #0
1000cd78:	70e3      	strb	r3, [r4, #3]
1000cd7a:	4b12      	ldr	r3, [pc, #72]	; (1000cdc4 <dbg_le_set_bd_addr_req_handler+0x60>)
1000cd7c:	1c01      	adds	r1, r0, #0
1000cd7e:	881a      	ldrh	r2, [r3, #0]
1000cd80:	881b      	ldrh	r3, [r3, #0]
1000cd82:	7122      	strb	r2, [r4, #4]
1000cd84:	0a1b      	lsrs	r3, r3, #8
1000cd86:	2206      	movs	r2, #6
1000cd88:	7163      	strb	r3, [r4, #5]
1000cd8a:	480f      	ldr	r0, [pc, #60]	; (1000cdc8 <dbg_le_set_bd_addr_req_handler+0x64>)
1000cd8c:	4b0f      	ldr	r3, [pc, #60]	; (1000cdcc <dbg_le_set_bd_addr_req_handler+0x68>)
1000cd8e:	7067      	strb	r7, [r4, #1]
1000cd90:	70a7      	strb	r7, [r4, #2]
1000cd92:	4798      	blx	r3
1000cd94:	4d0e      	ldr	r5, [pc, #56]	; (1000cdd0 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000cd96:	4b0f      	ldr	r3, [pc, #60]	; (1000cdd4 <dbg_le_set_bd_addr_req_handler+0x70>)
1000cd98:	210e      	movs	r1, #14
1000cd9a:	802b      	strh	r3, [r5, #0]
1000cd9c:	2306      	movs	r3, #6
1000cd9e:	71a3      	strb	r3, [r4, #6]
1000cda0:	2300      	movs	r3, #0
1000cda2:	1c20      	adds	r0, r4, #0
1000cda4:	71e3      	strb	r3, [r4, #7]
1000cda6:	4b0c      	ldr	r3, [pc, #48]	; (1000cdd8 <dbg_le_set_bd_addr_req_handler+0x74>)
1000cda8:	80af      	strh	r7, [r5, #4]
1000cdaa:	4798      	blx	r3
1000cdac:	1c30      	adds	r0, r6, #0
1000cdae:	4b0b      	ldr	r3, [pc, #44]	; (1000cddc <dbg_le_set_bd_addr_req_handler+0x78>)
1000cdb0:	4798      	blx	r3
1000cdb2:	7833      	ldrb	r3, [r6, #0]
1000cdb4:	20e2      	movs	r0, #226	; 0xe2
1000cdb6:	2b00      	cmp	r3, #0
1000cdb8:	d101      	bne.n	1000cdbe <dbg_le_set_bd_addr_req_handler+0x5a>
1000cdba:	68ab      	ldr	r3, [r5, #8]
1000cdbc:	7818      	ldrb	r0, [r3, #0]
1000cdbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000cdc0:	10012f68 	.word	0x10012f68
1000cdc4:	10012bf8 	.word	0x10012bf8
1000cdc8:	10012f70 	.word	0x10012f70
1000cdcc:	1000f7d7 	.word	0x1000f7d7
1000cdd0:	10012bec 	.word	0x10012bec
1000cdd4:	00000329 	.word	0x00000329
1000cdd8:	1000ccd9 	.word	0x1000ccd9
1000cddc:	1000cd35 	.word	0x1000cd35

1000cde0 <gapc_get_dev_info_cfm.constprop.1>:
1000cde0:	b538      	push	{r3, r4, r5, lr}
1000cde2:	230b      	movs	r3, #11
1000cde4:	4c27      	ldr	r4, [pc, #156]	; (1000ce84 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000cde6:	7023      	strb	r3, [r4, #0]
1000cde8:	3303      	adds	r3, #3
1000cdea:	7063      	strb	r3, [r4, #1]
1000cdec:	3329      	adds	r3, #41	; 0x29
1000cdee:	70a3      	strb	r3, [r4, #2]
1000cdf0:	4b25      	ldr	r3, [pc, #148]	; (1000ce88 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000cdf2:	70e1      	strb	r1, [r4, #3]
1000cdf4:	881a      	ldrh	r2, [r3, #0]
1000cdf6:	881b      	ldrh	r3, [r3, #0]
1000cdf8:	7122      	strb	r2, [r4, #4]
1000cdfa:	0a1b      	lsrs	r3, r3, #8
1000cdfc:	7163      	strb	r3, [r4, #5]
1000cdfe:	2300      	movs	r3, #0
1000ce00:	7220      	strb	r0, [r4, #8]
1000ce02:	7263      	strb	r3, [r4, #9]
1000ce04:	2801      	cmp	r0, #1
1000ce06:	d02b      	beq.n	1000ce60 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000ce08:	4298      	cmp	r0, r3
1000ce0a:	d01b      	beq.n	1000ce44 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000ce0c:	2802      	cmp	r0, #2
1000ce0e:	d12f      	bne.n	1000ce70 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000ce10:	4b1e      	ldr	r3, [pc, #120]	; (1000ce8c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ce12:	2112      	movs	r1, #18
1000ce14:	1c1a      	adds	r2, r3, #0
1000ce16:	32ce      	adds	r2, #206	; 0xce
1000ce18:	8812      	ldrh	r2, [r2, #0]
1000ce1a:	72a2      	strb	r2, [r4, #10]
1000ce1c:	0a12      	lsrs	r2, r2, #8
1000ce1e:	72e2      	strb	r2, [r4, #11]
1000ce20:	1c1a      	adds	r2, r3, #0
1000ce22:	32d0      	adds	r2, #208	; 0xd0
1000ce24:	8812      	ldrh	r2, [r2, #0]
1000ce26:	7322      	strb	r2, [r4, #12]
1000ce28:	0a12      	lsrs	r2, r2, #8
1000ce2a:	7362      	strb	r2, [r4, #13]
1000ce2c:	1c1a      	adds	r2, r3, #0
1000ce2e:	32d2      	adds	r2, #210	; 0xd2
1000ce30:	8812      	ldrh	r2, [r2, #0]
1000ce32:	33d4      	adds	r3, #212	; 0xd4
1000ce34:	73a2      	strb	r2, [r4, #14]
1000ce36:	0a12      	lsrs	r2, r2, #8
1000ce38:	73e2      	strb	r2, [r4, #15]
1000ce3a:	881b      	ldrh	r3, [r3, #0]
1000ce3c:	7423      	strb	r3, [r4, #16]
1000ce3e:	0a1b      	lsrs	r3, r3, #8
1000ce40:	7463      	strb	r3, [r4, #17]
1000ce42:	e016      	b.n	1000ce72 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ce44:	4b11      	ldr	r3, [pc, #68]	; (1000ce8c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ce46:	4912      	ldr	r1, [pc, #72]	; (1000ce90 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000ce48:	33aa      	adds	r3, #170	; 0xaa
1000ce4a:	881d      	ldrh	r5, [r3, #0]
1000ce4c:	4811      	ldr	r0, [pc, #68]	; (1000ce94 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000ce4e:	0a2b      	lsrs	r3, r5, #8
1000ce50:	72a5      	strb	r5, [r4, #10]
1000ce52:	72e3      	strb	r3, [r4, #11]
1000ce54:	1c2a      	adds	r2, r5, #0
1000ce56:	4b10      	ldr	r3, [pc, #64]	; (1000ce98 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000ce58:	350c      	adds	r5, #12
1000ce5a:	4798      	blx	r3
1000ce5c:	b2a9      	uxth	r1, r5
1000ce5e:	e008      	b.n	1000ce72 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ce60:	4b0a      	ldr	r3, [pc, #40]	; (1000ce8c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ce62:	210c      	movs	r1, #12
1000ce64:	33cc      	adds	r3, #204	; 0xcc
1000ce66:	881b      	ldrh	r3, [r3, #0]
1000ce68:	72a3      	strb	r3, [r4, #10]
1000ce6a:	0a1b      	lsrs	r3, r3, #8
1000ce6c:	72e3      	strb	r3, [r4, #11]
1000ce6e:	e000      	b.n	1000ce72 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ce70:	210a      	movs	r1, #10
1000ce72:	1c0b      	adds	r3, r1, #0
1000ce74:	3b08      	subs	r3, #8
1000ce76:	71a3      	strb	r3, [r4, #6]
1000ce78:	121b      	asrs	r3, r3, #8
1000ce7a:	71e3      	strb	r3, [r4, #7]
1000ce7c:	1c20      	adds	r0, r4, #0
1000ce7e:	4b07      	ldr	r3, [pc, #28]	; (1000ce9c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000ce80:	4798      	blx	r3
1000ce82:	bd38      	pop	{r3, r4, r5, pc}
1000ce84:	10012f68 	.word	0x10012f68
1000ce88:	10012bf8 	.word	0x10012bf8
1000ce8c:	10012c8a 	.word	0x10012c8a
1000ce90:	10012d36 	.word	0x10012d36
1000ce94:	10012f74 	.word	0x10012f74
1000ce98:	1000f7d7 	.word	0x1000f7d7
1000ce9c:	1000ccd9 	.word	0x1000ccd9

1000cea0 <check_ConnData_idx_role>:
1000cea0:	4b0c      	ldr	r3, [pc, #48]	; (1000ced4 <check_ConnData_idx_role+0x34>)
1000cea2:	b570      	push	{r4, r5, r6, lr}
1000cea4:	1c04      	adds	r4, r0, #0
1000cea6:	2008      	movs	r0, #8
1000cea8:	429c      	cmp	r4, r3
1000ceaa:	d011      	beq.n	1000ced0 <check_ConnData_idx_role+0x30>
1000ceac:	2300      	movs	r3, #0
1000ceae:	2212      	movs	r2, #18
1000ceb0:	435a      	muls	r2, r3
1000ceb2:	4d09      	ldr	r5, [pc, #36]	; (1000ced8 <check_ConnData_idx_role+0x38>)
1000ceb4:	b2d8      	uxtb	r0, r3
1000ceb6:	1956      	adds	r6, r2, r5
1000ceb8:	8976      	ldrh	r6, [r6, #10]
1000ceba:	42a6      	cmp	r6, r4
1000cebc:	d104      	bne.n	1000cec8 <check_ConnData_idx_role+0x28>
1000cebe:	2900      	cmp	r1, #0
1000cec0:	d006      	beq.n	1000ced0 <check_ConnData_idx_role+0x30>
1000cec2:	5d53      	ldrb	r3, [r2, r5]
1000cec4:	700b      	strb	r3, [r1, #0]
1000cec6:	e003      	b.n	1000ced0 <check_ConnData_idx_role+0x30>
1000cec8:	3301      	adds	r3, #1
1000ceca:	2b08      	cmp	r3, #8
1000cecc:	d1ef      	bne.n	1000ceae <check_ConnData_idx_role+0xe>
1000cece:	1c18      	adds	r0, r3, #0
1000ced0:	bd70      	pop	{r4, r5, r6, pc}
1000ced2:	46c0      	nop			; (mov r8, r8)
1000ced4:	0000ffff 	.word	0x0000ffff
1000ced8:	10012bfa 	.word	0x10012bfa

1000cedc <check_ConnData_emptyEntry>:
1000cedc:	2300      	movs	r3, #0
1000cede:	2212      	movs	r2, #18
1000cee0:	435a      	muls	r2, r3
1000cee2:	4906      	ldr	r1, [pc, #24]	; (1000cefc <check_ConnData_emptyEntry+0x20>)
1000cee4:	b2d8      	uxtb	r0, r3
1000cee6:	1852      	adds	r2, r2, r1
1000cee8:	8951      	ldrh	r1, [r2, #10]
1000ceea:	4a05      	ldr	r2, [pc, #20]	; (1000cf00 <check_ConnData_emptyEntry+0x24>)
1000ceec:	4291      	cmp	r1, r2
1000ceee:	d003      	beq.n	1000cef8 <check_ConnData_emptyEntry+0x1c>
1000cef0:	3301      	adds	r3, #1
1000cef2:	2b08      	cmp	r3, #8
1000cef4:	d1f3      	bne.n	1000cede <check_ConnData_emptyEntry+0x2>
1000cef6:	1c18      	adds	r0, r3, #0
1000cef8:	4770      	bx	lr
1000cefa:	46c0      	nop			; (mov r8, r8)
1000cefc:	10012bfa 	.word	0x10012bfa
1000cf00:	0000ffff 	.word	0x0000ffff

1000cf04 <gapc_cmp_evt>:
1000cf04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cf06:	780b      	ldrb	r3, [r1, #0]
1000cf08:	1c05      	adds	r5, r0, #0
1000cf0a:	1e58      	subs	r0, r3, #1
1000cf0c:	784e      	ldrb	r6, [r1, #1]
1000cf0e:	280f      	cmp	r0, #15
1000cf10:	d85a      	bhi.n	1000cfc8 <gapc_cmp_evt+0xc4>
1000cf12:	1c14      	adds	r4, r2, #0
1000cf14:	f001 fb7e 	bl	1000e614 <__gnu_thumb1_case_uqi>
1000cf18:	5858440a 	.word	0x5858440a
1000cf1c:	4b584444 	.word	0x4b584444
1000cf20:	0825122d 	.word	0x0825122d
1000cf24:	3e395858 	.word	0x3e395858
1000cf28:	203b      	movs	r0, #59	; 0x3b
1000cf2a:	e04e      	b.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf2c:	203b      	movs	r0, #59	; 0x3b
1000cf2e:	2e00      	cmp	r6, #0
1000cf30:	d04b      	beq.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf32:	0a2d      	lsrs	r5, r5, #8
1000cf34:	8015      	strh	r5, [r2, #0]
1000cf36:	7096      	strb	r6, [r2, #2]
1000cf38:	3835      	subs	r0, #53	; 0x35
1000cf3a:	e046      	b.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf3c:	466b      	mov	r3, sp
1000cf3e:	1ddf      	adds	r7, r3, #7
1000cf40:	2301      	movs	r3, #1
1000cf42:	0a2d      	lsrs	r5, r5, #8
1000cf44:	703b      	strb	r3, [r7, #0]
1000cf46:	1c28      	adds	r0, r5, #0
1000cf48:	1c39      	adds	r1, r7, #0
1000cf4a:	4b20      	ldr	r3, [pc, #128]	; (1000cfcc <gapc_cmp_evt+0xc8>)
1000cf4c:	4798      	blx	r3
1000cf4e:	2807      	cmp	r0, #7
1000cf50:	d803      	bhi.n	1000cf5a <gapc_cmp_evt+0x56>
1000cf52:	783b      	ldrb	r3, [r7, #0]
1000cf54:	203b      	movs	r0, #59	; 0x3b
1000cf56:	2b00      	cmp	r3, #0
1000cf58:	d037      	beq.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf5a:	8065      	strh	r5, [r4, #2]
1000cf5c:	7126      	strb	r6, [r4, #4]
1000cf5e:	2009      	movs	r0, #9
1000cf60:	e033      	b.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf62:	203b      	movs	r0, #59	; 0x3b
1000cf64:	2e00      	cmp	r6, #0
1000cf66:	d030      	beq.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf68:	0a2d      	lsrs	r5, r5, #8
1000cf6a:	8015      	strh	r5, [r2, #0]
1000cf6c:	7096      	strb	r6, [r2, #2]
1000cf6e:	382d      	subs	r0, #45	; 0x2d
1000cf70:	e02b      	b.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf72:	203b      	movs	r0, #59	; 0x3b
1000cf74:	2e00      	cmp	r6, #0
1000cf76:	d028      	beq.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf78:	2300      	movs	r3, #0
1000cf7a:	0a2d      	lsrs	r5, r5, #8
1000cf7c:	8015      	strh	r5, [r2, #0]
1000cf7e:	7096      	strb	r6, [r2, #2]
1000cf80:	8093      	strh	r3, [r2, #4]
1000cf82:	80d3      	strh	r3, [r2, #6]
1000cf84:	8113      	strh	r3, [r2, #8]
1000cf86:	3834      	subs	r0, #52	; 0x34
1000cf88:	e01f      	b.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf8a:	203b      	movs	r0, #59	; 0x3b
1000cf8c:	2e00      	cmp	r6, #0
1000cf8e:	d01c      	beq.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf90:	7216      	strb	r6, [r2, #8]
1000cf92:	e003      	b.n	1000cf9c <gapc_cmp_evt+0x98>
1000cf94:	203b      	movs	r0, #59	; 0x3b
1000cf96:	2e00      	cmp	r6, #0
1000cf98:	d017      	beq.n	1000cfca <gapc_cmp_evt+0xc6>
1000cf9a:	7116      	strb	r6, [r2, #4]
1000cf9c:	3812      	subs	r0, #18
1000cf9e:	e014      	b.n	1000cfca <gapc_cmp_evt+0xc6>
1000cfa0:	203b      	movs	r0, #59	; 0x3b
1000cfa2:	2e00      	cmp	r6, #0
1000cfa4:	d011      	beq.n	1000cfca <gapc_cmp_evt+0xc6>
1000cfa6:	7093      	strb	r3, [r2, #2]
1000cfa8:	70d6      	strb	r6, [r2, #3]
1000cfaa:	382a      	subs	r0, #42	; 0x2a
1000cfac:	e00d      	b.n	1000cfca <gapc_cmp_evt+0xc6>
1000cfae:	203b      	movs	r0, #59	; 0x3b
1000cfb0:	2e00      	cmp	r6, #0
1000cfb2:	d00a      	beq.n	1000cfca <gapc_cmp_evt+0xc6>
1000cfb4:	0a2d      	lsrs	r5, r5, #8
1000cfb6:	7016      	strb	r6, [r2, #0]
1000cfb8:	8055      	strh	r5, [r2, #2]
1000cfba:	1d10      	adds	r0, r2, #4
1000cfbc:	2100      	movs	r1, #0
1000cfbe:	2205      	movs	r2, #5
1000cfc0:	4b03      	ldr	r3, [pc, #12]	; (1000cfd0 <gapc_cmp_evt+0xcc>)
1000cfc2:	4798      	blx	r3
1000cfc4:	2012      	movs	r0, #18
1000cfc6:	e000      	b.n	1000cfca <gapc_cmp_evt+0xc6>
1000cfc8:	2000      	movs	r0, #0
1000cfca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000cfcc:	1000cea1 	.word	0x1000cea1
1000cfd0:	1000f7e9 	.word	0x1000f7e9

1000cfd4 <gapc_connection_cfm_handler>:
1000cfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cfd6:	b085      	sub	sp, #20
1000cfd8:	1c1d      	adds	r5, r3, #0
1000cfda:	ab0a      	add	r3, sp, #40	; 0x28
1000cfdc:	781b      	ldrb	r3, [r3, #0]
1000cfde:	9201      	str	r2, [sp, #4]
1000cfe0:	9302      	str	r3, [sp, #8]
1000cfe2:	ab0b      	add	r3, sp, #44	; 0x2c
1000cfe4:	781b      	ldrb	r3, [r3, #0]
1000cfe6:	1c07      	adds	r7, r0, #0
1000cfe8:	9303      	str	r3, [sp, #12]
1000cfea:	ab0c      	add	r3, sp, #48	; 0x30
1000cfec:	881a      	ldrh	r2, [r3, #0]
1000cfee:	2302      	movs	r3, #2
1000cff0:	1c0e      	adds	r6, r1, #0
1000cff2:	4c23      	ldr	r4, [pc, #140]	; (1000d080 <gapc_connection_cfm_handler+0xac>)
1000cff4:	1c39      	adds	r1, r7, #0
1000cff6:	7023      	strb	r3, [r4, #0]
1000cff8:	330c      	adds	r3, #12
1000cffa:	7063      	strb	r3, [r4, #1]
1000cffc:	70a3      	strb	r3, [r4, #2]
1000cffe:	4b21      	ldr	r3, [pc, #132]	; (1000d084 <gapc_connection_cfm_handler+0xb0>)
1000d000:	70e2      	strb	r2, [r4, #3]
1000d002:	881a      	ldrh	r2, [r3, #0]
1000d004:	881b      	ldrh	r3, [r3, #0]
1000d006:	7122      	strb	r2, [r4, #4]
1000d008:	0a1b      	lsrs	r3, r3, #8
1000d00a:	4f1f      	ldr	r7, [pc, #124]	; (1000d088 <gapc_connection_cfm_handler+0xb4>)
1000d00c:	2210      	movs	r2, #16
1000d00e:	481f      	ldr	r0, [pc, #124]	; (1000d08c <gapc_connection_cfm_handler+0xb8>)
1000d010:	7163      	strb	r3, [r4, #5]
1000d012:	47b8      	blx	r7
1000d014:	0a33      	lsrs	r3, r6, #8
1000d016:	7626      	strb	r6, [r4, #24]
1000d018:	7663      	strb	r3, [r4, #25]
1000d01a:	9901      	ldr	r1, [sp, #4]
1000d01c:	0c33      	lsrs	r3, r6, #16
1000d01e:	2210      	movs	r2, #16
1000d020:	0e36      	lsrs	r6, r6, #24
1000d022:	481b      	ldr	r0, [pc, #108]	; (1000d090 <gapc_connection_cfm_handler+0xbc>)
1000d024:	76a3      	strb	r3, [r4, #26]
1000d026:	76e6      	strb	r6, [r4, #27]
1000d028:	47b8      	blx	r7
1000d02a:	1c23      	adds	r3, r4, #0
1000d02c:	332c      	adds	r3, #44	; 0x2c
1000d02e:	701d      	strb	r5, [r3, #0]
1000d030:	1c23      	adds	r3, r4, #0
1000d032:	0a2a      	lsrs	r2, r5, #8
1000d034:	332d      	adds	r3, #45	; 0x2d
1000d036:	701a      	strb	r2, [r3, #0]
1000d038:	1c23      	adds	r3, r4, #0
1000d03a:	0c2a      	lsrs	r2, r5, #16
1000d03c:	332e      	adds	r3, #46	; 0x2e
1000d03e:	701a      	strb	r2, [r3, #0]
1000d040:	1c23      	adds	r3, r4, #0
1000d042:	0e2d      	lsrs	r5, r5, #24
1000d044:	332f      	adds	r3, #47	; 0x2f
1000d046:	466a      	mov	r2, sp
1000d048:	701d      	strb	r5, [r3, #0]
1000d04a:	1c23      	adds	r3, r4, #0
1000d04c:	7a12      	ldrb	r2, [r2, #8]
1000d04e:	3330      	adds	r3, #48	; 0x30
1000d050:	701a      	strb	r2, [r3, #0]
1000d052:	1c23      	adds	r3, r4, #0
1000d054:	2500      	movs	r5, #0
1000d056:	3331      	adds	r3, #49	; 0x31
1000d058:	466a      	mov	r2, sp
1000d05a:	701d      	strb	r5, [r3, #0]
1000d05c:	1c23      	adds	r3, r4, #0
1000d05e:	7b12      	ldrb	r2, [r2, #12]
1000d060:	3332      	adds	r3, #50	; 0x32
1000d062:	701a      	strb	r2, [r3, #0]
1000d064:	1c23      	adds	r3, r4, #0
1000d066:	3333      	adds	r3, #51	; 0x33
1000d068:	701d      	strb	r5, [r3, #0]
1000d06a:	232c      	movs	r3, #44	; 0x2c
1000d06c:	1c20      	adds	r0, r4, #0
1000d06e:	71a3      	strb	r3, [r4, #6]
1000d070:	2134      	movs	r1, #52	; 0x34
1000d072:	4b08      	ldr	r3, [pc, #32]	; (1000d094 <gapc_connection_cfm_handler+0xc0>)
1000d074:	71e5      	strb	r5, [r4, #7]
1000d076:	4798      	blx	r3
1000d078:	1c28      	adds	r0, r5, #0
1000d07a:	b005      	add	sp, #20
1000d07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d07e:	46c0      	nop			; (mov r8, r8)
1000d080:	10012f68 	.word	0x10012f68
1000d084:	10012bf8 	.word	0x10012bf8
1000d088:	1000f7d7 	.word	0x1000f7d7
1000d08c:	10012f70 	.word	0x10012f70
1000d090:	10012f84 	.word	0x10012f84
1000d094:	1000ccd9 	.word	0x1000ccd9

1000d098 <gapc_con_req_ind>:
1000d098:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d09a:	7845      	ldrb	r5, [r0, #1]
1000d09c:	7803      	ldrb	r3, [r0, #0]
1000d09e:	4c30      	ldr	r4, [pc, #192]	; (1000d160 <gapc_con_req_ind+0xc8>)
1000d0a0:	022d      	lsls	r5, r5, #8
1000d0a2:	431d      	orrs	r5, r3
1000d0a4:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d0a6:	78c3      	ldrb	r3, [r0, #3]
1000d0a8:	7882      	ldrb	r2, [r0, #2]
1000d0aa:	b08b      	sub	sp, #44	; 0x2c
1000d0ac:	021b      	lsls	r3, r3, #8
1000d0ae:	431a      	orrs	r2, r3
1000d0b0:	466b      	mov	r3, sp
1000d0b2:	9205      	str	r2, [sp, #20]
1000d0b4:	8a9b      	ldrh	r3, [r3, #20]
1000d0b6:	2120      	movs	r1, #32
1000d0b8:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d0ba:	7943      	ldrb	r3, [r0, #5]
1000d0bc:	7902      	ldrb	r2, [r0, #4]
1000d0be:	021b      	lsls	r3, r3, #8
1000d0c0:	431a      	orrs	r2, r3
1000d0c2:	466b      	mov	r3, sp
1000d0c4:	9206      	str	r2, [sp, #24]
1000d0c6:	8b1b      	ldrh	r3, [r3, #24]
1000d0c8:	1c06      	adds	r6, r0, #0
1000d0ca:	8623      	strh	r3, [r4, #48]	; 0x30
1000d0cc:	79c3      	ldrb	r3, [r0, #7]
1000d0ce:	7982      	ldrb	r2, [r0, #6]
1000d0d0:	021b      	lsls	r3, r3, #8
1000d0d2:	431a      	orrs	r2, r3
1000d0d4:	466b      	mov	r3, sp
1000d0d6:	9207      	str	r2, [sp, #28]
1000d0d8:	466a      	mov	r2, sp
1000d0da:	8b9b      	ldrh	r3, [r3, #28]
1000d0dc:	1852      	adds	r2, r2, r1
1000d0de:	8663      	strh	r3, [r4, #50]	; 0x32
1000d0e0:	7a43      	ldrb	r3, [r0, #9]
1000d0e2:	1c01      	adds	r1, r0, #0
1000d0e4:	9308      	str	r3, [sp, #32]
1000d0e6:	1c23      	adds	r3, r4, #0
1000d0e8:	7812      	ldrb	r2, [r2, #0]
1000d0ea:	3377      	adds	r3, #119	; 0x77
1000d0ec:	3478      	adds	r4, #120	; 0x78
1000d0ee:	701a      	strb	r2, [r3, #0]
1000d0f0:	310a      	adds	r1, #10
1000d0f2:	2206      	movs	r2, #6
1000d0f4:	4b1b      	ldr	r3, [pc, #108]	; (1000d164 <gapc_con_req_ind+0xcc>)
1000d0f6:	1c20      	adds	r0, r4, #0
1000d0f8:	4798      	blx	r3
1000d0fa:	7c33      	ldrb	r3, [r6, #16]
1000d0fc:	9309      	str	r3, [sp, #36]	; 0x24
1000d0fe:	4b1a      	ldr	r3, [pc, #104]	; (1000d168 <gapc_con_req_ind+0xd0>)
1000d100:	4798      	blx	r3
1000d102:	4e1a      	ldr	r6, [pc, #104]	; (1000d16c <gapc_con_req_ind+0xd4>)
1000d104:	1e07      	subs	r7, r0, #0
1000d106:	2f07      	cmp	r7, #7
1000d108:	d81b      	bhi.n	1000d142 <gapc_con_req_ind+0xaa>
1000d10a:	2312      	movs	r3, #18
1000d10c:	4343      	muls	r3, r0
1000d10e:	18f0      	adds	r0, r6, r3
1000d110:	8145      	strh	r5, [r0, #10]
1000d112:	4669      	mov	r1, sp
1000d114:	2524      	movs	r5, #36	; 0x24
1000d116:	1949      	adds	r1, r1, r5
1000d118:	7809      	ldrb	r1, [r1, #0]
1000d11a:	2206      	movs	r2, #6
1000d11c:	54f1      	strb	r1, [r6, r3]
1000d11e:	2120      	movs	r1, #32
1000d120:	466b      	mov	r3, sp
1000d122:	185b      	adds	r3, r3, r1
1000d124:	781b      	ldrb	r3, [r3, #0]
1000d126:	1c21      	adds	r1, r4, #0
1000d128:	7043      	strb	r3, [r0, #1]
1000d12a:	466b      	mov	r3, sp
1000d12c:	8a9b      	ldrh	r3, [r3, #20]
1000d12e:	3002      	adds	r0, #2
1000d130:	8143      	strh	r3, [r0, #10]
1000d132:	466b      	mov	r3, sp
1000d134:	8b1b      	ldrh	r3, [r3, #24]
1000d136:	8183      	strh	r3, [r0, #12]
1000d138:	466b      	mov	r3, sp
1000d13a:	8b9b      	ldrh	r3, [r3, #28]
1000d13c:	81c3      	strh	r3, [r0, #14]
1000d13e:	4b09      	ldr	r3, [pc, #36]	; (1000d164 <gapc_con_req_ind+0xcc>)
1000d140:	4798      	blx	r3
1000d142:	2112      	movs	r1, #18
1000d144:	2300      	movs	r3, #0
1000d146:	434f      	muls	r7, r1
1000d148:	9300      	str	r3, [sp, #0]
1000d14a:	9301      	str	r3, [sp, #4]
1000d14c:	19f6      	adds	r6, r6, r7
1000d14e:	8971      	ldrh	r1, [r6, #10]
1000d150:	4a07      	ldr	r2, [pc, #28]	; (1000d170 <gapc_con_req_ind+0xd8>)
1000d152:	9102      	str	r1, [sp, #8]
1000d154:	1c10      	adds	r0, r2, #0
1000d156:	1c19      	adds	r1, r3, #0
1000d158:	4c06      	ldr	r4, [pc, #24]	; (1000d174 <gapc_con_req_ind+0xdc>)
1000d15a:	47a0      	blx	r4
1000d15c:	b00b      	add	sp, #44	; 0x2c
1000d15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d160:	10012c8a 	.word	0x10012c8a
1000d164:	1000f7d7 	.word	0x1000f7d7
1000d168:	1000cedd 	.word	0x1000cedd
1000d16c:	10012bfa 	.word	0x10012bfa
1000d170:	1001202a 	.word	0x1001202a
1000d174:	1000cfd5 	.word	0x1000cfd5

1000d178 <gapc_disconnect_cmd_handler>:
1000d178:	2204      	movs	r2, #4
1000d17a:	b510      	push	{r4, lr}
1000d17c:	4b0c      	ldr	r3, [pc, #48]	; (1000d1b0 <gapc_disconnect_cmd_handler+0x38>)
1000d17e:	2400      	movs	r4, #0
1000d180:	701a      	strb	r2, [r3, #0]
1000d182:	320a      	adds	r2, #10
1000d184:	705a      	strb	r2, [r3, #1]
1000d186:	709a      	strb	r2, [r3, #2]
1000d188:	4a0a      	ldr	r2, [pc, #40]	; (1000d1b4 <gapc_disconnect_cmd_handler+0x3c>)
1000d18a:	70d9      	strb	r1, [r3, #3]
1000d18c:	8811      	ldrh	r1, [r2, #0]
1000d18e:	8812      	ldrh	r2, [r2, #0]
1000d190:	7119      	strb	r1, [r3, #4]
1000d192:	0a12      	lsrs	r2, r2, #8
1000d194:	715a      	strb	r2, [r3, #5]
1000d196:	2201      	movs	r2, #1
1000d198:	721a      	strb	r2, [r3, #8]
1000d19a:	1892      	adds	r2, r2, r2
1000d19c:	7258      	strb	r0, [r3, #9]
1000d19e:	719a      	strb	r2, [r3, #6]
1000d1a0:	71dc      	strb	r4, [r3, #7]
1000d1a2:	1c18      	adds	r0, r3, #0
1000d1a4:	210a      	movs	r1, #10
1000d1a6:	4b04      	ldr	r3, [pc, #16]	; (1000d1b8 <gapc_disconnect_cmd_handler+0x40>)
1000d1a8:	4798      	blx	r3
1000d1aa:	1c20      	adds	r0, r4, #0
1000d1ac:	bd10      	pop	{r4, pc}
1000d1ae:	46c0      	nop			; (mov r8, r8)
1000d1b0:	10012f68 	.word	0x10012f68
1000d1b4:	10012bf8 	.word	0x10012bf8
1000d1b8:	1000ccd9 	.word	0x1000ccd9

1000d1bc <gapc_disconnect_ind>:
1000d1bc:	1c02      	adds	r2, r0, #0
1000d1be:	b508      	push	{r3, lr}
1000d1c0:	7843      	ldrb	r3, [r0, #1]
1000d1c2:	7800      	ldrb	r0, [r0, #0]
1000d1c4:	021b      	lsls	r3, r3, #8
1000d1c6:	4318      	orrs	r0, r3
1000d1c8:	8008      	strh	r0, [r1, #0]
1000d1ca:	7893      	ldrb	r3, [r2, #2]
1000d1cc:	708b      	strb	r3, [r1, #2]
1000d1ce:	2100      	movs	r1, #0
1000d1d0:	4b05      	ldr	r3, [pc, #20]	; (1000d1e8 <gapc_disconnect_ind+0x2c>)
1000d1d2:	4798      	blx	r3
1000d1d4:	2807      	cmp	r0, #7
1000d1d6:	d806      	bhi.n	1000d1e6 <gapc_disconnect_ind+0x2a>
1000d1d8:	2312      	movs	r3, #18
1000d1da:	4358      	muls	r0, r3
1000d1dc:	4b03      	ldr	r3, [pc, #12]	; (1000d1ec <gapc_disconnect_ind+0x30>)
1000d1de:	1818      	adds	r0, r3, r0
1000d1e0:	2301      	movs	r3, #1
1000d1e2:	425b      	negs	r3, r3
1000d1e4:	8143      	strh	r3, [r0, #10]
1000d1e6:	bd08      	pop	{r3, pc}
1000d1e8:	1000cea1 	.word	0x1000cea1
1000d1ec:	10012bfa 	.word	0x10012bfa

1000d1f0 <gapc_bond_cmd_handler>:
1000d1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d1f2:	9300      	str	r3, [sp, #0]
1000d1f4:	2312      	movs	r3, #18
1000d1f6:	1c04      	adds	r4, r0, #0
1000d1f8:	a808      	add	r0, sp, #32
1000d1fa:	7807      	ldrb	r7, [r0, #0]
1000d1fc:	a809      	add	r0, sp, #36	; 0x24
1000d1fe:	7806      	ldrb	r6, [r0, #0]
1000d200:	a80a      	add	r0, sp, #40	; 0x28
1000d202:	7805      	ldrb	r5, [r0, #0]
1000d204:	a80b      	add	r0, sp, #44	; 0x2c
1000d206:	7800      	ldrb	r0, [r0, #0]
1000d208:	9001      	str	r0, [sp, #4]
1000d20a:	4810      	ldr	r0, [pc, #64]	; (1000d24c <gapc_bond_cmd_handler+0x5c>)
1000d20c:	7003      	strb	r3, [r0, #0]
1000d20e:	230e      	movs	r3, #14
1000d210:	70c4      	strb	r4, [r0, #3]
1000d212:	4c0f      	ldr	r4, [pc, #60]	; (1000d250 <gapc_bond_cmd_handler+0x60>)
1000d214:	7043      	strb	r3, [r0, #1]
1000d216:	7083      	strb	r3, [r0, #2]
1000d218:	8823      	ldrh	r3, [r4, #0]
1000d21a:	8824      	ldrh	r4, [r4, #0]
1000d21c:	7103      	strb	r3, [r0, #4]
1000d21e:	466b      	mov	r3, sp
1000d220:	781b      	ldrb	r3, [r3, #0]
1000d222:	0a24      	lsrs	r4, r4, #8
1000d224:	72c3      	strb	r3, [r0, #11]
1000d226:	466b      	mov	r3, sp
1000d228:	791b      	ldrb	r3, [r3, #4]
1000d22a:	7144      	strb	r4, [r0, #5]
1000d22c:	73c3      	strb	r3, [r0, #15]
1000d22e:	2308      	movs	r3, #8
1000d230:	7183      	strb	r3, [r0, #6]
1000d232:	2300      	movs	r3, #0
1000d234:	240a      	movs	r4, #10
1000d236:	7241      	strb	r1, [r0, #9]
1000d238:	71c3      	strb	r3, [r0, #7]
1000d23a:	2110      	movs	r1, #16
1000d23c:	4b05      	ldr	r3, [pc, #20]	; (1000d254 <gapc_bond_cmd_handler+0x64>)
1000d23e:	7307      	strb	r7, [r0, #12]
1000d240:	7346      	strb	r6, [r0, #13]
1000d242:	7385      	strb	r5, [r0, #14]
1000d244:	7204      	strb	r4, [r0, #8]
1000d246:	7282      	strb	r2, [r0, #10]
1000d248:	4798      	blx	r3
1000d24a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d24c:	10012f68 	.word	0x10012f68
1000d250:	10012bf8 	.word	0x10012bf8
1000d254:	1000ccd9 	.word	0x1000ccd9

1000d258 <gapc_bond_ind>:
1000d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d25a:	780e      	ldrb	r6, [r1, #0]
1000d25c:	1c03      	adds	r3, r0, #0
1000d25e:	1eb0      	subs	r0, r6, #2
1000d260:	2805      	cmp	r0, #5
1000d262:	d85d      	bhi.n	1000d320 <gapc_bond_ind+0xc8>
1000d264:	1c15      	adds	r5, r2, #0
1000d266:	1c0c      	adds	r4, r1, #0
1000d268:	f001 f9d4 	bl	1000e614 <__gnu_thumb1_case_uqi>
1000d26c:	2f5a030d 	.word	0x2f5a030d
1000d270:	4740      	.short	0x4740
1000d272:	2009      	movs	r0, #9
1000d274:	2a00      	cmp	r2, #0
1000d276:	d054      	beq.n	1000d322 <gapc_bond_ind+0xca>
1000d278:	0a1b      	lsrs	r3, r3, #8
1000d27a:	8053      	strh	r3, [r2, #2]
1000d27c:	788b      	ldrb	r3, [r1, #2]
1000d27e:	4829      	ldr	r0, [pc, #164]	; (1000d324 <gapc_bond_ind+0xcc>)
1000d280:	7113      	strb	r3, [r2, #4]
1000d282:	2100      	movs	r1, #0
1000d284:	e01c      	b.n	1000d2c0 <gapc_bond_ind+0x68>
1000d286:	2009      	movs	r0, #9
1000d288:	2a00      	cmp	r2, #0
1000d28a:	d04a      	beq.n	1000d322 <gapc_bond_ind+0xca>
1000d28c:	4c25      	ldr	r4, [pc, #148]	; (1000d324 <gapc_bond_ind+0xcc>)
1000d28e:	0a1b      	lsrs	r3, r3, #8
1000d290:	8053      	strh	r3, [r2, #2]
1000d292:	788b      	ldrb	r3, [r1, #2]
1000d294:	2700      	movs	r7, #0
1000d296:	1c10      	adds	r0, r2, #0
1000d298:	1c21      	adds	r1, r4, #0
1000d29a:	7013      	strb	r3, [r2, #0]
1000d29c:	4e22      	ldr	r6, [pc, #136]	; (1000d328 <gapc_bond_ind+0xd0>)
1000d29e:	7117      	strb	r7, [r2, #4]
1000d2a0:	312e      	adds	r1, #46	; 0x2e
1000d2a2:	2217      	movs	r2, #23
1000d2a4:	3032      	adds	r0, #50	; 0x32
1000d2a6:	47b0      	blx	r6
1000d2a8:	1c28      	adds	r0, r5, #0
1000d2aa:	1c21      	adds	r1, r4, #0
1000d2ac:	2210      	movs	r2, #16
1000d2ae:	311e      	adds	r1, #30
1000d2b0:	3022      	adds	r0, #34	; 0x22
1000d2b2:	47b0      	blx	r6
1000d2b4:	1ca1      	adds	r1, r4, #2
1000d2b6:	1da8      	adds	r0, r5, #6
1000d2b8:	221c      	movs	r2, #28
1000d2ba:	47b0      	blx	r6
1000d2bc:	1c20      	adds	r0, r4, #0
1000d2be:	1c39      	adds	r1, r7, #0
1000d2c0:	2246      	movs	r2, #70	; 0x46
1000d2c2:	4b1a      	ldr	r3, [pc, #104]	; (1000d32c <gapc_bond_ind+0xd4>)
1000d2c4:	4798      	blx	r3
1000d2c6:	2009      	movs	r0, #9
1000d2c8:	e02b      	b.n	1000d322 <gapc_bond_ind+0xca>
1000d2ca:	4d16      	ldr	r5, [pc, #88]	; (1000d324 <gapc_bond_ind+0xcc>)
1000d2cc:	3102      	adds	r1, #2
1000d2ce:	1c28      	adds	r0, r5, #0
1000d2d0:	2210      	movs	r2, #16
1000d2d2:	4e15      	ldr	r6, [pc, #84]	; (1000d328 <gapc_bond_ind+0xd0>)
1000d2d4:	302e      	adds	r0, #46	; 0x2e
1000d2d6:	47b0      	blx	r6
1000d2d8:	1c28      	adds	r0, r5, #0
1000d2da:	1c21      	adds	r1, r4, #0
1000d2dc:	303f      	adds	r0, #63	; 0x3f
1000d2de:	3112      	adds	r1, #18
1000d2e0:	2206      	movs	r2, #6
1000d2e2:	47b0      	blx	r6
1000d2e4:	7e23      	ldrb	r3, [r4, #24]
1000d2e6:	353e      	adds	r5, #62	; 0x3e
1000d2e8:	702b      	strb	r3, [r5, #0]
1000d2ea:	e019      	b.n	1000d320 <gapc_bond_ind+0xc8>
1000d2ec:	480d      	ldr	r0, [pc, #52]	; (1000d324 <gapc_bond_ind+0xcc>)
1000d2ee:	3102      	adds	r1, #2
1000d2f0:	2210      	movs	r2, #16
1000d2f2:	4b0d      	ldr	r3, [pc, #52]	; (1000d328 <gapc_bond_ind+0xd0>)
1000d2f4:	301e      	adds	r0, #30
1000d2f6:	4798      	blx	r3
1000d2f8:	e012      	b.n	1000d320 <gapc_bond_ind+0xc8>
1000d2fa:	4d0a      	ldr	r5, [pc, #40]	; (1000d324 <gapc_bond_ind+0xcc>)
1000d2fc:	3102      	adds	r1, #2
1000d2fe:	2210      	movs	r2, #16
1000d300:	4e09      	ldr	r6, [pc, #36]	; (1000d328 <gapc_bond_ind+0xd0>)
1000d302:	1ca8      	adds	r0, r5, #2
1000d304:	47b0      	blx	r6
1000d306:	1c28      	adds	r0, r5, #0
1000d308:	1c21      	adds	r1, r4, #0
1000d30a:	7ce3      	ldrb	r3, [r4, #19]
1000d30c:	7ca2      	ldrb	r2, [r4, #18]
1000d30e:	021b      	lsls	r3, r3, #8
1000d310:	4313      	orrs	r3, r2
1000d312:	3014      	adds	r0, #20
1000d314:	3114      	adds	r1, #20
1000d316:	2208      	movs	r2, #8
1000d318:	826b      	strh	r3, [r5, #18]
1000d31a:	47b0      	blx	r6
1000d31c:	7f23      	ldrb	r3, [r4, #28]
1000d31e:	772b      	strb	r3, [r5, #28]
1000d320:	2000      	movs	r0, #0
1000d322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d324:	10011fe4 	.word	0x10011fe4
1000d328:	1000f7d7 	.word	0x1000f7d7
1000d32c:	1000f7e9 	.word	0x1000f7e9

1000d330 <gapc_bond_req_ind>:
1000d330:	b570      	push	{r4, r5, r6, lr}
1000d332:	780c      	ldrb	r4, [r1, #0]
1000d334:	1c03      	adds	r3, r0, #0
1000d336:	7849      	ldrb	r1, [r1, #1]
1000d338:	2c07      	cmp	r4, #7
1000d33a:	d85c      	bhi.n	1000d3f6 <gapc_bond_req_ind+0xc6>
1000d33c:	1c20      	adds	r0, r4, #0
1000d33e:	f001 f969 	bl	1000e614 <__gnu_thumb1_case_uqi>
1000d342:	5a04      	.short	0x5a04
1000d344:	5a0b5a5a 	.word	0x5a0b5a5a
1000d348:	1f1f      	.short	0x1f1f
1000d34a:	200a      	movs	r0, #10
1000d34c:	2a00      	cmp	r2, #0
1000d34e:	d053      	beq.n	1000d3f8 <gapc_bond_req_ind+0xc8>
1000d350:	0a1b      	lsrs	r3, r3, #8
1000d352:	8013      	strh	r3, [r2, #0]
1000d354:	7091      	strb	r1, [r2, #2]
1000d356:	e04f      	b.n	1000d3f8 <gapc_bond_req_ind+0xc8>
1000d358:	2a00      	cmp	r2, #0
1000d35a:	d00b      	beq.n	1000d374 <gapc_bond_req_ind+0x44>
1000d35c:	0a1b      	lsrs	r3, r3, #8
1000d35e:	8013      	strh	r3, [r2, #0]
1000d360:	2900      	cmp	r1, #0
1000d362:	d102      	bne.n	1000d36a <gapc_bond_req_ind+0x3a>
1000d364:	2301      	movs	r3, #1
1000d366:	7093      	strb	r3, [r2, #2]
1000d368:	e004      	b.n	1000d374 <gapc_bond_req_ind+0x44>
1000d36a:	2300      	movs	r3, #0
1000d36c:	7093      	strb	r3, [r2, #2]
1000d36e:	2902      	cmp	r1, #2
1000d370:	d102      	bne.n	1000d378 <gapc_bond_req_ind+0x48>
1000d372:	70d3      	strb	r3, [r2, #3]
1000d374:	200c      	movs	r0, #12
1000d376:	e03f      	b.n	1000d3f8 <gapc_bond_req_ind+0xc8>
1000d378:	2901      	cmp	r1, #1
1000d37a:	d1fb      	bne.n	1000d374 <gapc_bond_req_ind+0x44>
1000d37c:	70d1      	strb	r1, [r2, #3]
1000d37e:	e7f9      	b.n	1000d374 <gapc_bond_req_ind+0x44>
1000d380:	2214      	movs	r2, #20
1000d382:	481e      	ldr	r0, [pc, #120]	; (1000d3fc <gapc_bond_req_ind+0xcc>)
1000d384:	0a1b      	lsrs	r3, r3, #8
1000d386:	70c3      	strb	r3, [r0, #3]
1000d388:	4b1d      	ldr	r3, [pc, #116]	; (1000d400 <gapc_bond_req_ind+0xd0>)
1000d38a:	7002      	strb	r2, [r0, #0]
1000d38c:	3a06      	subs	r2, #6
1000d38e:	7042      	strb	r2, [r0, #1]
1000d390:	7082      	strb	r2, [r0, #2]
1000d392:	881a      	ldrh	r2, [r3, #0]
1000d394:	881b      	ldrh	r3, [r3, #0]
1000d396:	4e1b      	ldr	r6, [pc, #108]	; (1000d404 <gapc_bond_req_ind+0xd4>)
1000d398:	0a1b      	lsrs	r3, r3, #8
1000d39a:	7143      	strb	r3, [r0, #5]
1000d39c:	2301      	movs	r3, #1
1000d39e:	7102      	strb	r2, [r0, #4]
1000d3a0:	7204      	strb	r4, [r0, #8]
1000d3a2:	7243      	strb	r3, [r0, #9]
1000d3a4:	1c05      	adds	r5, r0, #0
1000d3a6:	1c31      	adds	r1, r6, #0
1000d3a8:	300a      	adds	r0, #10
1000d3aa:	2c07      	cmp	r4, #7
1000d3ac:	d116      	bne.n	1000d3dc <gapc_bond_req_ind+0xac>
1000d3ae:	317e      	adds	r1, #126	; 0x7e
1000d3b0:	2210      	movs	r2, #16
1000d3b2:	4c15      	ldr	r4, [pc, #84]	; (1000d408 <gapc_bond_req_ind+0xd8>)
1000d3b4:	47a0      	blx	r4
1000d3b6:	1c33      	adds	r3, r6, #0
1000d3b8:	1c31      	adds	r1, r6, #0
1000d3ba:	1c28      	adds	r0, r5, #0
1000d3bc:	338e      	adds	r3, #142	; 0x8e
1000d3be:	881b      	ldrh	r3, [r3, #0]
1000d3c0:	3190      	adds	r1, #144	; 0x90
1000d3c2:	76ab      	strb	r3, [r5, #26]
1000d3c4:	2208      	movs	r2, #8
1000d3c6:	0a1b      	lsrs	r3, r3, #8
1000d3c8:	301c      	adds	r0, #28
1000d3ca:	76eb      	strb	r3, [r5, #27]
1000d3cc:	47a0      	blx	r4
1000d3ce:	1c31      	adds	r1, r6, #0
1000d3d0:	3198      	adds	r1, #152	; 0x98
1000d3d2:	780a      	ldrb	r2, [r1, #0]
1000d3d4:	1d6b      	adds	r3, r5, #5
1000d3d6:	77da      	strb	r2, [r3, #31]
1000d3d8:	2125      	movs	r1, #37	; 0x25
1000d3da:	e004      	b.n	1000d3e6 <gapc_bond_req_ind+0xb6>
1000d3dc:	319a      	adds	r1, #154	; 0x9a
1000d3de:	2210      	movs	r2, #16
1000d3e0:	4b09      	ldr	r3, [pc, #36]	; (1000d408 <gapc_bond_req_ind+0xd8>)
1000d3e2:	4798      	blx	r3
1000d3e4:	211a      	movs	r1, #26
1000d3e6:	1c0b      	adds	r3, r1, #0
1000d3e8:	2400      	movs	r4, #0
1000d3ea:	3b08      	subs	r3, #8
1000d3ec:	71ab      	strb	r3, [r5, #6]
1000d3ee:	1c28      	adds	r0, r5, #0
1000d3f0:	4b06      	ldr	r3, [pc, #24]	; (1000d40c <gapc_bond_req_ind+0xdc>)
1000d3f2:	71ec      	strb	r4, [r5, #7]
1000d3f4:	4798      	blx	r3
1000d3f6:	2000      	movs	r0, #0
1000d3f8:	bd70      	pop	{r4, r5, r6, pc}
1000d3fa:	46c0      	nop			; (mov r8, r8)
1000d3fc:	10012f68 	.word	0x10012f68
1000d400:	10012bf8 	.word	0x10012bf8
1000d404:	10012c8a 	.word	0x10012c8a
1000d408:	1000f7d7 	.word	0x1000f7d7
1000d40c:	1000ccd9 	.word	0x1000ccd9

1000d410 <gapc_bond_cfm_handler_pair_resp>:
1000d410:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d412:	b085      	sub	sp, #20
1000d414:	1c07      	adds	r7, r0, #0
1000d416:	a80a      	add	r0, sp, #40	; 0x28
1000d418:	7806      	ldrb	r6, [r0, #0]
1000d41a:	a80b      	add	r0, sp, #44	; 0x2c
1000d41c:	7805      	ldrb	r5, [r0, #0]
1000d41e:	a80c      	add	r0, sp, #48	; 0x30
1000d420:	7800      	ldrb	r0, [r0, #0]
1000d422:	2414      	movs	r4, #20
1000d424:	9002      	str	r0, [sp, #8]
1000d426:	a80d      	add	r0, sp, #52	; 0x34
1000d428:	7800      	ldrb	r0, [r0, #0]
1000d42a:	9301      	str	r3, [sp, #4]
1000d42c:	9003      	str	r0, [sp, #12]
1000d42e:	a80e      	add	r0, sp, #56	; 0x38
1000d430:	8800      	ldrh	r0, [r0, #0]
1000d432:	4684      	mov	ip, r0
1000d434:	4812      	ldr	r0, [pc, #72]	; (1000d480 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000d436:	7004      	strb	r4, [r0, #0]
1000d438:	3c06      	subs	r4, #6
1000d43a:	7044      	strb	r4, [r0, #1]
1000d43c:	7084      	strb	r4, [r0, #2]
1000d43e:	4664      	mov	r4, ip
1000d440:	70c4      	strb	r4, [r0, #3]
1000d442:	4c10      	ldr	r4, [pc, #64]	; (1000d484 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000d444:	7247      	strb	r7, [r0, #9]
1000d446:	8823      	ldrh	r3, [r4, #0]
1000d448:	8824      	ldrh	r4, [r4, #0]
1000d44a:	7103      	strb	r3, [r0, #4]
1000d44c:	466b      	mov	r3, sp
1000d44e:	791b      	ldrb	r3, [r3, #4]
1000d450:	0a24      	lsrs	r4, r4, #8
1000d452:	7303      	strb	r3, [r0, #12]
1000d454:	466b      	mov	r3, sp
1000d456:	7a1b      	ldrb	r3, [r3, #8]
1000d458:	7144      	strb	r4, [r0, #5]
1000d45a:	73c3      	strb	r3, [r0, #15]
1000d45c:	466b      	mov	r3, sp
1000d45e:	7b1b      	ldrb	r3, [r3, #12]
1000d460:	2401      	movs	r4, #1
1000d462:	7403      	strb	r3, [r0, #16]
1000d464:	2309      	movs	r3, #9
1000d466:	7183      	strb	r3, [r0, #6]
1000d468:	2300      	movs	r3, #0
1000d46a:	7204      	strb	r4, [r0, #8]
1000d46c:	7281      	strb	r1, [r0, #10]
1000d46e:	72c2      	strb	r2, [r0, #11]
1000d470:	7346      	strb	r6, [r0, #13]
1000d472:	7385      	strb	r5, [r0, #14]
1000d474:	71c3      	strb	r3, [r0, #7]
1000d476:	2111      	movs	r1, #17
1000d478:	4b03      	ldr	r3, [pc, #12]	; (1000d488 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000d47a:	4798      	blx	r3
1000d47c:	b005      	add	sp, #20
1000d47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d480:	10012f68 	.word	0x10012f68
1000d484:	10012bf8 	.word	0x10012bf8
1000d488:	1000ccd9 	.word	0x1000ccd9

1000d48c <gapc_bond_cfm_handler_key_exch>:
1000d48c:	b538      	push	{r3, r4, r5, lr}
1000d48e:	2514      	movs	r5, #20
1000d490:	4c0d      	ldr	r4, [pc, #52]	; (1000d4c8 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000d492:	70e3      	strb	r3, [r4, #3]
1000d494:	4b0d      	ldr	r3, [pc, #52]	; (1000d4cc <gapc_bond_cfm_handler_key_exch+0x40>)
1000d496:	7025      	strb	r5, [r4, #0]
1000d498:	3d06      	subs	r5, #6
1000d49a:	7065      	strb	r5, [r4, #1]
1000d49c:	70a5      	strb	r5, [r4, #2]
1000d49e:	881d      	ldrh	r5, [r3, #0]
1000d4a0:	881b      	ldrh	r3, [r3, #0]
1000d4a2:	7220      	strb	r0, [r4, #8]
1000d4a4:	0a1b      	lsrs	r3, r3, #8
1000d4a6:	7163      	strb	r3, [r4, #5]
1000d4a8:	7261      	strb	r1, [r4, #9]
1000d4aa:	4b09      	ldr	r3, [pc, #36]	; (1000d4d0 <gapc_bond_cfm_handler_key_exch+0x44>)
1000d4ac:	1c11      	adds	r1, r2, #0
1000d4ae:	4809      	ldr	r0, [pc, #36]	; (1000d4d4 <gapc_bond_cfm_handler_key_exch+0x48>)
1000d4b0:	2210      	movs	r2, #16
1000d4b2:	7125      	strb	r5, [r4, #4]
1000d4b4:	4798      	blx	r3
1000d4b6:	2312      	movs	r3, #18
1000d4b8:	71a3      	strb	r3, [r4, #6]
1000d4ba:	2300      	movs	r3, #0
1000d4bc:	1c20      	adds	r0, r4, #0
1000d4be:	71e3      	strb	r3, [r4, #7]
1000d4c0:	211a      	movs	r1, #26
1000d4c2:	4b05      	ldr	r3, [pc, #20]	; (1000d4d8 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000d4c4:	4798      	blx	r3
1000d4c6:	bd38      	pop	{r3, r4, r5, pc}
1000d4c8:	10012f68 	.word	0x10012f68
1000d4cc:	10012bf8 	.word	0x10012bf8
1000d4d0:	1000f7d7 	.word	0x1000f7d7
1000d4d4:	10012f72 	.word	0x10012f72
1000d4d8:	1000ccd9 	.word	0x1000ccd9

1000d4dc <gapc_security_cmd_handler>:
1000d4dc:	221a      	movs	r2, #26
1000d4de:	b508      	push	{r3, lr}
1000d4e0:	4b0b      	ldr	r3, [pc, #44]	; (1000d510 <gapc_security_cmd_handler+0x34>)
1000d4e2:	701a      	strb	r2, [r3, #0]
1000d4e4:	3a0c      	subs	r2, #12
1000d4e6:	705a      	strb	r2, [r3, #1]
1000d4e8:	709a      	strb	r2, [r3, #2]
1000d4ea:	4a0a      	ldr	r2, [pc, #40]	; (1000d514 <gapc_security_cmd_handler+0x38>)
1000d4ec:	70d8      	strb	r0, [r3, #3]
1000d4ee:	8810      	ldrh	r0, [r2, #0]
1000d4f0:	8812      	ldrh	r2, [r2, #0]
1000d4f2:	7118      	strb	r0, [r3, #4]
1000d4f4:	0a12      	lsrs	r2, r2, #8
1000d4f6:	715a      	strb	r2, [r3, #5]
1000d4f8:	220c      	movs	r2, #12
1000d4fa:	721a      	strb	r2, [r3, #8]
1000d4fc:	3a0a      	subs	r2, #10
1000d4fe:	719a      	strb	r2, [r3, #6]
1000d500:	2200      	movs	r2, #0
1000d502:	7259      	strb	r1, [r3, #9]
1000d504:	71da      	strb	r2, [r3, #7]
1000d506:	1c18      	adds	r0, r3, #0
1000d508:	210a      	movs	r1, #10
1000d50a:	4b03      	ldr	r3, [pc, #12]	; (1000d518 <gapc_security_cmd_handler+0x3c>)
1000d50c:	4798      	blx	r3
1000d50e:	bd08      	pop	{r3, pc}
1000d510:	10012f68 	.word	0x10012f68
1000d514:	10012bf8 	.word	0x10012bf8
1000d518:	1000ccd9 	.word	0x1000ccd9

1000d51c <gapc_encrypt_cmd_handler>:
1000d51c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d51e:	2500      	movs	r5, #0
1000d520:	b089      	sub	sp, #36	; 0x24
1000d522:	9306      	str	r3, [sp, #24]
1000d524:	ab0e      	add	r3, sp, #56	; 0x38
1000d526:	781b      	ldrb	r3, [r3, #0]
1000d528:	1c17      	adds	r7, r2, #0
1000d52a:	9307      	str	r3, [sp, #28]
1000d52c:	ab0f      	add	r3, sp, #60	; 0x3c
1000d52e:	781b      	ldrb	r3, [r3, #0]
1000d530:	4a19      	ldr	r2, [pc, #100]	; (1000d598 <gapc_encrypt_cmd_handler+0x7c>)
1000d532:	1c06      	adds	r6, r0, #0
1000d534:	9105      	str	r1, [sp, #20]
1000d536:	9300      	str	r3, [sp, #0]
1000d538:	9002      	str	r0, [sp, #8]
1000d53a:	1c29      	adds	r1, r5, #0
1000d53c:	1c2b      	adds	r3, r5, #0
1000d53e:	9501      	str	r5, [sp, #4]
1000d540:	1c10      	adds	r0, r2, #0
1000d542:	4c16      	ldr	r4, [pc, #88]	; (1000d59c <gapc_encrypt_cmd_handler+0x80>)
1000d544:	47a0      	blx	r4
1000d546:	2316      	movs	r3, #22
1000d548:	4c15      	ldr	r4, [pc, #84]	; (1000d5a0 <gapc_encrypt_cmd_handler+0x84>)
1000d54a:	9905      	ldr	r1, [sp, #20]
1000d54c:	7023      	strb	r3, [r4, #0]
1000d54e:	3b08      	subs	r3, #8
1000d550:	7063      	strb	r3, [r4, #1]
1000d552:	70a3      	strb	r3, [r4, #2]
1000d554:	4b13      	ldr	r3, [pc, #76]	; (1000d5a4 <gapc_encrypt_cmd_handler+0x88>)
1000d556:	70e6      	strb	r6, [r4, #3]
1000d558:	881a      	ldrh	r2, [r3, #0]
1000d55a:	881b      	ldrh	r3, [r3, #0]
1000d55c:	7122      	strb	r2, [r4, #4]
1000d55e:	0a1b      	lsrs	r3, r3, #8
1000d560:	7163      	strb	r3, [r4, #5]
1000d562:	230b      	movs	r3, #11
1000d564:	4e10      	ldr	r6, [pc, #64]	; (1000d5a8 <gapc_encrypt_cmd_handler+0x8c>)
1000d566:	2210      	movs	r2, #16
1000d568:	4810      	ldr	r0, [pc, #64]	; (1000d5ac <gapc_encrypt_cmd_handler+0x90>)
1000d56a:	7223      	strb	r3, [r4, #8]
1000d56c:	7265      	strb	r5, [r4, #9]
1000d56e:	47b0      	blx	r6
1000d570:	0a3b      	lsrs	r3, r7, #8
1000d572:	9906      	ldr	r1, [sp, #24]
1000d574:	2208      	movs	r2, #8
1000d576:	480e      	ldr	r0, [pc, #56]	; (1000d5b0 <gapc_encrypt_cmd_handler+0x94>)
1000d578:	76e3      	strb	r3, [r4, #27]
1000d57a:	76a7      	strb	r7, [r4, #26]
1000d57c:	47b0      	blx	r6
1000d57e:	466a      	mov	r2, sp
1000d580:	7f12      	ldrb	r2, [r2, #28]
1000d582:	1d63      	adds	r3, r4, #5
1000d584:	77da      	strb	r2, [r3, #31]
1000d586:	231d      	movs	r3, #29
1000d588:	1c20      	adds	r0, r4, #0
1000d58a:	71a3      	strb	r3, [r4, #6]
1000d58c:	2125      	movs	r1, #37	; 0x25
1000d58e:	4b09      	ldr	r3, [pc, #36]	; (1000d5b4 <gapc_encrypt_cmd_handler+0x98>)
1000d590:	71e5      	strb	r5, [r4, #7]
1000d592:	4798      	blx	r3
1000d594:	b009      	add	sp, #36	; 0x24
1000d596:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d598:	10011fc4 	.word	0x10011fc4
1000d59c:	1000cfd5 	.word	0x1000cfd5
1000d5a0:	10012f68 	.word	0x10012f68
1000d5a4:	10012bf8 	.word	0x10012bf8
1000d5a8:	1000f7d7 	.word	0x1000f7d7
1000d5ac:	10012f72 	.word	0x10012f72
1000d5b0:	10012f84 	.word	0x10012f84
1000d5b4:	1000ccd9 	.word	0x1000ccd9

1000d5b8 <gapc_encrypt_req_ind>:
1000d5b8:	b508      	push	{r3, lr}
1000d5ba:	0a00      	lsrs	r0, r0, #8
1000d5bc:	8010      	strh	r0, [r2, #0]
1000d5be:	784b      	ldrb	r3, [r1, #1]
1000d5c0:	7808      	ldrb	r0, [r1, #0]
1000d5c2:	021b      	lsls	r3, r3, #8
1000d5c4:	4303      	orrs	r3, r0
1000d5c6:	8053      	strh	r3, [r2, #2]
1000d5c8:	1d10      	adds	r0, r2, #4
1000d5ca:	3102      	adds	r1, #2
1000d5cc:	2208      	movs	r2, #8
1000d5ce:	4b01      	ldr	r3, [pc, #4]	; (1000d5d4 <gapc_encrypt_req_ind+0x1c>)
1000d5d0:	4798      	blx	r3
1000d5d2:	bd08      	pop	{r3, pc}
1000d5d4:	1000f7d7 	.word	0x1000f7d7

1000d5d8 <gapc_encrypt_cfm_handler>:
1000d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d5da:	2500      	movs	r5, #0
1000d5dc:	b087      	sub	sp, #28
1000d5de:	9304      	str	r3, [sp, #16]
1000d5e0:	ab0c      	add	r3, sp, #48	; 0x30
1000d5e2:	781b      	ldrb	r3, [r3, #0]
1000d5e4:	1c17      	adds	r7, r2, #0
1000d5e6:	4a15      	ldr	r2, [pc, #84]	; (1000d63c <gapc_encrypt_cfm_handler+0x64>)
1000d5e8:	1c06      	adds	r6, r0, #0
1000d5ea:	9305      	str	r3, [sp, #20]
1000d5ec:	9100      	str	r1, [sp, #0]
1000d5ee:	9002      	str	r0, [sp, #8]
1000d5f0:	1c29      	adds	r1, r5, #0
1000d5f2:	1c2b      	adds	r3, r5, #0
1000d5f4:	9501      	str	r5, [sp, #4]
1000d5f6:	1c10      	adds	r0, r2, #0
1000d5f8:	4c11      	ldr	r4, [pc, #68]	; (1000d640 <gapc_encrypt_cfm_handler+0x68>)
1000d5fa:	47a0      	blx	r4
1000d5fc:	2318      	movs	r3, #24
1000d5fe:	4c11      	ldr	r4, [pc, #68]	; (1000d644 <gapc_encrypt_cfm_handler+0x6c>)
1000d600:	9904      	ldr	r1, [sp, #16]
1000d602:	7023      	strb	r3, [r4, #0]
1000d604:	3b0a      	subs	r3, #10
1000d606:	7063      	strb	r3, [r4, #1]
1000d608:	70a3      	strb	r3, [r4, #2]
1000d60a:	4b0f      	ldr	r3, [pc, #60]	; (1000d648 <gapc_encrypt_cfm_handler+0x70>)
1000d60c:	480f      	ldr	r0, [pc, #60]	; (1000d64c <gapc_encrypt_cfm_handler+0x74>)
1000d60e:	881a      	ldrh	r2, [r3, #0]
1000d610:	881b      	ldrh	r3, [r3, #0]
1000d612:	7122      	strb	r2, [r4, #4]
1000d614:	0a1b      	lsrs	r3, r3, #8
1000d616:	7163      	strb	r3, [r4, #5]
1000d618:	2210      	movs	r2, #16
1000d61a:	4b0d      	ldr	r3, [pc, #52]	; (1000d650 <gapc_encrypt_cfm_handler+0x78>)
1000d61c:	70e6      	strb	r6, [r4, #3]
1000d61e:	7227      	strb	r7, [r4, #8]
1000d620:	4798      	blx	r3
1000d622:	466b      	mov	r3, sp
1000d624:	7d1b      	ldrb	r3, [r3, #20]
1000d626:	1c20      	adds	r0, r4, #0
1000d628:	7663      	strb	r3, [r4, #25]
1000d62a:	2312      	movs	r3, #18
1000d62c:	211a      	movs	r1, #26
1000d62e:	71a3      	strb	r3, [r4, #6]
1000d630:	4b08      	ldr	r3, [pc, #32]	; (1000d654 <gapc_encrypt_cfm_handler+0x7c>)
1000d632:	71e5      	strb	r5, [r4, #7]
1000d634:	4798      	blx	r3
1000d636:	b007      	add	sp, #28
1000d638:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d63a:	46c0      	nop			; (mov r8, r8)
1000d63c:	10011fd4 	.word	0x10011fd4
1000d640:	1000cfd5 	.word	0x1000cfd5
1000d644:	10012f68 	.word	0x10012f68
1000d648:	10012bf8 	.word	0x10012bf8
1000d64c:	10012f71 	.word	0x10012f71
1000d650:	1000f7d7 	.word	0x1000f7d7
1000d654:	1000ccd9 	.word	0x1000ccd9

1000d658 <gapc_encrypt_ind>:
1000d658:	780b      	ldrb	r3, [r1, #0]
1000d65a:	0a00      	lsrs	r0, r0, #8
1000d65c:	70d3      	strb	r3, [r2, #3]
1000d65e:	2300      	movs	r3, #0
1000d660:	8010      	strh	r0, [r2, #0]
1000d662:	7093      	strb	r3, [r2, #2]
1000d664:	4770      	bx	lr
	...

1000d668 <gapc_param_update_cfm_handler>:
1000d668:	b538      	push	{r3, r4, r5, lr}
1000d66a:	2410      	movs	r4, #16
1000d66c:	1c05      	adds	r5, r0, #0
1000d66e:	480e      	ldr	r0, [pc, #56]	; (1000d6a8 <gapc_param_update_cfm_handler+0x40>)
1000d670:	7004      	strb	r4, [r0, #0]
1000d672:	3c02      	subs	r4, #2
1000d674:	7044      	strb	r4, [r0, #1]
1000d676:	7084      	strb	r4, [r0, #2]
1000d678:	4c0c      	ldr	r4, [pc, #48]	; (1000d6ac <gapc_param_update_cfm_handler+0x44>)
1000d67a:	70c5      	strb	r5, [r0, #3]
1000d67c:	8825      	ldrh	r5, [r4, #0]
1000d67e:	8824      	ldrh	r4, [r4, #0]
1000d680:	72c3      	strb	r3, [r0, #11]
1000d682:	0a1b      	lsrs	r3, r3, #8
1000d684:	0a24      	lsrs	r4, r4, #8
1000d686:	7303      	strb	r3, [r0, #12]
1000d688:	2305      	movs	r3, #5
1000d68a:	7144      	strb	r4, [r0, #5]
1000d68c:	2400      	movs	r4, #0
1000d68e:	7201      	strb	r1, [r0, #8]
1000d690:	7242      	strb	r2, [r0, #9]
1000d692:	7183      	strb	r3, [r0, #6]
1000d694:	0a12      	lsrs	r2, r2, #8
1000d696:	210d      	movs	r1, #13
1000d698:	4b05      	ldr	r3, [pc, #20]	; (1000d6b0 <gapc_param_update_cfm_handler+0x48>)
1000d69a:	7105      	strb	r5, [r0, #4]
1000d69c:	7282      	strb	r2, [r0, #10]
1000d69e:	71c4      	strb	r4, [r0, #7]
1000d6a0:	4798      	blx	r3
1000d6a2:	1c20      	adds	r0, r4, #0
1000d6a4:	bd38      	pop	{r3, r4, r5, pc}
1000d6a6:	46c0      	nop			; (mov r8, r8)
1000d6a8:	10012f68 	.word	0x10012f68
1000d6ac:	10012bf8 	.word	0x10012bf8
1000d6b0:	1000ccd9 	.word	0x1000ccd9

1000d6b4 <gapc_param_updated_ind>:
1000d6b4:	2300      	movs	r3, #0
1000d6b6:	0a00      	lsrs	r0, r0, #8
1000d6b8:	8010      	strh	r0, [r2, #0]
1000d6ba:	7093      	strb	r3, [r2, #2]
1000d6bc:	784b      	ldrb	r3, [r1, #1]
1000d6be:	7808      	ldrb	r0, [r1, #0]
1000d6c0:	021b      	lsls	r3, r3, #8
1000d6c2:	4303      	orrs	r3, r0
1000d6c4:	8093      	strh	r3, [r2, #4]
1000d6c6:	78cb      	ldrb	r3, [r1, #3]
1000d6c8:	7888      	ldrb	r0, [r1, #2]
1000d6ca:	021b      	lsls	r3, r3, #8
1000d6cc:	4303      	orrs	r3, r0
1000d6ce:	80d3      	strh	r3, [r2, #6]
1000d6d0:	794b      	ldrb	r3, [r1, #5]
1000d6d2:	7909      	ldrb	r1, [r1, #4]
1000d6d4:	021b      	lsls	r3, r3, #8
1000d6d6:	430b      	orrs	r3, r1
1000d6d8:	2007      	movs	r0, #7
1000d6da:	8113      	strh	r3, [r2, #8]
1000d6dc:	4770      	bx	lr

1000d6de <gapc_param_updated_req_ind>:
1000d6de:	0a00      	lsrs	r0, r0, #8
1000d6e0:	8010      	strh	r0, [r2, #0]
1000d6e2:	784b      	ldrb	r3, [r1, #1]
1000d6e4:	7808      	ldrb	r0, [r1, #0]
1000d6e6:	021b      	lsls	r3, r3, #8
1000d6e8:	4303      	orrs	r3, r0
1000d6ea:	8053      	strh	r3, [r2, #2]
1000d6ec:	78cb      	ldrb	r3, [r1, #3]
1000d6ee:	7888      	ldrb	r0, [r1, #2]
1000d6f0:	021b      	lsls	r3, r3, #8
1000d6f2:	4303      	orrs	r3, r0
1000d6f4:	8093      	strh	r3, [r2, #4]
1000d6f6:	794b      	ldrb	r3, [r1, #5]
1000d6f8:	7908      	ldrb	r0, [r1, #4]
1000d6fa:	021b      	lsls	r3, r3, #8
1000d6fc:	4303      	orrs	r3, r0
1000d6fe:	80d3      	strh	r3, [r2, #6]
1000d700:	79cb      	ldrb	r3, [r1, #7]
1000d702:	7989      	ldrb	r1, [r1, #6]
1000d704:	021b      	lsls	r3, r3, #8
1000d706:	430b      	orrs	r3, r1
1000d708:	2008      	movs	r0, #8
1000d70a:	8113      	strh	r3, [r2, #8]
1000d70c:	4770      	bx	lr
	...

1000d710 <gapc_dev_info_req_ind_handler>:
1000d710:	b508      	push	{r3, lr}
1000d712:	1c0b      	adds	r3, r1, #0
1000d714:	0a01      	lsrs	r1, r0, #8
1000d716:	8011      	strh	r1, [r2, #0]
1000d718:	7818      	ldrb	r0, [r3, #0]
1000d71a:	7090      	strb	r0, [r2, #2]
1000d71c:	2800      	cmp	r0, #0
1000d71e:	d104      	bne.n	1000d72a <gapc_dev_info_req_ind_handler+0x1a>
1000d720:	4b03      	ldr	r3, [pc, #12]	; (1000d730 <gapc_dev_info_req_ind_handler+0x20>)
1000d722:	33aa      	adds	r3, #170	; 0xaa
1000d724:	881b      	ldrh	r3, [r3, #0]
1000d726:	2b00      	cmp	r3, #0
1000d728:	d001      	beq.n	1000d72e <gapc_dev_info_req_ind_handler+0x1e>
1000d72a:	4b02      	ldr	r3, [pc, #8]	; (1000d734 <gapc_dev_info_req_ind_handler+0x24>)
1000d72c:	4798      	blx	r3
1000d72e:	bd08      	pop	{r3, pc}
1000d730:	10012c8a 	.word	0x10012c8a
1000d734:	1000cde1 	.word	0x1000cde1

1000d738 <gapc_sec_req_ind>:
1000d738:	0a00      	lsrs	r0, r0, #8
1000d73a:	8010      	strh	r0, [r2, #0]
1000d73c:	7809      	ldrb	r1, [r1, #0]
1000d73e:	2301      	movs	r3, #1
1000d740:	1c08      	adds	r0, r1, #0
1000d742:	0889      	lsrs	r1, r1, #2
1000d744:	4018      	ands	r0, r3
1000d746:	400b      	ands	r3, r1
1000d748:	70d0      	strb	r0, [r2, #3]
1000d74a:	7113      	strb	r3, [r2, #4]
1000d74c:	4770      	bx	lr

1000d74e <gapc_sign_counter_ind_handler>:
1000d74e:	0a00      	lsrs	r0, r0, #8
1000d750:	8010      	strh	r0, [r2, #0]
1000d752:	784b      	ldrb	r3, [r1, #1]
1000d754:	0218      	lsls	r0, r3, #8
1000d756:	788b      	ldrb	r3, [r1, #2]
1000d758:	041b      	lsls	r3, r3, #16
1000d75a:	4303      	orrs	r3, r0
1000d75c:	7808      	ldrb	r0, [r1, #0]
1000d75e:	4303      	orrs	r3, r0
1000d760:	78c8      	ldrb	r0, [r1, #3]
1000d762:	0600      	lsls	r0, r0, #24
1000d764:	4303      	orrs	r3, r0
1000d766:	6053      	str	r3, [r2, #4]
1000d768:	794b      	ldrb	r3, [r1, #5]
1000d76a:	0218      	lsls	r0, r3, #8
1000d76c:	798b      	ldrb	r3, [r1, #6]
1000d76e:	041b      	lsls	r3, r3, #16
1000d770:	4303      	orrs	r3, r0
1000d772:	7908      	ldrb	r0, [r1, #4]
1000d774:	79c9      	ldrb	r1, [r1, #7]
1000d776:	4303      	orrs	r3, r0
1000d778:	0609      	lsls	r1, r1, #24
1000d77a:	430b      	orrs	r3, r1
1000d77c:	2000      	movs	r0, #0
1000d77e:	6093      	str	r3, [r2, #8]
1000d780:	4770      	bx	lr
	...

1000d784 <gapc_peer_att_info_ind_handler>:
1000d784:	b510      	push	{r4, lr}
1000d786:	0a00      	lsrs	r0, r0, #8
1000d788:	8010      	strh	r0, [r2, #0]
1000d78a:	7808      	ldrb	r0, [r1, #0]
1000d78c:	7090      	strb	r0, [r2, #2]
1000d78e:	788b      	ldrb	r3, [r1, #2]
1000d790:	784c      	ldrb	r4, [r1, #1]
1000d792:	021b      	lsls	r3, r3, #8
1000d794:	4323      	orrs	r3, r4
1000d796:	8093      	strh	r3, [r2, #4]
1000d798:	2801      	cmp	r0, #1
1000d79a:	d027      	beq.n	1000d7ec <gapc_peer_att_info_ind_handler+0x68>
1000d79c:	2800      	cmp	r0, #0
1000d79e:	d017      	beq.n	1000d7d0 <gapc_peer_att_info_ind_handler+0x4c>
1000d7a0:	2802      	cmp	r0, #2
1000d7a2:	d12a      	bne.n	1000d7fa <gapc_peer_att_info_ind_handler+0x76>
1000d7a4:	790b      	ldrb	r3, [r1, #4]
1000d7a6:	78c8      	ldrb	r0, [r1, #3]
1000d7a8:	021b      	lsls	r3, r3, #8
1000d7aa:	4303      	orrs	r3, r0
1000d7ac:	8113      	strh	r3, [r2, #8]
1000d7ae:	798b      	ldrb	r3, [r1, #6]
1000d7b0:	7948      	ldrb	r0, [r1, #5]
1000d7b2:	021b      	lsls	r3, r3, #8
1000d7b4:	4303      	orrs	r3, r0
1000d7b6:	80d3      	strh	r3, [r2, #6]
1000d7b8:	7a0b      	ldrb	r3, [r1, #8]
1000d7ba:	79c8      	ldrb	r0, [r1, #7]
1000d7bc:	021b      	lsls	r3, r3, #8
1000d7be:	4303      	orrs	r3, r0
1000d7c0:	8193      	strh	r3, [r2, #12]
1000d7c2:	7a8b      	ldrb	r3, [r1, #10]
1000d7c4:	7a49      	ldrb	r1, [r1, #9]
1000d7c6:	021b      	lsls	r3, r3, #8
1000d7c8:	430b      	orrs	r3, r1
1000d7ca:	8153      	strh	r3, [r2, #10]
1000d7cc:	2306      	movs	r3, #6
1000d7ce:	e013      	b.n	1000d7f8 <gapc_peer_att_info_ind_handler+0x74>
1000d7d0:	1c14      	adds	r4, r2, #0
1000d7d2:	1c20      	adds	r0, r4, #0
1000d7d4:	790a      	ldrb	r2, [r1, #4]
1000d7d6:	78cb      	ldrb	r3, [r1, #3]
1000d7d8:	0212      	lsls	r2, r2, #8
1000d7da:	431a      	orrs	r2, r3
1000d7dc:	80e2      	strh	r2, [r4, #6]
1000d7de:	4b07      	ldr	r3, [pc, #28]	; (1000d7fc <gapc_peer_att_info_ind_handler+0x78>)
1000d7e0:	3008      	adds	r0, #8
1000d7e2:	3105      	adds	r1, #5
1000d7e4:	4798      	blx	r3
1000d7e6:	2302      	movs	r3, #2
1000d7e8:	70a3      	strb	r3, [r4, #2]
1000d7ea:	e006      	b.n	1000d7fa <gapc_peer_att_info_ind_handler+0x76>
1000d7ec:	790b      	ldrb	r3, [r1, #4]
1000d7ee:	78c9      	ldrb	r1, [r1, #3]
1000d7f0:	021b      	lsls	r3, r3, #8
1000d7f2:	430b      	orrs	r3, r1
1000d7f4:	80d3      	strh	r3, [r2, #6]
1000d7f6:	2305      	movs	r3, #5
1000d7f8:	7093      	strb	r3, [r2, #2]
1000d7fa:	bd10      	pop	{r4, pc}
1000d7fc:	1000f7d7 	.word	0x1000f7d7

1000d800 <gapc_con_channel_map_ind_handler>:
1000d800:	b508      	push	{r3, lr}
1000d802:	2300      	movs	r3, #0
1000d804:	0a00      	lsrs	r0, r0, #8
1000d806:	7013      	strb	r3, [r2, #0]
1000d808:	8050      	strh	r0, [r2, #2]
1000d80a:	4b02      	ldr	r3, [pc, #8]	; (1000d814 <gapc_con_channel_map_ind_handler+0x14>)
1000d80c:	1d10      	adds	r0, r2, #4
1000d80e:	2205      	movs	r2, #5
1000d810:	4798      	blx	r3
1000d812:	bd08      	pop	{r3, pc}
1000d814:	1000f7d7 	.word	0x1000f7d7

1000d818 <gapc_lecb_connected>:
1000d818:	7843      	ldrb	r3, [r0, #1]
1000d81a:	7802      	ldrb	r2, [r0, #0]
1000d81c:	021b      	lsls	r3, r3, #8
1000d81e:	4313      	orrs	r3, r2
1000d820:	800b      	strh	r3, [r1, #0]
1000d822:	78c3      	ldrb	r3, [r0, #3]
1000d824:	7882      	ldrb	r2, [r0, #2]
1000d826:	021b      	lsls	r3, r3, #8
1000d828:	4313      	orrs	r3, r2
1000d82a:	804b      	strh	r3, [r1, #2]
1000d82c:	7943      	ldrb	r3, [r0, #5]
1000d82e:	7902      	ldrb	r2, [r0, #4]
1000d830:	021b      	lsls	r3, r3, #8
1000d832:	4313      	orrs	r3, r2
1000d834:	808b      	strh	r3, [r1, #4]
1000d836:	79c3      	ldrb	r3, [r0, #7]
1000d838:	7982      	ldrb	r2, [r0, #6]
1000d83a:	021b      	lsls	r3, r3, #8
1000d83c:	4313      	orrs	r3, r2
1000d83e:	80cb      	strh	r3, [r1, #6]
1000d840:	2300      	movs	r3, #0
1000d842:	720b      	strb	r3, [r1, #8]
1000d844:	4770      	bx	lr

1000d846 <gapc_lecb_disconnected>:
1000d846:	7843      	ldrb	r3, [r0, #1]
1000d848:	7802      	ldrb	r2, [r0, #0]
1000d84a:	021b      	lsls	r3, r3, #8
1000d84c:	4313      	orrs	r3, r2
1000d84e:	800b      	strh	r3, [r1, #0]
1000d850:	78c3      	ldrb	r3, [r0, #3]
1000d852:	7882      	ldrb	r2, [r0, #2]
1000d854:	021b      	lsls	r3, r3, #8
1000d856:	4313      	orrs	r3, r2
1000d858:	804b      	strh	r3, [r1, #2]
1000d85a:	4770      	bx	lr

1000d85c <gapc_lecb_connect_req_ind>:
1000d85c:	7843      	ldrb	r3, [r0, #1]
1000d85e:	7802      	ldrb	r2, [r0, #0]
1000d860:	021b      	lsls	r3, r3, #8
1000d862:	4313      	orrs	r3, r2
1000d864:	800b      	strh	r3, [r1, #0]
1000d866:	78c3      	ldrb	r3, [r0, #3]
1000d868:	7882      	ldrb	r2, [r0, #2]
1000d86a:	021b      	lsls	r3, r3, #8
1000d86c:	4313      	orrs	r3, r2
1000d86e:	804b      	strh	r3, [r1, #2]
1000d870:	7943      	ldrb	r3, [r0, #5]
1000d872:	7902      	ldrb	r2, [r0, #4]
1000d874:	021b      	lsls	r3, r3, #8
1000d876:	4313      	orrs	r3, r2
1000d878:	808b      	strh	r3, [r1, #4]
1000d87a:	79c3      	ldrb	r3, [r0, #7]
1000d87c:	7982      	ldrb	r2, [r0, #6]
1000d87e:	021b      	lsls	r3, r3, #8
1000d880:	4313      	orrs	r3, r2
1000d882:	80cb      	strh	r3, [r1, #6]
1000d884:	4770      	bx	lr

1000d886 <gapc_lecb_add_credit_resp_handler>:
1000d886:	7843      	ldrb	r3, [r0, #1]
1000d888:	7802      	ldrb	r2, [r0, #0]
1000d88a:	021b      	lsls	r3, r3, #8
1000d88c:	4313      	orrs	r3, r2
1000d88e:	800b      	strh	r3, [r1, #0]
1000d890:	78c3      	ldrb	r3, [r0, #3]
1000d892:	7882      	ldrb	r2, [r0, #2]
1000d894:	021b      	lsls	r3, r3, #8
1000d896:	4313      	orrs	r3, r2
1000d898:	804b      	strh	r3, [r1, #2]
1000d89a:	7943      	ldrb	r3, [r0, #5]
1000d89c:	7902      	ldrb	r2, [r0, #4]
1000d89e:	021b      	lsls	r3, r3, #8
1000d8a0:	4313      	orrs	r3, r2
1000d8a2:	808b      	strh	r3, [r1, #4]
1000d8a4:	4770      	bx	lr
	...

1000d8a8 <gapm_reset_req_handler>:
1000d8a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d8aa:	466b      	mov	r3, sp
1000d8ac:	4915      	ldr	r1, [pc, #84]	; (1000d904 <gapm_reset_req_handler+0x5c>)
1000d8ae:	4816      	ldr	r0, [pc, #88]	; (1000d908 <gapm_reset_req_handler+0x60>)
1000d8b0:	880c      	ldrh	r4, [r1, #0]
1000d8b2:	8809      	ldrh	r1, [r1, #0]
1000d8b4:	1ddd      	adds	r5, r3, #7
1000d8b6:	0a09      	lsrs	r1, r1, #8
1000d8b8:	2300      	movs	r3, #0
1000d8ba:	2202      	movs	r2, #2
1000d8bc:	7141      	strb	r1, [r0, #5]
1000d8be:	26d0      	movs	r6, #208	; 0xd0
1000d8c0:	2101      	movs	r1, #1
1000d8c2:	7104      	strb	r4, [r0, #4]
1000d8c4:	4c11      	ldr	r4, [pc, #68]	; (1000d90c <gapm_reset_req_handler+0x64>)
1000d8c6:	702b      	strb	r3, [r5, #0]
1000d8c8:	7002      	strb	r2, [r0, #0]
1000d8ca:	70c3      	strb	r3, [r0, #3]
1000d8cc:	320b      	adds	r2, #11
1000d8ce:	7201      	strb	r1, [r0, #8]
1000d8d0:	7181      	strb	r1, [r0, #6]
1000d8d2:	71c3      	strb	r3, [r0, #7]
1000d8d4:	3108      	adds	r1, #8
1000d8d6:	4b0e      	ldr	r3, [pc, #56]	; (1000d910 <gapm_reset_req_handler+0x68>)
1000d8d8:	0136      	lsls	r6, r6, #4
1000d8da:	7042      	strb	r2, [r0, #1]
1000d8dc:	7082      	strb	r2, [r0, #2]
1000d8de:	80a2      	strh	r2, [r4, #4]
1000d8e0:	8026      	strh	r6, [r4, #0]
1000d8e2:	4798      	blx	r3
1000d8e4:	1c28      	adds	r0, r5, #0
1000d8e6:	4b0b      	ldr	r3, [pc, #44]	; (1000d914 <gapm_reset_req_handler+0x6c>)
1000d8e8:	4798      	blx	r3
1000d8ea:	782b      	ldrb	r3, [r5, #0]
1000d8ec:	20e2      	movs	r0, #226	; 0xe2
1000d8ee:	2b00      	cmp	r3, #0
1000d8f0:	d106      	bne.n	1000d900 <gapm_reset_req_handler+0x58>
1000d8f2:	68a3      	ldr	r3, [r4, #8]
1000d8f4:	20e2      	movs	r0, #226	; 0xe2
1000d8f6:	781a      	ldrb	r2, [r3, #0]
1000d8f8:	785b      	ldrb	r3, [r3, #1]
1000d8fa:	2a01      	cmp	r2, #1
1000d8fc:	d100      	bne.n	1000d900 <gapm_reset_req_handler+0x58>
1000d8fe:	1c18      	adds	r0, r3, #0
1000d900:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d902:	46c0      	nop			; (mov r8, r8)
1000d904:	10012bf8 	.word	0x10012bf8
1000d908:	10012f68 	.word	0x10012f68
1000d90c:	10012bec 	.word	0x10012bec
1000d910:	1000ccd9 	.word	0x1000ccd9
1000d914:	1000cd35 	.word	0x1000cd35

1000d918 <gapm_set_dev_config_cmd_handler>:
1000d918:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d91a:	b089      	sub	sp, #36	; 0x24
1000d91c:	9303      	str	r3, [sp, #12]
1000d91e:	ab0e      	add	r3, sp, #56	; 0x38
1000d920:	781b      	ldrb	r3, [r3, #0]
1000d922:	4c37      	ldr	r4, [pc, #220]	; (1000da00 <gapm_set_dev_config_cmd_handler+0xe8>)
1000d924:	9304      	str	r3, [sp, #16]
1000d926:	ab0f      	add	r3, sp, #60	; 0x3c
1000d928:	781b      	ldrb	r3, [r3, #0]
1000d92a:	270d      	movs	r7, #13
1000d92c:	9305      	str	r3, [sp, #20]
1000d92e:	ab10      	add	r3, sp, #64	; 0x40
1000d930:	881b      	ldrh	r3, [r3, #0]
1000d932:	72a1      	strb	r1, [r4, #10]
1000d934:	9300      	str	r3, [sp, #0]
1000d936:	ab11      	add	r3, sp, #68	; 0x44
1000d938:	881b      	ldrh	r3, [r3, #0]
1000d93a:	0a09      	lsrs	r1, r1, #8
1000d93c:	9301      	str	r3, [sp, #4]
1000d93e:	ab12      	add	r3, sp, #72	; 0x48
1000d940:	881b      	ldrh	r3, [r3, #0]
1000d942:	7260      	strb	r0, [r4, #9]
1000d944:	9302      	str	r3, [sp, #8]
1000d946:	ab06      	add	r3, sp, #24
1000d948:	1dde      	adds	r6, r3, #7
1000d94a:	2300      	movs	r3, #0
1000d94c:	7033      	strb	r3, [r6, #0]
1000d94e:	2304      	movs	r3, #4
1000d950:	7023      	strb	r3, [r4, #0]
1000d952:	2300      	movs	r3, #0
1000d954:	70e3      	strb	r3, [r4, #3]
1000d956:	4b2b      	ldr	r3, [pc, #172]	; (1000da04 <gapm_set_dev_config_cmd_handler+0xec>)
1000d958:	72e1      	strb	r1, [r4, #11]
1000d95a:	881d      	ldrh	r5, [r3, #0]
1000d95c:	881b      	ldrh	r3, [r3, #0]
1000d95e:	1c11      	adds	r1, r2, #0
1000d960:	0a1b      	lsrs	r3, r3, #8
1000d962:	7163      	strb	r3, [r4, #5]
1000d964:	2303      	movs	r3, #3
1000d966:	7125      	strb	r5, [r4, #4]
1000d968:	2206      	movs	r2, #6
1000d96a:	4d27      	ldr	r5, [pc, #156]	; (1000da08 <gapm_set_dev_config_cmd_handler+0xf0>)
1000d96c:	4827      	ldr	r0, [pc, #156]	; (1000da0c <gapm_set_dev_config_cmd_handler+0xf4>)
1000d96e:	7223      	strb	r3, [r4, #8]
1000d970:	7067      	strb	r7, [r4, #1]
1000d972:	70a7      	strb	r7, [r4, #2]
1000d974:	47a8      	blx	r5
1000d976:	9903      	ldr	r1, [sp, #12]
1000d978:	2210      	movs	r2, #16
1000d97a:	4825      	ldr	r0, [pc, #148]	; (1000da10 <gapm_set_dev_config_cmd_handler+0xf8>)
1000d97c:	47a8      	blx	r5
1000d97e:	466a      	mov	r2, sp
1000d980:	7c12      	ldrb	r2, [r2, #16]
1000d982:	1ce3      	adds	r3, r4, #3
1000d984:	77da      	strb	r2, [r3, #31]
1000d986:	466a      	mov	r2, sp
1000d988:	7d12      	ldrb	r2, [r2, #20]
1000d98a:	1d23      	adds	r3, r4, #4
1000d98c:	77da      	strb	r2, [r3, #31]
1000d98e:	466a      	mov	r2, sp
1000d990:	7812      	ldrb	r2, [r2, #0]
1000d992:	1d63      	adds	r3, r4, #5
1000d994:	77da      	strb	r2, [r3, #31]
1000d996:	9b00      	ldr	r3, [sp, #0]
1000d998:	1da2      	adds	r2, r4, #6
1000d99a:	0a1b      	lsrs	r3, r3, #8
1000d99c:	77d3      	strb	r3, [r2, #31]
1000d99e:	466a      	mov	r2, sp
1000d9a0:	7912      	ldrb	r2, [r2, #4]
1000d9a2:	1de3      	adds	r3, r4, #7
1000d9a4:	77da      	strb	r2, [r3, #31]
1000d9a6:	1c22      	adds	r2, r4, #0
1000d9a8:	9b01      	ldr	r3, [sp, #4]
1000d9aa:	3208      	adds	r2, #8
1000d9ac:	0a1b      	lsrs	r3, r3, #8
1000d9ae:	77d3      	strb	r3, [r2, #31]
1000d9b0:	466a      	mov	r2, sp
1000d9b2:	1c23      	adds	r3, r4, #0
1000d9b4:	7a12      	ldrb	r2, [r2, #8]
1000d9b6:	3328      	adds	r3, #40	; 0x28
1000d9b8:	701a      	strb	r2, [r3, #0]
1000d9ba:	1c22      	adds	r2, r4, #0
1000d9bc:	9b02      	ldr	r3, [sp, #8]
1000d9be:	3229      	adds	r2, #41	; 0x29
1000d9c0:	0a1b      	lsrs	r3, r3, #8
1000d9c2:	7013      	strb	r3, [r2, #0]
1000d9c4:	23d0      	movs	r3, #208	; 0xd0
1000d9c6:	4d13      	ldr	r5, [pc, #76]	; (1000da14 <gapm_set_dev_config_cmd_handler+0xfc>)
1000d9c8:	011b      	lsls	r3, r3, #4
1000d9ca:	802b      	strh	r3, [r5, #0]
1000d9cc:	2322      	movs	r3, #34	; 0x22
1000d9ce:	71a3      	strb	r3, [r4, #6]
1000d9d0:	2300      	movs	r3, #0
1000d9d2:	212a      	movs	r1, #42	; 0x2a
1000d9d4:	71e3      	strb	r3, [r4, #7]
1000d9d6:	1c20      	adds	r0, r4, #0
1000d9d8:	4b0f      	ldr	r3, [pc, #60]	; (1000da18 <gapm_set_dev_config_cmd_handler+0x100>)
1000d9da:	80af      	strh	r7, [r5, #4]
1000d9dc:	4798      	blx	r3
1000d9de:	1c30      	adds	r0, r6, #0
1000d9e0:	4b0e      	ldr	r3, [pc, #56]	; (1000da1c <gapm_set_dev_config_cmd_handler+0x104>)
1000d9e2:	4798      	blx	r3
1000d9e4:	7833      	ldrb	r3, [r6, #0]
1000d9e6:	20e2      	movs	r0, #226	; 0xe2
1000d9e8:	2b00      	cmp	r3, #0
1000d9ea:	d106      	bne.n	1000d9fa <gapm_set_dev_config_cmd_handler+0xe2>
1000d9ec:	68ab      	ldr	r3, [r5, #8]
1000d9ee:	20e2      	movs	r0, #226	; 0xe2
1000d9f0:	781a      	ldrb	r2, [r3, #0]
1000d9f2:	785b      	ldrb	r3, [r3, #1]
1000d9f4:	2a03      	cmp	r2, #3
1000d9f6:	d100      	bne.n	1000d9fa <gapm_set_dev_config_cmd_handler+0xe2>
1000d9f8:	1c18      	adds	r0, r3, #0
1000d9fa:	b009      	add	sp, #36	; 0x24
1000d9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d9fe:	46c0      	nop			; (mov r8, r8)
1000da00:	10012f68 	.word	0x10012f68
1000da04:	10012bf8 	.word	0x10012bf8
1000da08:	1000f7d7 	.word	0x1000f7d7
1000da0c:	10012f74 	.word	0x10012f74
1000da10:	10012f7a 	.word	0x10012f7a
1000da14:	10012bec 	.word	0x10012bec
1000da18:	1000ccd9 	.word	0x1000ccd9
1000da1c:	1000cd35 	.word	0x1000cd35

1000da20 <gapm_get_dev_config_cmd_handler>:
1000da20:	4684      	mov	ip, r0
1000da22:	4663      	mov	r3, ip
1000da24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da26:	b085      	sub	sp, #20
1000da28:	9100      	str	r1, [sp, #0]
1000da2a:	20cf      	movs	r0, #207	; 0xcf
1000da2c:	2b01      	cmp	r3, #1
1000da2e:	d854      	bhi.n	1000dada <gapm_get_dev_config_cmd_handler+0xba>
1000da30:	2900      	cmp	r1, #0
1000da32:	d052      	beq.n	1000dada <gapm_get_dev_config_cmd_handler+0xba>
1000da34:	2200      	movs	r2, #0
1000da36:	492a      	ldr	r1, [pc, #168]	; (1000dae0 <gapm_get_dev_config_cmd_handler+0xc0>)
1000da38:	ab02      	add	r3, sp, #8
1000da3a:	880c      	ldrh	r4, [r1, #0]
1000da3c:	8809      	ldrh	r1, [r1, #0]
1000da3e:	1d9f      	adds	r7, r3, #6
1000da40:	719a      	strb	r2, [r3, #6]
1000da42:	4b28      	ldr	r3, [pc, #160]	; (1000dae4 <gapm_get_dev_config_cmd_handler+0xc4>)
1000da44:	0a09      	lsrs	r1, r1, #8
1000da46:	250d      	movs	r5, #13
1000da48:	2606      	movs	r6, #6
1000da4a:	7159      	strb	r1, [r3, #5]
1000da4c:	4661      	mov	r1, ip
1000da4e:	701e      	strb	r6, [r3, #0]
1000da50:	705d      	strb	r5, [r3, #1]
1000da52:	709d      	strb	r5, [r3, #2]
1000da54:	70da      	strb	r2, [r3, #3]
1000da56:	711c      	strb	r4, [r3, #4]
1000da58:	2901      	cmp	r1, #1
1000da5a:	d13e      	bne.n	1000dada <gapm_get_dev_config_cmd_handler+0xba>
1000da5c:	21d0      	movs	r1, #208	; 0xd0
1000da5e:	4c22      	ldr	r4, [pc, #136]	; (1000dae8 <gapm_get_dev_config_cmd_handler+0xc8>)
1000da60:	0109      	lsls	r1, r1, #4
1000da62:	8061      	strh	r1, [r4, #2]
1000da64:	4921      	ldr	r1, [pc, #132]	; (1000daec <gapm_get_dev_config_cmd_handler+0xcc>)
1000da66:	71da      	strb	r2, [r3, #7]
1000da68:	8021      	strh	r1, [r4, #0]
1000da6a:	4661      	mov	r1, ip
1000da6c:	721e      	strb	r6, [r3, #8]
1000da6e:	7199      	strb	r1, [r3, #6]
1000da70:	1c18      	adds	r0, r3, #0
1000da72:	2109      	movs	r1, #9
1000da74:	4b1e      	ldr	r3, [pc, #120]	; (1000daf0 <gapm_get_dev_config_cmd_handler+0xd0>)
1000da76:	80a5      	strh	r5, [r4, #4]
1000da78:	4798      	blx	r3
1000da7a:	1c38      	adds	r0, r7, #0
1000da7c:	4b1d      	ldr	r3, [pc, #116]	; (1000daf4 <gapm_get_dev_config_cmd_handler+0xd4>)
1000da7e:	4798      	blx	r3
1000da80:	783b      	ldrb	r3, [r7, #0]
1000da82:	20e2      	movs	r0, #226	; 0xe2
1000da84:	9301      	str	r3, [sp, #4]
1000da86:	2b00      	cmp	r3, #0
1000da88:	d127      	bne.n	1000dada <gapm_get_dev_config_cmd_handler+0xba>
1000da8a:	8821      	ldrh	r1, [r4, #0]
1000da8c:	4a1a      	ldr	r2, [pc, #104]	; (1000daf8 <gapm_get_dev_config_cmd_handler+0xd8>)
1000da8e:	68a7      	ldr	r7, [r4, #8]
1000da90:	3b01      	subs	r3, #1
1000da92:	4291      	cmp	r1, r2
1000da94:	d001      	beq.n	1000da9a <gapm_get_dev_config_cmd_handler+0x7a>
1000da96:	8023      	strh	r3, [r4, #0]
1000da98:	e01a      	b.n	1000dad0 <gapm_get_dev_config_cmd_handler+0xb0>
1000da9a:	8063      	strh	r3, [r4, #2]
1000da9c:	9b00      	ldr	r3, [sp, #0]
1000da9e:	1c39      	adds	r1, r7, #0
1000daa0:	1c58      	adds	r0, r3, #1
1000daa2:	1c32      	adds	r2, r6, #0
1000daa4:	4b15      	ldr	r3, [pc, #84]	; (1000dafc <gapm_get_dev_config_cmd_handler+0xdc>)
1000daa6:	4798      	blx	r3
1000daa8:	79bb      	ldrb	r3, [r7, #6]
1000daaa:	9a00      	ldr	r2, [sp, #0]
1000daac:	7013      	strb	r3, [r2, #0]
1000daae:	23d0      	movs	r3, #208	; 0xd0
1000dab0:	011b      	lsls	r3, r3, #4
1000dab2:	8023      	strh	r3, [r4, #0]
1000dab4:	ab02      	add	r3, sp, #8
1000dab6:	80a5      	strh	r5, [r4, #4]
1000dab8:	1ddd      	adds	r5, r3, #7
1000daba:	466b      	mov	r3, sp
1000dabc:	791b      	ldrb	r3, [r3, #4]
1000dabe:	1c28      	adds	r0, r5, #0
1000dac0:	702b      	strb	r3, [r5, #0]
1000dac2:	4b0c      	ldr	r3, [pc, #48]	; (1000daf4 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dac4:	4798      	blx	r3
1000dac6:	782b      	ldrb	r3, [r5, #0]
1000dac8:	20d0      	movs	r0, #208	; 0xd0
1000daca:	2b00      	cmp	r3, #0
1000dacc:	d105      	bne.n	1000dada <gapm_get_dev_config_cmd_handler+0xba>
1000dace:	68a7      	ldr	r7, [r4, #8]
1000dad0:	783b      	ldrb	r3, [r7, #0]
1000dad2:	7878      	ldrb	r0, [r7, #1]
1000dad4:	2b06      	cmp	r3, #6
1000dad6:	d000      	beq.n	1000dada <gapm_get_dev_config_cmd_handler+0xba>
1000dad8:	20e2      	movs	r0, #226	; 0xe2
1000dada:	b005      	add	sp, #20
1000dadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dade:	46c0      	nop			; (mov r8, r8)
1000dae0:	10012bf8 	.word	0x10012bf8
1000dae4:	10012f68 	.word	0x10012f68
1000dae8:	10012bec 	.word	0x10012bec
1000daec:	00000d08 	.word	0x00000d08
1000daf0:	1000ccd9 	.word	0x1000ccd9
1000daf4:	1000cd35 	.word	0x1000cd35
1000daf8:	0000ffff 	.word	0x0000ffff
1000dafc:	1000f7d7 	.word	0x1000f7d7

1000db00 <gapm_cancel_cmd_handler>:
1000db00:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000db02:	4916      	ldr	r1, [pc, #88]	; (1000db5c <gapm_cancel_cmd_handler+0x5c>)
1000db04:	4816      	ldr	r0, [pc, #88]	; (1000db60 <gapm_cancel_cmd_handler+0x60>)
1000db06:	880c      	ldrh	r4, [r1, #0]
1000db08:	8809      	ldrh	r1, [r1, #0]
1000db0a:	466b      	mov	r3, sp
1000db0c:	0a09      	lsrs	r1, r1, #8
1000db0e:	7141      	strb	r1, [r0, #5]
1000db10:	2102      	movs	r1, #2
1000db12:	2203      	movs	r2, #3
1000db14:	7201      	strb	r1, [r0, #8]
1000db16:	21d0      	movs	r1, #208	; 0xd0
1000db18:	1ddd      	adds	r5, r3, #7
1000db1a:	2300      	movs	r3, #0
1000db1c:	7104      	strb	r4, [r0, #4]
1000db1e:	4c11      	ldr	r4, [pc, #68]	; (1000db64 <gapm_cancel_cmd_handler+0x64>)
1000db20:	7002      	strb	r2, [r0, #0]
1000db22:	0109      	lsls	r1, r1, #4
1000db24:	320a      	adds	r2, #10
1000db26:	702b      	strb	r3, [r5, #0]
1000db28:	7042      	strb	r2, [r0, #1]
1000db2a:	7082      	strb	r2, [r0, #2]
1000db2c:	70c3      	strb	r3, [r0, #3]
1000db2e:	8021      	strh	r1, [r4, #0]
1000db30:	80a2      	strh	r2, [r4, #4]
1000db32:	71c3      	strb	r3, [r0, #7]
1000db34:	3a0c      	subs	r2, #12
1000db36:	2109      	movs	r1, #9
1000db38:	4b0b      	ldr	r3, [pc, #44]	; (1000db68 <gapm_cancel_cmd_handler+0x68>)
1000db3a:	7182      	strb	r2, [r0, #6]
1000db3c:	4798      	blx	r3
1000db3e:	1c28      	adds	r0, r5, #0
1000db40:	4b0a      	ldr	r3, [pc, #40]	; (1000db6c <gapm_cancel_cmd_handler+0x6c>)
1000db42:	4798      	blx	r3
1000db44:	7828      	ldrb	r0, [r5, #0]
1000db46:	2800      	cmp	r0, #0
1000db48:	d001      	beq.n	1000db4e <gapm_cancel_cmd_handler+0x4e>
1000db4a:	20e2      	movs	r0, #226	; 0xe2
1000db4c:	e004      	b.n	1000db58 <gapm_cancel_cmd_handler+0x58>
1000db4e:	68a3      	ldr	r3, [r4, #8]
1000db50:	785b      	ldrb	r3, [r3, #1]
1000db52:	2b44      	cmp	r3, #68	; 0x44
1000db54:	d000      	beq.n	1000db58 <gapm_cancel_cmd_handler+0x58>
1000db56:	1c18      	adds	r0, r3, #0
1000db58:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000db5a:	46c0      	nop			; (mov r8, r8)
1000db5c:	10012bf8 	.word	0x10012bf8
1000db60:	10012f68 	.word	0x10012f68
1000db64:	10012bec 	.word	0x10012bec
1000db68:	1000ccd9 	.word	0x1000ccd9
1000db6c:	1000cd35 	.word	0x1000cd35

1000db70 <gapm_dev_bdaddr_ind_handler>:
1000db70:	b538      	push	{r3, r4, r5, lr}
1000db72:	1c05      	adds	r5, r0, #0
1000db74:	1c0c      	adds	r4, r1, #0
1000db76:	1c48      	adds	r0, r1, #1
1000db78:	2206      	movs	r2, #6
1000db7a:	1c29      	adds	r1, r5, #0
1000db7c:	4b02      	ldr	r3, [pc, #8]	; (1000db88 <gapm_dev_bdaddr_ind_handler+0x18>)
1000db7e:	4798      	blx	r3
1000db80:	79ab      	ldrb	r3, [r5, #6]
1000db82:	2000      	movs	r0, #0
1000db84:	7023      	strb	r3, [r4, #0]
1000db86:	bd38      	pop	{r3, r4, r5, pc}
1000db88:	1000f7d7 	.word	0x1000f7d7

1000db8c <gapm_cmp_evt>:
1000db8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000db8e:	7803      	ldrb	r3, [r0, #0]
1000db90:	7845      	ldrb	r5, [r0, #1]
1000db92:	3b0c      	subs	r3, #12
1000db94:	1e18      	subs	r0, r3, #0
1000db96:	280b      	cmp	r0, #11
1000db98:	d900      	bls.n	1000db9c <gapm_cmp_evt+0x10>
1000db9a:	e08d      	b.n	1000dcb8 <gapm_cmp_evt+0x12c>
1000db9c:	1c0c      	adds	r4, r1, #0
1000db9e:	f000 fd39 	bl	1000e614 <__gnu_thumb1_case_uqi>
1000dba2:	1952      	.short	0x1952
1000dba4:	068b1919 	.word	0x068b1919
1000dba8:	8b595906 	.word	0x8b595906
1000dbac:	0d8b      	.short	0x0d8b
1000dbae:	2300      	movs	r3, #0
1000dbb0:	2d45      	cmp	r5, #69	; 0x45
1000dbb2:	d000      	beq.n	1000dbb6 <gapm_cmp_evt+0x2a>
1000dbb4:	1c2b      	adds	r3, r5, #0
1000dbb6:	7023      	strb	r3, [r4, #0]
1000dbb8:	2002      	movs	r0, #2
1000dbba:	e07e      	b.n	1000dcba <gapm_cmp_evt+0x12e>
1000dbbc:	203b      	movs	r0, #59	; 0x3b
1000dbbe:	2d00      	cmp	r5, #0
1000dbc0:	d100      	bne.n	1000dbc4 <gapm_cmp_evt+0x38>
1000dbc2:	e07a      	b.n	1000dcba <gapm_cmp_evt+0x12e>
1000dbc4:	700d      	strb	r5, [r1, #0]
1000dbc6:	1c48      	adds	r0, r1, #1
1000dbc8:	2210      	movs	r2, #16
1000dbca:	2100      	movs	r1, #0
1000dbcc:	4b3b      	ldr	r3, [pc, #236]	; (1000dcbc <gapm_cmp_evt+0x130>)
1000dbce:	4798      	blx	r3
1000dbd0:	200f      	movs	r0, #15
1000dbd2:	e072      	b.n	1000dcba <gapm_cmp_evt+0x12e>
1000dbd4:	2d00      	cmp	r5, #0
1000dbd6:	d134      	bne.n	1000dc42 <gapm_cmp_evt+0xb6>
1000dbd8:	4b39      	ldr	r3, [pc, #228]	; (1000dcc0 <gapm_cmp_evt+0x134>)
1000dbda:	4798      	blx	r3
1000dbdc:	1e43      	subs	r3, r0, #1
1000dbde:	b2db      	uxtb	r3, r3
1000dbe0:	1c28      	adds	r0, r5, #0
1000dbe2:	2b06      	cmp	r3, #6
1000dbe4:	d869      	bhi.n	1000dcba <gapm_cmp_evt+0x12e>
1000dbe6:	466b      	mov	r3, sp
1000dbe8:	4e36      	ldr	r6, [pc, #216]	; (1000dcc4 <gapm_cmp_evt+0x138>)
1000dbea:	1dd9      	adds	r1, r3, #7
1000dbec:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000dbee:	4b36      	ldr	r3, [pc, #216]	; (1000dcc8 <gapm_cmp_evt+0x13c>)
1000dbf0:	4798      	blx	r3
1000dbf2:	2312      	movs	r3, #18
1000dbf4:	4358      	muls	r0, r3
1000dbf6:	4935      	ldr	r1, [pc, #212]	; (1000dccc <gapm_cmp_evt+0x140>)
1000dbf8:	1809      	adds	r1, r1, r0
1000dbfa:	1c0b      	adds	r3, r1, #0
1000dbfc:	894a      	ldrh	r2, [r1, #10]
1000dbfe:	3308      	adds	r3, #8
1000dc00:	8122      	strh	r2, [r4, #8]
1000dc02:	784f      	ldrb	r7, [r1, #1]
1000dc04:	72a5      	strb	r5, [r4, #10]
1000dc06:	7027      	strb	r7, [r4, #0]
1000dc08:	898a      	ldrh	r2, [r1, #12]
1000dc0a:	1c60      	adds	r0, r4, #1
1000dc0c:	81a2      	strh	r2, [r4, #12]
1000dc0e:	88db      	ldrh	r3, [r3, #6]
1000dc10:	3102      	adds	r1, #2
1000dc12:	81e3      	strh	r3, [r4, #14]
1000dc14:	89cb      	ldrh	r3, [r1, #14]
1000dc16:	2206      	movs	r2, #6
1000dc18:	8223      	strh	r3, [r4, #16]
1000dc1a:	4b2d      	ldr	r3, [pc, #180]	; (1000dcd0 <gapm_cmp_evt+0x144>)
1000dc1c:	4798      	blx	r3
1000dc1e:	2f00      	cmp	r7, #0
1000dc20:	d00a      	beq.n	1000dc38 <gapm_cmp_evt+0xac>
1000dc22:	79a3      	ldrb	r3, [r4, #6]
1000dc24:	223f      	movs	r2, #63	; 0x3f
1000dc26:	1c19      	adds	r1, r3, #0
1000dc28:	3501      	adds	r5, #1
1000dc2a:	4391      	bics	r1, r2
1000dc2c:	29c0      	cmp	r1, #192	; 0xc0
1000dc2e:	d003      	beq.n	1000dc38 <gapm_cmp_evt+0xac>
1000dc30:	065b      	lsls	r3, r3, #25
1000dc32:	0fdb      	lsrs	r3, r3, #31
1000dc34:	3502      	adds	r5, #2
1000dc36:	1aed      	subs	r5, r5, r3
1000dc38:	2301      	movs	r3, #1
1000dc3a:	425b      	negs	r3, r3
1000dc3c:	7025      	strb	r5, [r4, #0]
1000dc3e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000dc40:	e038      	b.n	1000dcb4 <gapm_cmp_evt+0x128>
1000dc42:	700d      	strb	r5, [r1, #0]
1000dc44:	e004      	b.n	1000dc50 <gapm_cmp_evt+0xc4>
1000dc46:	2300      	movs	r3, #0
1000dc48:	2d45      	cmp	r5, #69	; 0x45
1000dc4a:	d000      	beq.n	1000dc4e <gapm_cmp_evt+0xc2>
1000dc4c:	1c2b      	adds	r3, r5, #0
1000dc4e:	7023      	strb	r3, [r4, #0]
1000dc50:	2003      	movs	r0, #3
1000dc52:	e032      	b.n	1000dcba <gapm_cmp_evt+0x12e>
1000dc54:	4e1b      	ldr	r6, [pc, #108]	; (1000dcc4 <gapm_cmp_evt+0x138>)
1000dc56:	2100      	movs	r1, #0
1000dc58:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000dc5a:	4b1b      	ldr	r3, [pc, #108]	; (1000dcc8 <gapm_cmp_evt+0x13c>)
1000dc5c:	4798      	blx	r3
1000dc5e:	2807      	cmp	r0, #7
1000dc60:	d818      	bhi.n	1000dc94 <gapm_cmp_evt+0x108>
1000dc62:	2301      	movs	r3, #1
1000dc64:	425b      	negs	r3, r3
1000dc66:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000dc68:	3313      	adds	r3, #19
1000dc6a:	4358      	muls	r0, r3
1000dc6c:	4917      	ldr	r1, [pc, #92]	; (1000dccc <gapm_cmp_evt+0x140>)
1000dc6e:	1809      	adds	r1, r1, r0
1000dc70:	1c0b      	adds	r3, r1, #0
1000dc72:	894a      	ldrh	r2, [r1, #10]
1000dc74:	3308      	adds	r3, #8
1000dc76:	8122      	strh	r2, [r4, #8]
1000dc78:	784a      	ldrb	r2, [r1, #1]
1000dc7a:	72a5      	strb	r5, [r4, #10]
1000dc7c:	7022      	strb	r2, [r4, #0]
1000dc7e:	898a      	ldrh	r2, [r1, #12]
1000dc80:	1c60      	adds	r0, r4, #1
1000dc82:	81a2      	strh	r2, [r4, #12]
1000dc84:	88db      	ldrh	r3, [r3, #6]
1000dc86:	3102      	adds	r1, #2
1000dc88:	81e3      	strh	r3, [r4, #14]
1000dc8a:	89cb      	ldrh	r3, [r1, #14]
1000dc8c:	2206      	movs	r2, #6
1000dc8e:	8223      	strh	r3, [r4, #16]
1000dc90:	4b0f      	ldr	r3, [pc, #60]	; (1000dcd0 <gapm_cmp_evt+0x144>)
1000dc92:	4798      	blx	r3
1000dc94:	2200      	movs	r2, #0
1000dc96:	7823      	ldrb	r3, [r4, #0]
1000dc98:	4293      	cmp	r3, r2
1000dc9a:	d00a      	beq.n	1000dcb2 <gapm_cmp_evt+0x126>
1000dc9c:	79a3      	ldrb	r3, [r4, #6]
1000dc9e:	323f      	adds	r2, #63	; 0x3f
1000dca0:	1c19      	adds	r1, r3, #0
1000dca2:	4391      	bics	r1, r2
1000dca4:	3a3e      	subs	r2, #62	; 0x3e
1000dca6:	29c0      	cmp	r1, #192	; 0xc0
1000dca8:	d003      	beq.n	1000dcb2 <gapm_cmp_evt+0x126>
1000dcaa:	065b      	lsls	r3, r3, #25
1000dcac:	0fdb      	lsrs	r3, r3, #31
1000dcae:	3202      	adds	r2, #2
1000dcb0:	1ad2      	subs	r2, r2, r3
1000dcb2:	7022      	strb	r2, [r4, #0]
1000dcb4:	2005      	movs	r0, #5
1000dcb6:	e000      	b.n	1000dcba <gapm_cmp_evt+0x12e>
1000dcb8:	2000      	movs	r0, #0
1000dcba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dcbc:	1000f7e9 	.word	0x1000f7e9
1000dcc0:	1000cedd 	.word	0x1000cedd
1000dcc4:	10012c8a 	.word	0x10012c8a
1000dcc8:	1000cea1 	.word	0x1000cea1
1000dccc:	10012bfa 	.word	0x10012bfa
1000dcd0:	1000f7d7 	.word	0x1000f7d7

1000dcd4 <get_gap_local_addr_type>:
1000dcd4:	4b04      	ldr	r3, [pc, #16]	; (1000dce8 <get_gap_local_addr_type+0x14>)
1000dcd6:	2001      	movs	r0, #1
1000dcd8:	791b      	ldrb	r3, [r3, #4]
1000dcda:	2b02      	cmp	r3, #2
1000dcdc:	d003      	beq.n	1000dce6 <get_gap_local_addr_type+0x12>
1000dcde:	3b03      	subs	r3, #3
1000dce0:	4258      	negs	r0, r3
1000dce2:	4158      	adcs	r0, r3
1000dce4:	0040      	lsls	r0, r0, #1
1000dce6:	4770      	bx	lr
1000dce8:	10012c8a 	.word	0x10012c8a

1000dcec <gapm_start_scan_cmd_handler>:
1000dcec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dcee:	b085      	sub	sp, #20
1000dcf0:	ab0a      	add	r3, sp, #40	; 0x28
1000dcf2:	881e      	ldrh	r6, [r3, #0]
1000dcf4:	ab0b      	add	r3, sp, #44	; 0x2c
1000dcf6:	881d      	ldrh	r5, [r3, #0]
1000dcf8:	ab0c      	add	r3, sp, #48	; 0x30
1000dcfa:	781b      	ldrb	r3, [r3, #0]
1000dcfc:	4f1e      	ldr	r7, [pc, #120]	; (1000dd78 <gapm_start_scan_cmd_handler+0x8c>)
1000dcfe:	9301      	str	r3, [sp, #4]
1000dd00:	ab0d      	add	r3, sp, #52	; 0x34
1000dd02:	781b      	ldrb	r3, [r3, #0]
1000dd04:	9100      	str	r1, [sp, #0]
1000dd06:	9302      	str	r3, [sp, #8]
1000dd08:	ab0e      	add	r3, sp, #56	; 0x38
1000dd0a:	781b      	ldrb	r3, [r3, #0]
1000dd0c:	8839      	ldrh	r1, [r7, #0]
1000dd0e:	9303      	str	r3, [sp, #12]
1000dd10:	ab0f      	add	r3, sp, #60	; 0x3c
1000dd12:	881c      	ldrh	r4, [r3, #0]
1000dd14:	4b19      	ldr	r3, [pc, #100]	; (1000dd7c <gapm_start_scan_cmd_handler+0x90>)
1000dd16:	220f      	movs	r2, #15
1000dd18:	7119      	strb	r1, [r3, #4]
1000dd1a:	4669      	mov	r1, sp
1000dd1c:	7809      	ldrb	r1, [r1, #0]
1000dd1e:	701a      	strb	r2, [r3, #0]
1000dd20:	7259      	strb	r1, [r3, #9]
1000dd22:	4669      	mov	r1, sp
1000dd24:	7909      	ldrb	r1, [r1, #4]
1000dd26:	3a02      	subs	r2, #2
1000dd28:	7419      	strb	r1, [r3, #16]
1000dd2a:	4669      	mov	r1, sp
1000dd2c:	705a      	strb	r2, [r3, #1]
1000dd2e:	709a      	strb	r2, [r3, #2]
1000dd30:	2200      	movs	r2, #0
1000dd32:	883f      	ldrh	r7, [r7, #0]
1000dd34:	7a09      	ldrb	r1, [r1, #8]
1000dd36:	731e      	strb	r6, [r3, #12]
1000dd38:	739d      	strb	r5, [r3, #14]
1000dd3a:	0a3f      	lsrs	r7, r7, #8
1000dd3c:	0a36      	lsrs	r6, r6, #8
1000dd3e:	0a2d      	lsrs	r5, r5, #8
1000dd40:	70da      	strb	r2, [r3, #3]
1000dd42:	729a      	strb	r2, [r3, #10]
1000dd44:	72da      	strb	r2, [r3, #11]
1000dd46:	715f      	strb	r7, [r3, #5]
1000dd48:	7218      	strb	r0, [r3, #8]
1000dd4a:	735e      	strb	r6, [r3, #13]
1000dd4c:	73dd      	strb	r5, [r3, #15]
1000dd4e:	7459      	strb	r1, [r3, #17]
1000dd50:	4669      	mov	r1, sp
1000dd52:	7b09      	ldrb	r1, [r1, #12]
1000dd54:	759c      	strb	r4, [r3, #22]
1000dd56:	7499      	strb	r1, [r3, #18]
1000dd58:	21a5      	movs	r1, #165	; 0xa5
1000dd5a:	0a24      	lsrs	r4, r4, #8
1000dd5c:	7519      	strb	r1, [r3, #20]
1000dd5e:	7559      	strb	r1, [r3, #21]
1000dd60:	3995      	subs	r1, #149	; 0x95
1000dd62:	74da      	strb	r2, [r3, #19]
1000dd64:	75dc      	strb	r4, [r3, #23]
1000dd66:	7199      	strb	r1, [r3, #6]
1000dd68:	71da      	strb	r2, [r3, #7]
1000dd6a:	1c18      	adds	r0, r3, #0
1000dd6c:	3108      	adds	r1, #8
1000dd6e:	4b04      	ldr	r3, [pc, #16]	; (1000dd80 <gapm_start_scan_cmd_handler+0x94>)
1000dd70:	4798      	blx	r3
1000dd72:	b005      	add	sp, #20
1000dd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd76:	46c0      	nop			; (mov r8, r8)
1000dd78:	10012bf8 	.word	0x10012bf8
1000dd7c:	10012f68 	.word	0x10012f68
1000dd80:	1000ccd9 	.word	0x1000ccd9

1000dd84 <gapm_adv_report_evt_handler>:
1000dd84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dd86:	7843      	ldrb	r3, [r0, #1]
1000dd88:	1c05      	adds	r5, r0, #0
1000dd8a:	9301      	str	r3, [sp, #4]
1000dd8c:	466b      	mov	r3, sp
1000dd8e:	1c0c      	adds	r4, r1, #0
1000dd90:	791b      	ldrb	r3, [r3, #4]
1000dd92:	7806      	ldrb	r6, [r0, #0]
1000dd94:	2206      	movs	r2, #6
1000dd96:	704b      	strb	r3, [r1, #1]
1000dd98:	1c88      	adds	r0, r1, #2
1000dd9a:	4f1b      	ldr	r7, [pc, #108]	; (1000de08 <gapm_adv_report_evt_handler+0x84>)
1000dd9c:	1ca9      	adds	r1, r5, #2
1000dd9e:	47b8      	blx	r7
1000dda0:	1c20      	adds	r0, r4, #0
1000dda2:	1c29      	adds	r1, r5, #0
1000dda4:	7a2a      	ldrb	r2, [r5, #8]
1000dda6:	3008      	adds	r0, #8
1000dda8:	77c2      	strb	r2, [r0, #31]
1000ddaa:	3109      	adds	r1, #9
1000ddac:	3528      	adds	r5, #40	; 0x28
1000ddae:	47b8      	blx	r7
1000ddb0:	782b      	ldrb	r3, [r5, #0]
1000ddb2:	b25a      	sxtb	r2, r3
1000ddb4:	2a00      	cmp	r2, #0
1000ddb6:	da01      	bge.n	1000ddbc <gapm_adv_report_evt_handler+0x38>
1000ddb8:	3301      	adds	r3, #1
1000ddba:	b2db      	uxtb	r3, r3
1000ddbc:	1c22      	adds	r2, r4, #0
1000ddbe:	3228      	adds	r2, #40	; 0x28
1000ddc0:	7013      	strb	r3, [r2, #0]
1000ddc2:	2200      	movs	r2, #0
1000ddc4:	9b01      	ldr	r3, [sp, #4]
1000ddc6:	4293      	cmp	r3, r2
1000ddc8:	d00a      	beq.n	1000dde0 <gapm_adv_report_evt_handler+0x5c>
1000ddca:	79e3      	ldrb	r3, [r4, #7]
1000ddcc:	323f      	adds	r2, #63	; 0x3f
1000ddce:	1c19      	adds	r1, r3, #0
1000ddd0:	4391      	bics	r1, r2
1000ddd2:	3a3e      	subs	r2, #62	; 0x3e
1000ddd4:	29c0      	cmp	r1, #192	; 0xc0
1000ddd6:	d003      	beq.n	1000dde0 <gapm_adv_report_evt_handler+0x5c>
1000ddd8:	065b      	lsls	r3, r3, #25
1000ddda:	0fdb      	lsrs	r3, r3, #31
1000dddc:	3202      	adds	r2, #2
1000ddde:	1ad2      	subs	r2, r2, r3
1000dde0:	7062      	strb	r2, [r4, #1]
1000dde2:	2e04      	cmp	r6, #4
1000dde4:	d80f      	bhi.n	1000de06 <gapm_adv_report_evt_handler+0x82>
1000dde6:	1c30      	adds	r0, r6, #0
1000dde8:	f000 fc14 	bl	1000e614 <__gnu_thumb1_case_uqi>
1000ddec:	09070503 	.word	0x09070503
1000ddf0:	0b          	.byte	0x0b
1000ddf1:	00          	.byte	0x00
1000ddf2:	2300      	movs	r3, #0
1000ddf4:	e006      	b.n	1000de04 <gapm_adv_report_evt_handler+0x80>
1000ddf6:	2301      	movs	r3, #1
1000ddf8:	e004      	b.n	1000de04 <gapm_adv_report_evt_handler+0x80>
1000ddfa:	2302      	movs	r3, #2
1000ddfc:	e002      	b.n	1000de04 <gapm_adv_report_evt_handler+0x80>
1000ddfe:	2303      	movs	r3, #3
1000de00:	e000      	b.n	1000de04 <gapm_adv_report_evt_handler+0x80>
1000de02:	2305      	movs	r3, #5
1000de04:	7023      	strb	r3, [r4, #0]
1000de06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000de08:	1000f7d7 	.word	0x1000f7d7

1000de0c <gapm_start_connection_cmd_handler>:
1000de0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de0e:	b089      	sub	sp, #36	; 0x24
1000de10:	aa0f      	add	r2, sp, #60	; 0x3c
1000de12:	8812      	ldrh	r2, [r2, #0]
1000de14:	9107      	str	r1, [sp, #28]
1000de16:	4694      	mov	ip, r2
1000de18:	aa10      	add	r2, sp, #64	; 0x40
1000de1a:	8812      	ldrh	r2, [r2, #0]
1000de1c:	a908      	add	r1, sp, #32
1000de1e:	9202      	str	r2, [sp, #8]
1000de20:	aa11      	add	r2, sp, #68	; 0x44
1000de22:	8812      	ldrh	r2, [r2, #0]
1000de24:	4e3b      	ldr	r6, [pc, #236]	; (1000df14 <gapm_start_connection_cmd_handler+0x108>)
1000de26:	9203      	str	r2, [sp, #12]
1000de28:	aa12      	add	r2, sp, #72	; 0x48
1000de2a:	8812      	ldrh	r2, [r2, #0]
1000de2c:	4c3a      	ldr	r4, [pc, #232]	; (1000df18 <gapm_start_connection_cmd_handler+0x10c>)
1000de2e:	9204      	str	r2, [sp, #16]
1000de30:	aa13      	add	r2, sp, #76	; 0x4c
1000de32:	8812      	ldrh	r2, [r2, #0]
1000de34:	ab0e      	add	r3, sp, #56	; 0x38
1000de36:	9205      	str	r2, [sp, #20]
1000de38:	aa14      	add	r2, sp, #80	; 0x50
1000de3a:	8812      	ldrh	r2, [r2, #0]
1000de3c:	881b      	ldrh	r3, [r3, #0]
1000de3e:	9206      	str	r2, [sp, #24]
1000de40:	aa15      	add	r2, sp, #84	; 0x54
1000de42:	8817      	ldrh	r7, [r2, #0]
1000de44:	2219      	movs	r2, #25
1000de46:	1852      	adds	r2, r2, r1
1000de48:	7fd2      	ldrb	r2, [r2, #31]
1000de4a:	8831      	ldrh	r1, [r6, #0]
1000de4c:	9201      	str	r2, [sp, #4]
1000de4e:	2211      	movs	r2, #17
1000de50:	7121      	strb	r1, [r4, #4]
1000de52:	4669      	mov	r1, sp
1000de54:	7022      	strb	r2, [r4, #0]
1000de56:	3a04      	subs	r2, #4
1000de58:	7062      	strb	r2, [r4, #1]
1000de5a:	70a2      	strb	r2, [r4, #2]
1000de5c:	2200      	movs	r2, #0
1000de5e:	8836      	ldrh	r6, [r6, #0]
1000de60:	7f09      	ldrb	r1, [r1, #28]
1000de62:	0a36      	lsrs	r6, r6, #8
1000de64:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1000de66:	7166      	strb	r6, [r4, #5]
1000de68:	70e2      	strb	r2, [r4, #3]
1000de6a:	7220      	strb	r0, [r4, #8]
1000de6c:	7261      	strb	r1, [r4, #9]
1000de6e:	72a2      	strb	r2, [r4, #10]
1000de70:	72e2      	strb	r2, [r4, #11]
1000de72:	7323      	strb	r3, [r4, #12]
1000de74:	0a1b      	lsrs	r3, r3, #8
1000de76:	7363      	strb	r3, [r4, #13]
1000de78:	4663      	mov	r3, ip
1000de7a:	73a3      	strb	r3, [r4, #14]
1000de7c:	4663      	mov	r3, ip
1000de7e:	0a1b      	lsrs	r3, r3, #8
1000de80:	73e3      	strb	r3, [r4, #15]
1000de82:	466b      	mov	r3, sp
1000de84:	7a1b      	ldrb	r3, [r3, #8]
1000de86:	2607      	movs	r6, #7
1000de88:	7423      	strb	r3, [r4, #16]
1000de8a:	9b02      	ldr	r3, [sp, #8]
1000de8c:	76a7      	strb	r7, [r4, #26]
1000de8e:	0a1b      	lsrs	r3, r3, #8
1000de90:	7463      	strb	r3, [r4, #17]
1000de92:	466b      	mov	r3, sp
1000de94:	7b1b      	ldrb	r3, [r3, #12]
1000de96:	74a3      	strb	r3, [r4, #18]
1000de98:	9b03      	ldr	r3, [sp, #12]
1000de9a:	0a1b      	lsrs	r3, r3, #8
1000de9c:	74e3      	strb	r3, [r4, #19]
1000de9e:	466b      	mov	r3, sp
1000dea0:	7c1b      	ldrb	r3, [r3, #16]
1000dea2:	7523      	strb	r3, [r4, #20]
1000dea4:	9b04      	ldr	r3, [sp, #16]
1000dea6:	0a1b      	lsrs	r3, r3, #8
1000dea8:	7563      	strb	r3, [r4, #21]
1000deaa:	466b      	mov	r3, sp
1000deac:	7d1b      	ldrb	r3, [r3, #20]
1000deae:	75a3      	strb	r3, [r4, #22]
1000deb0:	9b05      	ldr	r3, [sp, #20]
1000deb2:	0a1b      	lsrs	r3, r3, #8
1000deb4:	75e3      	strb	r3, [r4, #23]
1000deb6:	466b      	mov	r3, sp
1000deb8:	7e1b      	ldrb	r3, [r3, #24]
1000deba:	7623      	strb	r3, [r4, #24]
1000debc:	9b06      	ldr	r3, [sp, #24]
1000debe:	0a1b      	lsrs	r3, r3, #8
1000dec0:	7663      	strb	r3, [r4, #25]
1000dec2:	0a3b      	lsrs	r3, r7, #8
1000dec4:	76e3      	strb	r3, [r4, #27]
1000dec6:	466b      	mov	r3, sp
1000dec8:	791b      	ldrb	r3, [r3, #4]
1000deca:	4f14      	ldr	r7, [pc, #80]	; (1000df1c <gapm_start_connection_cmd_handler+0x110>)
1000decc:	7723      	strb	r3, [r4, #28]
1000dece:	9b01      	ldr	r3, [sp, #4]
1000ded0:	435e      	muls	r6, r3
1000ded2:	19ae      	adds	r6, r5, r6
1000ded4:	42b5      	cmp	r5, r6
1000ded6:	d00f      	beq.n	1000def8 <gapm_start_connection_cmd_handler+0xec>
1000ded8:	1c69      	adds	r1, r5, #1
1000deda:	1c38      	adds	r0, r7, #0
1000dedc:	2206      	movs	r2, #6
1000dede:	4b10      	ldr	r3, [pc, #64]	; (1000df20 <gapm_start_connection_cmd_handler+0x114>)
1000dee0:	4798      	blx	r3
1000dee2:	2200      	movs	r2, #0
1000dee4:	2102      	movs	r1, #2
1000dee6:	782b      	ldrb	r3, [r5, #0]
1000dee8:	3507      	adds	r5, #7
1000deea:	3b01      	subs	r3, #1
1000deec:	b2db      	uxtb	r3, r3
1000deee:	4299      	cmp	r1, r3
1000def0:	4152      	adcs	r2, r2
1000def2:	71ba      	strb	r2, [r7, #6]
1000def4:	3707      	adds	r7, #7
1000def6:	e7ed      	b.n	1000ded4 <gapm_start_connection_cmd_handler+0xc8>
1000def8:	2107      	movs	r1, #7
1000defa:	9b01      	ldr	r3, [sp, #4]
1000defc:	1c20      	adds	r0, r4, #0
1000defe:	4359      	muls	r1, r3
1000df00:	311d      	adds	r1, #29
1000df02:	1c0b      	adds	r3, r1, #0
1000df04:	3b08      	subs	r3, #8
1000df06:	71a3      	strb	r3, [r4, #6]
1000df08:	121b      	asrs	r3, r3, #8
1000df0a:	71e3      	strb	r3, [r4, #7]
1000df0c:	4b05      	ldr	r3, [pc, #20]	; (1000df24 <gapm_start_connection_cmd_handler+0x118>)
1000df0e:	4798      	blx	r3
1000df10:	b009      	add	sp, #36	; 0x24
1000df12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df14:	10012bf8 	.word	0x10012bf8
1000df18:	10012f68 	.word	0x10012f68
1000df1c:	10012f85 	.word	0x10012f85
1000df20:	1000f7d7 	.word	0x1000f7d7
1000df24:	1000ccd9 	.word	0x1000ccd9

1000df28 <gapm_resolv_addr_cmd_handler>:
1000df28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000df2a:	2314      	movs	r3, #20
1000df2c:	4c12      	ldr	r4, [pc, #72]	; (1000df78 <gapm_resolv_addr_cmd_handler+0x50>)
1000df2e:	1c17      	adds	r7, r2, #0
1000df30:	7023      	strb	r3, [r4, #0]
1000df32:	3b07      	subs	r3, #7
1000df34:	7063      	strb	r3, [r4, #1]
1000df36:	70a3      	strb	r3, [r4, #2]
1000df38:	2300      	movs	r3, #0
1000df3a:	70e3      	strb	r3, [r4, #3]
1000df3c:	4b0f      	ldr	r3, [pc, #60]	; (1000df7c <gapm_resolv_addr_cmd_handler+0x54>)
1000df3e:	1c05      	adds	r5, r0, #0
1000df40:	881a      	ldrh	r2, [r3, #0]
1000df42:	881b      	ldrh	r3, [r3, #0]
1000df44:	4e0e      	ldr	r6, [pc, #56]	; (1000df80 <gapm_resolv_addr_cmd_handler+0x58>)
1000df46:	0a1b      	lsrs	r3, r3, #8
1000df48:	7163      	strb	r3, [r4, #5]
1000df4a:	2317      	movs	r3, #23
1000df4c:	012d      	lsls	r5, r5, #4
1000df4e:	7122      	strb	r2, [r4, #4]
1000df50:	7260      	strb	r0, [r4, #9]
1000df52:	2206      	movs	r2, #6
1000df54:	480b      	ldr	r0, [pc, #44]	; (1000df84 <gapm_resolv_addr_cmd_handler+0x5c>)
1000df56:	7223      	strb	r3, [r4, #8]
1000df58:	47b0      	blx	r6
1000df5a:	1c39      	adds	r1, r7, #0
1000df5c:	1c2a      	adds	r2, r5, #0
1000df5e:	480a      	ldr	r0, [pc, #40]	; (1000df88 <gapm_resolv_addr_cmd_handler+0x60>)
1000df60:	47b0      	blx	r6
1000df62:	1c29      	adds	r1, r5, #0
1000df64:	3110      	adds	r1, #16
1000df66:	1c0b      	adds	r3, r1, #0
1000df68:	3b08      	subs	r3, #8
1000df6a:	71a3      	strb	r3, [r4, #6]
1000df6c:	121b      	asrs	r3, r3, #8
1000df6e:	71e3      	strb	r3, [r4, #7]
1000df70:	1c20      	adds	r0, r4, #0
1000df72:	4b06      	ldr	r3, [pc, #24]	; (1000df8c <gapm_resolv_addr_cmd_handler+0x64>)
1000df74:	4798      	blx	r3
1000df76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000df78:	10012f68 	.word	0x10012f68
1000df7c:	10012bf8 	.word	0x10012bf8
1000df80:	1000f7d7 	.word	0x1000f7d7
1000df84:	10012f72 	.word	0x10012f72
1000df88:	10012f78 	.word	0x10012f78
1000df8c:	1000ccd9 	.word	0x1000ccd9

1000df90 <gapm_addr_solved_ind_handler>:
1000df90:	b570      	push	{r4, r5, r6, lr}
1000df92:	1c04      	adds	r4, r0, #0
1000df94:	1c08      	adds	r0, r1, #0
1000df96:	1c0d      	adds	r5, r1, #0
1000df98:	4e05      	ldr	r6, [pc, #20]	; (1000dfb0 <gapm_addr_solved_ind_handler+0x20>)
1000df9a:	1c21      	adds	r1, r4, #0
1000df9c:	2206      	movs	r2, #6
1000df9e:	3011      	adds	r0, #17
1000dfa0:	47b0      	blx	r6
1000dfa2:	1c68      	adds	r0, r5, #1
1000dfa4:	1da1      	adds	r1, r4, #6
1000dfa6:	2210      	movs	r2, #16
1000dfa8:	47b0      	blx	r6
1000dfaa:	2300      	movs	r3, #0
1000dfac:	702b      	strb	r3, [r5, #0]
1000dfae:	bd70      	pop	{r4, r5, r6, pc}
1000dfb0:	1000f7d7 	.word	0x1000f7d7

1000dfb4 <gapm_profile_added_ind_handler>:
1000dfb4:	b510      	push	{r4, lr}
1000dfb6:	7843      	ldrb	r3, [r0, #1]
1000dfb8:	7902      	ldrb	r2, [r0, #4]
1000dfba:	7944      	ldrb	r4, [r0, #5]
1000dfbc:	7800      	ldrb	r0, [r0, #0]
1000dfbe:	021b      	lsls	r3, r3, #8
1000dfc0:	4303      	orrs	r3, r0
1000dfc2:	2b1b      	cmp	r3, #27
1000dfc4:	d104      	bne.n	1000dfd0 <gapm_profile_added_ind_handler+0x1c>
1000dfc6:	2300      	movs	r3, #0
1000dfc8:	700b      	strb	r3, [r1, #0]
1000dfca:	0223      	lsls	r3, r4, #8
1000dfcc:	4313      	orrs	r3, r2
1000dfce:	804b      	strh	r3, [r1, #2]
1000dfd0:	203b      	movs	r0, #59	; 0x3b
1000dfd2:	bd10      	pop	{r4, pc}

1000dfd4 <gattc_read_req_ind_parser>:
1000dfd4:	7843      	ldrb	r3, [r0, #1]
1000dfd6:	7802      	ldrb	r2, [r0, #0]
1000dfd8:	021b      	lsls	r3, r3, #8
1000dfda:	4313      	orrs	r3, r2
1000dfdc:	804b      	strh	r3, [r1, #2]
1000dfde:	4770      	bx	lr

1000dfe0 <gattc_write_req_ind_parser>:
1000dfe0:	b508      	push	{r3, lr}
1000dfe2:	1c13      	adds	r3, r2, #0
1000dfe4:	0a00      	lsrs	r0, r0, #8
1000dfe6:	8010      	strh	r0, [r2, #0]
1000dfe8:	784a      	ldrb	r2, [r1, #1]
1000dfea:	7808      	ldrb	r0, [r1, #0]
1000dfec:	0212      	lsls	r2, r2, #8
1000dfee:	4302      	orrs	r2, r0
1000dff0:	805a      	strh	r2, [r3, #2]
1000dff2:	78ca      	ldrb	r2, [r1, #3]
1000dff4:	7888      	ldrb	r0, [r1, #2]
1000dff6:	0212      	lsls	r2, r2, #8
1000dff8:	4302      	orrs	r2, r0
1000dffa:	809a      	strh	r2, [r3, #4]
1000dffc:	794a      	ldrb	r2, [r1, #5]
1000dffe:	7908      	ldrb	r0, [r1, #4]
1000e000:	0212      	lsls	r2, r2, #8
1000e002:	4302      	orrs	r2, r0
1000e004:	80da      	strh	r2, [r3, #6]
1000e006:	3308      	adds	r3, #8
1000e008:	1c18      	adds	r0, r3, #0
1000e00a:	3106      	adds	r1, #6
1000e00c:	4b01      	ldr	r3, [pc, #4]	; (1000e014 <gattc_write_req_ind_parser+0x34>)
1000e00e:	4798      	blx	r3
1000e010:	bd08      	pop	{r3, pc}
1000e012:	46c0      	nop			; (mov r8, r8)
1000e014:	1000f7d7 	.word	0x1000f7d7

1000e018 <gattc_att_info_req_parser>:
1000e018:	7843      	ldrb	r3, [r0, #1]
1000e01a:	7802      	ldrb	r2, [r0, #0]
1000e01c:	021b      	lsls	r3, r3, #8
1000e01e:	4313      	orrs	r3, r2
1000e020:	800b      	strh	r3, [r1, #0]
1000e022:	4770      	bx	lr

1000e024 <gattc_read_cfm>:
1000e024:	b538      	push	{r3, r4, r5, lr}
1000e026:	2514      	movs	r5, #20
1000e028:	1c1c      	adds	r4, r3, #0
1000e02a:	4b14      	ldr	r3, [pc, #80]	; (1000e07c <gattc_read_cfm+0x58>)
1000e02c:	70d9      	strb	r1, [r3, #3]
1000e02e:	4914      	ldr	r1, [pc, #80]	; (1000e080 <gattc_read_cfm+0x5c>)
1000e030:	701d      	strb	r5, [r3, #0]
1000e032:	3d08      	subs	r5, #8
1000e034:	705d      	strb	r5, [r3, #1]
1000e036:	709d      	strb	r5, [r3, #2]
1000e038:	880d      	ldrh	r5, [r1, #0]
1000e03a:	8809      	ldrh	r1, [r1, #0]
1000e03c:	7218      	strb	r0, [r3, #8]
1000e03e:	0a09      	lsrs	r1, r1, #8
1000e040:	7159      	strb	r1, [r3, #5]
1000e042:	0a00      	lsrs	r0, r0, #8
1000e044:	0a21      	lsrs	r1, r4, #8
1000e046:	711d      	strb	r5, [r3, #4]
1000e048:	7258      	strb	r0, [r3, #9]
1000e04a:	729c      	strb	r4, [r3, #10]
1000e04c:	72d9      	strb	r1, [r3, #11]
1000e04e:	731a      	strb	r2, [r3, #12]
1000e050:	1c1d      	adds	r5, r3, #0
1000e052:	2c00      	cmp	r4, #0
1000e054:	d007      	beq.n	1000e066 <gattc_read_cfm+0x42>
1000e056:	9904      	ldr	r1, [sp, #16]
1000e058:	1c22      	adds	r2, r4, #0
1000e05a:	480a      	ldr	r0, [pc, #40]	; (1000e084 <gattc_read_cfm+0x60>)
1000e05c:	4b0a      	ldr	r3, [pc, #40]	; (1000e088 <gattc_read_cfm+0x64>)
1000e05e:	340d      	adds	r4, #13
1000e060:	4798      	blx	r3
1000e062:	b2a1      	uxth	r1, r4
1000e064:	e001      	b.n	1000e06a <gattc_read_cfm+0x46>
1000e066:	210e      	movs	r1, #14
1000e068:	735c      	strb	r4, [r3, #13]
1000e06a:	1c0b      	adds	r3, r1, #0
1000e06c:	3b08      	subs	r3, #8
1000e06e:	71ab      	strb	r3, [r5, #6]
1000e070:	121b      	asrs	r3, r3, #8
1000e072:	71eb      	strb	r3, [r5, #7]
1000e074:	1c28      	adds	r0, r5, #0
1000e076:	4b05      	ldr	r3, [pc, #20]	; (1000e08c <gattc_read_cfm+0x68>)
1000e078:	4798      	blx	r3
1000e07a:	bd38      	pop	{r3, r4, r5, pc}
1000e07c:	10012f68 	.word	0x10012f68
1000e080:	10012bf8 	.word	0x10012bf8
1000e084:	10012f75 	.word	0x10012f75
1000e088:	1000f7d7 	.word	0x1000f7d7
1000e08c:	1000ccd9 	.word	0x1000ccd9

1000e090 <gattc_write_cfm>:
1000e090:	4b0d      	ldr	r3, [pc, #52]	; (1000e0c8 <gattc_write_cfm+0x38>)
1000e092:	b510      	push	{r4, lr}
1000e094:	729a      	strb	r2, [r3, #10]
1000e096:	2203      	movs	r2, #3
1000e098:	2416      	movs	r4, #22
1000e09a:	719a      	strb	r2, [r3, #6]
1000e09c:	2200      	movs	r2, #0
1000e09e:	70d9      	strb	r1, [r3, #3]
1000e0a0:	490a      	ldr	r1, [pc, #40]	; (1000e0cc <gattc_write_cfm+0x3c>)
1000e0a2:	701c      	strb	r4, [r3, #0]
1000e0a4:	3c0a      	subs	r4, #10
1000e0a6:	705c      	strb	r4, [r3, #1]
1000e0a8:	709c      	strb	r4, [r3, #2]
1000e0aa:	880c      	ldrh	r4, [r1, #0]
1000e0ac:	8809      	ldrh	r1, [r1, #0]
1000e0ae:	7218      	strb	r0, [r3, #8]
1000e0b0:	0a09      	lsrs	r1, r1, #8
1000e0b2:	0a00      	lsrs	r0, r0, #8
1000e0b4:	711c      	strb	r4, [r3, #4]
1000e0b6:	7159      	strb	r1, [r3, #5]
1000e0b8:	7258      	strb	r0, [r3, #9]
1000e0ba:	71da      	strb	r2, [r3, #7]
1000e0bc:	1c18      	adds	r0, r3, #0
1000e0be:	210b      	movs	r1, #11
1000e0c0:	4b03      	ldr	r3, [pc, #12]	; (1000e0d0 <gattc_write_cfm+0x40>)
1000e0c2:	4798      	blx	r3
1000e0c4:	bd10      	pop	{r4, pc}
1000e0c6:	46c0      	nop			; (mov r8, r8)
1000e0c8:	10012f68 	.word	0x10012f68
1000e0cc:	10012bf8 	.word	0x10012bf8
1000e0d0:	1000ccd9 	.word	0x1000ccd9

1000e0d4 <gattc_att_info_cfm>:
1000e0d4:	b538      	push	{r3, r4, r5, lr}
1000e0d6:	4c0e      	ldr	r4, [pc, #56]	; (1000e110 <gattc_att_info_cfm+0x3c>)
1000e0d8:	2518      	movs	r5, #24
1000e0da:	7323      	strb	r3, [r4, #12]
1000e0dc:	2305      	movs	r3, #5
1000e0de:	71a3      	strb	r3, [r4, #6]
1000e0e0:	2300      	movs	r3, #0
1000e0e2:	70e1      	strb	r1, [r4, #3]
1000e0e4:	490b      	ldr	r1, [pc, #44]	; (1000e114 <gattc_att_info_cfm+0x40>)
1000e0e6:	7025      	strb	r5, [r4, #0]
1000e0e8:	3d0c      	subs	r5, #12
1000e0ea:	7065      	strb	r5, [r4, #1]
1000e0ec:	70a5      	strb	r5, [r4, #2]
1000e0ee:	880d      	ldrh	r5, [r1, #0]
1000e0f0:	8809      	ldrh	r1, [r1, #0]
1000e0f2:	7220      	strb	r0, [r4, #8]
1000e0f4:	0a09      	lsrs	r1, r1, #8
1000e0f6:	0a00      	lsrs	r0, r0, #8
1000e0f8:	7161      	strb	r1, [r4, #5]
1000e0fa:	7260      	strb	r0, [r4, #9]
1000e0fc:	72a2      	strb	r2, [r4, #10]
1000e0fe:	71e3      	strb	r3, [r4, #7]
1000e100:	0a12      	lsrs	r2, r2, #8
1000e102:	1c20      	adds	r0, r4, #0
1000e104:	210d      	movs	r1, #13
1000e106:	4b04      	ldr	r3, [pc, #16]	; (1000e118 <gattc_att_info_cfm+0x44>)
1000e108:	7125      	strb	r5, [r4, #4]
1000e10a:	72e2      	strb	r2, [r4, #11]
1000e10c:	4798      	blx	r3
1000e10e:	bd38      	pop	{r3, r4, r5, pc}
1000e110:	10012f68 	.word	0x10012f68
1000e114:	10012bf8 	.word	0x10012bf8
1000e118:	1000ccd9 	.word	0x1000ccd9

1000e11c <gattc_disc_cmd_handler>:
1000e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e11e:	2603      	movs	r6, #3
1000e120:	ac06      	add	r4, sp, #24
1000e122:	1c0d      	adds	r5, r1, #0
1000e124:	cc02      	ldmia	r4!, {r1}
1000e126:	8827      	ldrh	r7, [r4, #0]
1000e128:	4c1a      	ldr	r4, [pc, #104]	; (1000e194 <gattc_disc_cmd_handler+0x78>)
1000e12a:	7026      	strb	r6, [r4, #0]
1000e12c:	3609      	adds	r6, #9
1000e12e:	7066      	strb	r6, [r4, #1]
1000e130:	70a6      	strb	r6, [r4, #2]
1000e132:	4e19      	ldr	r6, [pc, #100]	; (1000e198 <gattc_disc_cmd_handler+0x7c>)
1000e134:	70e7      	strb	r7, [r4, #3]
1000e136:	8837      	ldrh	r7, [r6, #0]
1000e138:	8836      	ldrh	r6, [r6, #0]
1000e13a:	7127      	strb	r7, [r4, #4]
1000e13c:	0a36      	lsrs	r6, r6, #8
1000e13e:	7166      	strb	r6, [r4, #5]
1000e140:	7220      	strb	r0, [r4, #8]
1000e142:	2900      	cmp	r1, #0
1000e144:	d102      	bne.n	1000e14c <gattc_disc_cmd_handler+0x30>
1000e146:	2002      	movs	r0, #2
1000e148:	7260      	strb	r0, [r4, #9]
1000e14a:	e000      	b.n	1000e14e <gattc_disc_cmd_handler+0x32>
1000e14c:	7265      	strb	r5, [r4, #9]
1000e14e:	4e13      	ldr	r6, [pc, #76]	; (1000e19c <gattc_disc_cmd_handler+0x80>)
1000e150:	7322      	strb	r2, [r4, #12]
1000e152:	8830      	ldrh	r0, [r6, #0]
1000e154:	0a12      	lsrs	r2, r2, #8
1000e156:	0a07      	lsrs	r7, r0, #8
1000e158:	72a0      	strb	r0, [r4, #10]
1000e15a:	73a3      	strb	r3, [r4, #14]
1000e15c:	3001      	adds	r0, #1
1000e15e:	0a1b      	lsrs	r3, r3, #8
1000e160:	72e7      	strb	r7, [r4, #11]
1000e162:	8030      	strh	r0, [r6, #0]
1000e164:	7362      	strb	r2, [r4, #13]
1000e166:	73e3      	strb	r3, [r4, #15]
1000e168:	2900      	cmp	r1, #0
1000e16a:	d103      	bne.n	1000e174 <gattc_disc_cmd_handler+0x58>
1000e16c:	7421      	strb	r1, [r4, #16]
1000e16e:	7461      	strb	r1, [r4, #17]
1000e170:	3112      	adds	r1, #18
1000e172:	e005      	b.n	1000e180 <gattc_disc_cmd_handler+0x64>
1000e174:	480a      	ldr	r0, [pc, #40]	; (1000e1a0 <gattc_disc_cmd_handler+0x84>)
1000e176:	1c2a      	adds	r2, r5, #0
1000e178:	4b0a      	ldr	r3, [pc, #40]	; (1000e1a4 <gattc_disc_cmd_handler+0x88>)
1000e17a:	4798      	blx	r3
1000e17c:	1c29      	adds	r1, r5, #0
1000e17e:	3110      	adds	r1, #16
1000e180:	1c0b      	adds	r3, r1, #0
1000e182:	3b08      	subs	r3, #8
1000e184:	71a3      	strb	r3, [r4, #6]
1000e186:	121b      	asrs	r3, r3, #8
1000e188:	71e3      	strb	r3, [r4, #7]
1000e18a:	1c20      	adds	r0, r4, #0
1000e18c:	4b06      	ldr	r3, [pc, #24]	; (1000e1a8 <gattc_disc_cmd_handler+0x8c>)
1000e18e:	4798      	blx	r3
1000e190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e192:	46c0      	nop			; (mov r8, r8)
1000e194:	10012f68 	.word	0x10012f68
1000e198:	10012bf8 	.word	0x10012bf8
1000e19c:	1001203a 	.word	0x1001203a
1000e1a0:	10012f78 	.word	0x10012f78
1000e1a4:	1000f7d7 	.word	0x1000f7d7
1000e1a8:	1000ccd9 	.word	0x1000ccd9

1000e1ac <gattc_event_cfm_handler>:
1000e1ac:	220e      	movs	r2, #14
1000e1ae:	b508      	push	{r3, lr}
1000e1b0:	4b0b      	ldr	r3, [pc, #44]	; (1000e1e0 <gattc_event_cfm_handler+0x34>)
1000e1b2:	701a      	strb	r2, [r3, #0]
1000e1b4:	3a02      	subs	r2, #2
1000e1b6:	705a      	strb	r2, [r3, #1]
1000e1b8:	709a      	strb	r2, [r3, #2]
1000e1ba:	4a0a      	ldr	r2, [pc, #40]	; (1000e1e4 <gattc_event_cfm_handler+0x38>)
1000e1bc:	70d8      	strb	r0, [r3, #3]
1000e1be:	8810      	ldrh	r0, [r2, #0]
1000e1c0:	8812      	ldrh	r2, [r2, #0]
1000e1c2:	7219      	strb	r1, [r3, #8]
1000e1c4:	0a12      	lsrs	r2, r2, #8
1000e1c6:	715a      	strb	r2, [r3, #5]
1000e1c8:	2202      	movs	r2, #2
1000e1ca:	719a      	strb	r2, [r3, #6]
1000e1cc:	2200      	movs	r2, #0
1000e1ce:	0a09      	lsrs	r1, r1, #8
1000e1d0:	7118      	strb	r0, [r3, #4]
1000e1d2:	7259      	strb	r1, [r3, #9]
1000e1d4:	71da      	strb	r2, [r3, #7]
1000e1d6:	1c18      	adds	r0, r3, #0
1000e1d8:	210a      	movs	r1, #10
1000e1da:	4b03      	ldr	r3, [pc, #12]	; (1000e1e8 <gattc_event_cfm_handler+0x3c>)
1000e1dc:	4798      	blx	r3
1000e1de:	bd08      	pop	{r3, pc}
1000e1e0:	10012f68 	.word	0x10012f68
1000e1e4:	10012bf8 	.word	0x10012bf8
1000e1e8:	1000ccd9 	.word	0x1000ccd9

1000e1ec <gattc_read_cmd_handler>:
1000e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e1ee:	2608      	movs	r6, #8
1000e1f0:	ac06      	add	r4, sp, #24
1000e1f2:	8825      	ldrh	r5, [r4, #0]
1000e1f4:	ac08      	add	r4, sp, #32
1000e1f6:	8827      	ldrh	r7, [r4, #0]
1000e1f8:	4c1d      	ldr	r4, [pc, #116]	; (1000e270 <gattc_read_cmd_handler+0x84>)
1000e1fa:	7026      	strb	r6, [r4, #0]
1000e1fc:	3604      	adds	r6, #4
1000e1fe:	7066      	strb	r6, [r4, #1]
1000e200:	70a6      	strb	r6, [r4, #2]
1000e202:	4e1c      	ldr	r6, [pc, #112]	; (1000e274 <gattc_read_cmd_handler+0x88>)
1000e204:	70e7      	strb	r7, [r4, #3]
1000e206:	8837      	ldrh	r7, [r6, #0]
1000e208:	8836      	ldrh	r6, [r6, #0]
1000e20a:	72a1      	strb	r1, [r4, #10]
1000e20c:	0a36      	lsrs	r6, r6, #8
1000e20e:	7166      	strb	r6, [r4, #5]
1000e210:	2600      	movs	r6, #0
1000e212:	0a09      	lsrs	r1, r1, #8
1000e214:	7127      	strb	r7, [r4, #4]
1000e216:	7220      	strb	r0, [r4, #8]
1000e218:	7266      	strb	r6, [r4, #9]
1000e21a:	72e1      	strb	r1, [r4, #11]
1000e21c:	2808      	cmp	r0, #8
1000e21e:	d31d      	bcc.n	1000e25c <gattc_read_cmd_handler+0x70>
1000e220:	2809      	cmp	r0, #9
1000e222:	d910      	bls.n	1000e246 <gattc_read_cmd_handler+0x5a>
1000e224:	280a      	cmp	r0, #10
1000e226:	d119      	bne.n	1000e25c <gattc_read_cmd_handler+0x70>
1000e228:	7322      	strb	r2, [r4, #12]
1000e22a:	73a3      	strb	r3, [r4, #14]
1000e22c:	0a12      	lsrs	r2, r2, #8
1000e22e:	0a1b      	lsrs	r3, r3, #8
1000e230:	7362      	strb	r2, [r4, #13]
1000e232:	73e3      	strb	r3, [r4, #15]
1000e234:	7425      	strb	r5, [r4, #16]
1000e236:	9907      	ldr	r1, [sp, #28]
1000e238:	1c2a      	adds	r2, r5, #0
1000e23a:	480f      	ldr	r0, [pc, #60]	; (1000e278 <gattc_read_cmd_handler+0x8c>)
1000e23c:	4b0f      	ldr	r3, [pc, #60]	; (1000e27c <gattc_read_cmd_handler+0x90>)
1000e23e:	3511      	adds	r5, #17
1000e240:	4798      	blx	r3
1000e242:	b2a9      	uxth	r1, r5
1000e244:	e00b      	b.n	1000e25e <gattc_read_cmd_handler+0x72>
1000e246:	7322      	strb	r2, [r4, #12]
1000e248:	73a3      	strb	r3, [r4, #14]
1000e24a:	0a12      	lsrs	r2, r2, #8
1000e24c:	0a1b      	lsrs	r3, r3, #8
1000e24e:	7425      	strb	r5, [r4, #16]
1000e250:	0a2d      	lsrs	r5, r5, #8
1000e252:	7362      	strb	r2, [r4, #13]
1000e254:	73e3      	strb	r3, [r4, #15]
1000e256:	7465      	strb	r5, [r4, #17]
1000e258:	2112      	movs	r1, #18
1000e25a:	e000      	b.n	1000e25e <gattc_read_cmd_handler+0x72>
1000e25c:	210c      	movs	r1, #12
1000e25e:	1c0b      	adds	r3, r1, #0
1000e260:	3b08      	subs	r3, #8
1000e262:	71a3      	strb	r3, [r4, #6]
1000e264:	121b      	asrs	r3, r3, #8
1000e266:	71e3      	strb	r3, [r4, #7]
1000e268:	1c20      	adds	r0, r4, #0
1000e26a:	4b05      	ldr	r3, [pc, #20]	; (1000e280 <gattc_read_cmd_handler+0x94>)
1000e26c:	4798      	blx	r3
1000e26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e270:	10012f68 	.word	0x10012f68
1000e274:	10012bf8 	.word	0x10012bf8
1000e278:	10012f79 	.word	0x10012f79
1000e27c:	1000f7d7 	.word	0x1000f7d7
1000e280:	1000ccd9 	.word	0x1000ccd9

1000e284 <gattc_disc_svc_ind_parser>:
1000e284:	b570      	push	{r4, r5, r6, lr}
1000e286:	1c15      	adds	r5, r2, #0
1000e288:	0a00      	lsrs	r0, r0, #8
1000e28a:	8010      	strh	r0, [r2, #0]
1000e28c:	784b      	ldrb	r3, [r1, #1]
1000e28e:	780a      	ldrb	r2, [r1, #0]
1000e290:	021b      	lsls	r3, r3, #8
1000e292:	4313      	orrs	r3, r2
1000e294:	806b      	strh	r3, [r5, #2]
1000e296:	78cb      	ldrb	r3, [r1, #3]
1000e298:	788a      	ldrb	r2, [r1, #2]
1000e29a:	021b      	lsls	r3, r3, #8
1000e29c:	4313      	orrs	r3, r2
1000e29e:	80ab      	strh	r3, [r5, #4]
1000e2a0:	790e      	ldrb	r6, [r1, #4]
1000e2a2:	4b05      	ldr	r3, [pc, #20]	; (1000e2b8 <gattc_disc_svc_ind_parser+0x34>)
1000e2a4:	1c30      	adds	r0, r6, #0
1000e2a6:	1c0c      	adds	r4, r1, #0
1000e2a8:	4798      	blx	r3
1000e2aa:	1c32      	adds	r2, r6, #0
1000e2ac:	71a8      	strb	r0, [r5, #6]
1000e2ae:	1d61      	adds	r1, r4, #5
1000e2b0:	1de8      	adds	r0, r5, #7
1000e2b2:	4b02      	ldr	r3, [pc, #8]	; (1000e2bc <gattc_disc_svc_ind_parser+0x38>)
1000e2b4:	4798      	blx	r3
1000e2b6:	bd70      	pop	{r4, r5, r6, pc}
1000e2b8:	1000c625 	.word	0x1000c625
1000e2bc:	1000f7d7 	.word	0x1000f7d7

1000e2c0 <gattc_disc_svc_incl_ind_parser>:
1000e2c0:	b570      	push	{r4, r5, r6, lr}
1000e2c2:	1c15      	adds	r5, r2, #0
1000e2c4:	0a00      	lsrs	r0, r0, #8
1000e2c6:	8010      	strh	r0, [r2, #0]
1000e2c8:	784b      	ldrb	r3, [r1, #1]
1000e2ca:	780a      	ldrb	r2, [r1, #0]
1000e2cc:	021b      	lsls	r3, r3, #8
1000e2ce:	4313      	orrs	r3, r2
1000e2d0:	806b      	strh	r3, [r5, #2]
1000e2d2:	78cb      	ldrb	r3, [r1, #3]
1000e2d4:	788a      	ldrb	r2, [r1, #2]
1000e2d6:	021b      	lsls	r3, r3, #8
1000e2d8:	4313      	orrs	r3, r2
1000e2da:	80ab      	strh	r3, [r5, #4]
1000e2dc:	794b      	ldrb	r3, [r1, #5]
1000e2de:	790a      	ldrb	r2, [r1, #4]
1000e2e0:	021b      	lsls	r3, r3, #8
1000e2e2:	4313      	orrs	r3, r2
1000e2e4:	80eb      	strh	r3, [r5, #6]
1000e2e6:	798e      	ldrb	r6, [r1, #6]
1000e2e8:	4b05      	ldr	r3, [pc, #20]	; (1000e300 <gattc_disc_svc_incl_ind_parser+0x40>)
1000e2ea:	1c30      	adds	r0, r6, #0
1000e2ec:	1c0c      	adds	r4, r1, #0
1000e2ee:	4798      	blx	r3
1000e2f0:	7228      	strb	r0, [r5, #8]
1000e2f2:	1c28      	adds	r0, r5, #0
1000e2f4:	1c32      	adds	r2, r6, #0
1000e2f6:	1de1      	adds	r1, r4, #7
1000e2f8:	4b02      	ldr	r3, [pc, #8]	; (1000e304 <gattc_disc_svc_incl_ind_parser+0x44>)
1000e2fa:	3009      	adds	r0, #9
1000e2fc:	4798      	blx	r3
1000e2fe:	bd70      	pop	{r4, r5, r6, pc}
1000e300:	1000c625 	.word	0x1000c625
1000e304:	1000f7d7 	.word	0x1000f7d7

1000e308 <gattc_disc_char_ind_parser>:
1000e308:	b570      	push	{r4, r5, r6, lr}
1000e30a:	1c15      	adds	r5, r2, #0
1000e30c:	0a00      	lsrs	r0, r0, #8
1000e30e:	8010      	strh	r0, [r2, #0]
1000e310:	784b      	ldrb	r3, [r1, #1]
1000e312:	780a      	ldrb	r2, [r1, #0]
1000e314:	021b      	lsls	r3, r3, #8
1000e316:	4313      	orrs	r3, r2
1000e318:	806b      	strh	r3, [r5, #2]
1000e31a:	78cb      	ldrb	r3, [r1, #3]
1000e31c:	788a      	ldrb	r2, [r1, #2]
1000e31e:	021b      	lsls	r3, r3, #8
1000e320:	4313      	orrs	r3, r2
1000e322:	80ab      	strh	r3, [r5, #4]
1000e324:	790b      	ldrb	r3, [r1, #4]
1000e326:	1c0c      	adds	r4, r1, #0
1000e328:	71ab      	strb	r3, [r5, #6]
1000e32a:	794e      	ldrb	r6, [r1, #5]
1000e32c:	4b05      	ldr	r3, [pc, #20]	; (1000e344 <gattc_disc_char_ind_parser+0x3c>)
1000e32e:	1c30      	adds	r0, r6, #0
1000e330:	4798      	blx	r3
1000e332:	71e8      	strb	r0, [r5, #7]
1000e334:	1c28      	adds	r0, r5, #0
1000e336:	1c32      	adds	r2, r6, #0
1000e338:	1da1      	adds	r1, r4, #6
1000e33a:	4b03      	ldr	r3, [pc, #12]	; (1000e348 <gattc_disc_char_ind_parser+0x40>)
1000e33c:	3008      	adds	r0, #8
1000e33e:	4798      	blx	r3
1000e340:	bd70      	pop	{r4, r5, r6, pc}
1000e342:	46c0      	nop			; (mov r8, r8)
1000e344:	1000c625 	.word	0x1000c625
1000e348:	1000f7d7 	.word	0x1000f7d7

1000e34c <gattc_disc_char_desc_ind_parser>:
1000e34c:	b570      	push	{r4, r5, r6, lr}
1000e34e:	1c15      	adds	r5, r2, #0
1000e350:	0a00      	lsrs	r0, r0, #8
1000e352:	8010      	strh	r0, [r2, #0]
1000e354:	784b      	ldrb	r3, [r1, #1]
1000e356:	780a      	ldrb	r2, [r1, #0]
1000e358:	021b      	lsls	r3, r3, #8
1000e35a:	4313      	orrs	r3, r2
1000e35c:	806b      	strh	r3, [r5, #2]
1000e35e:	788e      	ldrb	r6, [r1, #2]
1000e360:	4b05      	ldr	r3, [pc, #20]	; (1000e378 <gattc_disc_char_desc_ind_parser+0x2c>)
1000e362:	1c30      	adds	r0, r6, #0
1000e364:	1c0c      	adds	r4, r1, #0
1000e366:	4798      	blx	r3
1000e368:	1c32      	adds	r2, r6, #0
1000e36a:	7128      	strb	r0, [r5, #4]
1000e36c:	1ce1      	adds	r1, r4, #3
1000e36e:	1d68      	adds	r0, r5, #5
1000e370:	4b02      	ldr	r3, [pc, #8]	; (1000e37c <gattc_disc_char_desc_ind_parser+0x30>)
1000e372:	4798      	blx	r3
1000e374:	bd70      	pop	{r4, r5, r6, pc}
1000e376:	46c0      	nop			; (mov r8, r8)
1000e378:	1000c625 	.word	0x1000c625
1000e37c:	1000f7d7 	.word	0x1000f7d7

1000e380 <gattc_event_ind_and_notification_parser>:
1000e380:	b510      	push	{r4, lr}
1000e382:	780c      	ldrb	r4, [r1, #0]
1000e384:	1c13      	adds	r3, r2, #0
1000e386:	2c12      	cmp	r4, #18
1000e388:	d10e      	bne.n	1000e3a8 <gattc_event_ind_and_notification_parser+0x28>
1000e38a:	0a00      	lsrs	r0, r0, #8
1000e38c:	8010      	strh	r0, [r2, #0]
1000e38e:	788a      	ldrb	r2, [r1, #2]
1000e390:	709a      	strb	r2, [r3, #2]
1000e392:	7948      	ldrb	r0, [r1, #5]
1000e394:	790c      	ldrb	r4, [r1, #4]
1000e396:	0200      	lsls	r0, r0, #8
1000e398:	4320      	orrs	r0, r4
1000e39a:	8098      	strh	r0, [r3, #4]
1000e39c:	3106      	adds	r1, #6
1000e39e:	1d98      	adds	r0, r3, #6
1000e3a0:	4b0b      	ldr	r3, [pc, #44]	; (1000e3d0 <gattc_event_ind_and_notification_parser+0x50>)
1000e3a2:	4798      	blx	r3
1000e3a4:	221b      	movs	r2, #27
1000e3a6:	e010      	b.n	1000e3ca <gattc_event_ind_and_notification_parser+0x4a>
1000e3a8:	2200      	movs	r2, #0
1000e3aa:	2c13      	cmp	r4, #19
1000e3ac:	d10d      	bne.n	1000e3ca <gattc_event_ind_and_notification_parser+0x4a>
1000e3ae:	0a00      	lsrs	r0, r0, #8
1000e3b0:	8018      	strh	r0, [r3, #0]
1000e3b2:	788a      	ldrb	r2, [r1, #2]
1000e3b4:	709a      	strb	r2, [r3, #2]
1000e3b6:	7908      	ldrb	r0, [r1, #4]
1000e3b8:	78cc      	ldrb	r4, [r1, #3]
1000e3ba:	0200      	lsls	r0, r0, #8
1000e3bc:	4320      	orrs	r0, r4
1000e3be:	8098      	strh	r0, [r3, #4]
1000e3c0:	3106      	adds	r1, #6
1000e3c2:	1d98      	adds	r0, r3, #6
1000e3c4:	4b02      	ldr	r3, [pc, #8]	; (1000e3d0 <gattc_event_ind_and_notification_parser+0x50>)
1000e3c6:	4798      	blx	r3
1000e3c8:	221c      	movs	r2, #28
1000e3ca:	1c10      	adds	r0, r2, #0
1000e3cc:	bd10      	pop	{r4, pc}
1000e3ce:	46c0      	nop			; (mov r8, r8)
1000e3d0:	1000f7d7 	.word	0x1000f7d7

1000e3d4 <gattc_complete_evt_handler>:
1000e3d4:	b500      	push	{lr}
1000e3d6:	0a00      	lsrs	r0, r0, #8
1000e3d8:	8010      	strh	r0, [r2, #0]
1000e3da:	7808      	ldrb	r0, [r1, #0]
1000e3dc:	7090      	strb	r0, [r2, #2]
1000e3de:	784b      	ldrb	r3, [r1, #1]
1000e3e0:	3801      	subs	r0, #1
1000e3e2:	70d3      	strb	r3, [r2, #3]
1000e3e4:	2813      	cmp	r0, #19
1000e3e6:	d82c      	bhi.n	1000e442 <gattc_complete_evt_handler+0x6e>
1000e3e8:	f000 f914 	bl	1000e614 <__gnu_thumb1_case_uqi>
1000e3ec:	0a0a0a0c 	.word	0x0a0a0a0c
1000e3f0:	210a0a0a 	.word	0x210a0a0a
1000e3f4:	111f2121 	.word	0x111f2121
1000e3f8:	2b111111 	.word	0x2b111111
1000e3fc:	2919132b 	.word	0x2919132b
1000e400:	2017      	movs	r0, #23
1000e402:	e01f      	b.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e404:	2024      	movs	r0, #36	; 0x24
1000e406:	2b00      	cmp	r3, #0
1000e408:	d11c      	bne.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e40a:	3017      	adds	r0, #23
1000e40c:	e01a      	b.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e40e:	2025      	movs	r0, #37	; 0x25
1000e410:	e018      	b.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e412:	4a0d      	ldr	r2, [pc, #52]	; (1000e448 <gattc_complete_evt_handler+0x74>)
1000e414:	201d      	movs	r0, #29
1000e416:	6813      	ldr	r3, [r2, #0]
1000e418:	3b01      	subs	r3, #1
1000e41a:	6013      	str	r3, [r2, #0]
1000e41c:	e012      	b.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e41e:	4a0a      	ldr	r2, [pc, #40]	; (1000e448 <gattc_complete_evt_handler+0x74>)
1000e420:	201e      	movs	r0, #30
1000e422:	6813      	ldr	r3, [r2, #0]
1000e424:	3b01      	subs	r3, #1
1000e426:	6013      	str	r3, [r2, #0]
1000e428:	e00c      	b.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e42a:	2019      	movs	r0, #25
1000e42c:	e00a      	b.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e42e:	203b      	movs	r0, #59	; 0x3b
1000e430:	2b00      	cmp	r3, #0
1000e432:	d007      	beq.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e434:	2182      	movs	r1, #130	; 0x82
1000e436:	0089      	lsls	r1, r1, #2
1000e438:	5453      	strb	r3, [r2, r1]
1000e43a:	3823      	subs	r0, #35	; 0x23
1000e43c:	e002      	b.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e43e:	2021      	movs	r0, #33	; 0x21
1000e440:	e000      	b.n	1000e444 <gattc_complete_evt_handler+0x70>
1000e442:	2000      	movs	r0, #0
1000e444:	bd00      	pop	{pc}
1000e446:	46c0      	nop			; (mov r8, r8)
1000e448:	10012040 	.word	0x10012040

1000e44c <gattc_event_mtu_changed_ind_parser>:
1000e44c:	0a00      	lsrs	r0, r0, #8
1000e44e:	8010      	strh	r0, [r2, #0]
1000e450:	784b      	ldrb	r3, [r1, #1]
1000e452:	7809      	ldrb	r1, [r1, #0]
1000e454:	021b      	lsls	r3, r3, #8
1000e456:	430b      	orrs	r3, r1
1000e458:	8053      	strh	r3, [r2, #2]
1000e45a:	4770      	bx	lr

1000e45c <gattc_read_ind_parser>:
1000e45c:	0a00      	lsrs	r0, r0, #8
1000e45e:	b508      	push	{r3, lr}
1000e460:	8010      	strh	r0, [r2, #0]
1000e462:	1c13      	adds	r3, r2, #0
1000e464:	2282      	movs	r2, #130	; 0x82
1000e466:	2000      	movs	r0, #0
1000e468:	0092      	lsls	r2, r2, #2
1000e46a:	5498      	strb	r0, [r3, r2]
1000e46c:	784a      	ldrb	r2, [r1, #1]
1000e46e:	7808      	ldrb	r0, [r1, #0]
1000e470:	0212      	lsls	r2, r2, #8
1000e472:	4302      	orrs	r2, r0
1000e474:	805a      	strh	r2, [r3, #2]
1000e476:	78ca      	ldrb	r2, [r1, #3]
1000e478:	7888      	ldrb	r0, [r1, #2]
1000e47a:	0212      	lsls	r2, r2, #8
1000e47c:	4302      	orrs	r2, r0
1000e47e:	80da      	strh	r2, [r3, #6]
1000e480:	794a      	ldrb	r2, [r1, #5]
1000e482:	7908      	ldrb	r0, [r1, #4]
1000e484:	0212      	lsls	r2, r2, #8
1000e486:	4302      	orrs	r2, r0
1000e488:	809a      	strh	r2, [r3, #4]
1000e48a:	3308      	adds	r3, #8
1000e48c:	1c18      	adds	r0, r3, #0
1000e48e:	3106      	adds	r1, #6
1000e490:	4b01      	ldr	r3, [pc, #4]	; (1000e498 <gattc_read_ind_parser+0x3c>)
1000e492:	4798      	blx	r3
1000e494:	bd08      	pop	{r3, pc}
1000e496:	46c0      	nop			; (mov r8, r8)
1000e498:	1000f7d7 	.word	0x1000f7d7

1000e49c <gattc_svc_changed_cfg_ind_parser>:
1000e49c:	0a00      	lsrs	r0, r0, #8
1000e49e:	8010      	strh	r0, [r2, #0]
1000e4a0:	784b      	ldrb	r3, [r1, #1]
1000e4a2:	7809      	ldrb	r1, [r1, #0]
1000e4a4:	021b      	lsls	r3, r3, #8
1000e4a6:	430b      	orrs	r3, r1
1000e4a8:	8053      	strh	r3, [r2, #2]
1000e4aa:	4770      	bx	lr

1000e4ac <init_gattc_task_module>:
1000e4ac:	2300      	movs	r3, #0
1000e4ae:	4a02      	ldr	r2, [pc, #8]	; (1000e4b8 <init_gattc_task_module+0xc>)
1000e4b0:	8013      	strh	r3, [r2, #0]
1000e4b2:	4a02      	ldr	r2, [pc, #8]	; (1000e4bc <init_gattc_task_module+0x10>)
1000e4b4:	8013      	strh	r3, [r2, #0]
1000e4b6:	4770      	bx	lr
1000e4b8:	1001203a 	.word	0x1001203a
1000e4bc:	1001203c 	.word	0x1001203c

1000e4c0 <gattm_att_set_value_req_handler>:
1000e4c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e4c2:	466b      	mov	r3, sp
1000e4c4:	1dde      	adds	r6, r3, #7
1000e4c6:	2300      	movs	r3, #0
1000e4c8:	1c0d      	adds	r5, r1, #0
1000e4ca:	210c      	movs	r1, #12
1000e4cc:	270b      	movs	r7, #11
1000e4ce:	4c17      	ldr	r4, [pc, #92]	; (1000e52c <gattm_att_set_value_req_handler+0x6c>)
1000e4d0:	7033      	strb	r3, [r6, #0]
1000e4d2:	70e3      	strb	r3, [r4, #3]
1000e4d4:	4b16      	ldr	r3, [pc, #88]	; (1000e530 <gattm_att_set_value_req_handler+0x70>)
1000e4d6:	7021      	strb	r1, [r4, #0]
1000e4d8:	8819      	ldrh	r1, [r3, #0]
1000e4da:	881b      	ldrh	r3, [r3, #0]
1000e4dc:	7220      	strb	r0, [r4, #8]
1000e4de:	0a1b      	lsrs	r3, r3, #8
1000e4e0:	7163      	strb	r3, [r4, #5]
1000e4e2:	0a00      	lsrs	r0, r0, #8
1000e4e4:	0a2b      	lsrs	r3, r5, #8
1000e4e6:	7121      	strb	r1, [r4, #4]
1000e4e8:	7260      	strb	r0, [r4, #9]
1000e4ea:	1c11      	adds	r1, r2, #0
1000e4ec:	72a5      	strb	r5, [r4, #10]
1000e4ee:	1c2a      	adds	r2, r5, #0
1000e4f0:	72e3      	strb	r3, [r4, #11]
1000e4f2:	350c      	adds	r5, #12
1000e4f4:	4b0f      	ldr	r3, [pc, #60]	; (1000e534 <gattm_att_set_value_req_handler+0x74>)
1000e4f6:	4810      	ldr	r0, [pc, #64]	; (1000e538 <gattm_att_set_value_req_handler+0x78>)
1000e4f8:	7067      	strb	r7, [r4, #1]
1000e4fa:	70a7      	strb	r7, [r4, #2]
1000e4fc:	4798      	blx	r3
1000e4fe:	b2a9      	uxth	r1, r5
1000e500:	4b0e      	ldr	r3, [pc, #56]	; (1000e53c <gattm_att_set_value_req_handler+0x7c>)
1000e502:	4d0f      	ldr	r5, [pc, #60]	; (1000e540 <gattm_att_set_value_req_handler+0x80>)
1000e504:	1c20      	adds	r0, r4, #0
1000e506:	802b      	strh	r3, [r5, #0]
1000e508:	1c0b      	adds	r3, r1, #0
1000e50a:	3b08      	subs	r3, #8
1000e50c:	71a3      	strb	r3, [r4, #6]
1000e50e:	121b      	asrs	r3, r3, #8
1000e510:	71e3      	strb	r3, [r4, #7]
1000e512:	4b0c      	ldr	r3, [pc, #48]	; (1000e544 <gattm_att_set_value_req_handler+0x84>)
1000e514:	80af      	strh	r7, [r5, #4]
1000e516:	4798      	blx	r3
1000e518:	1c30      	adds	r0, r6, #0
1000e51a:	4b0b      	ldr	r3, [pc, #44]	; (1000e548 <gattm_att_set_value_req_handler+0x88>)
1000e51c:	4798      	blx	r3
1000e51e:	7833      	ldrb	r3, [r6, #0]
1000e520:	20e2      	movs	r0, #226	; 0xe2
1000e522:	2b00      	cmp	r3, #0
1000e524:	d101      	bne.n	1000e52a <gattm_att_set_value_req_handler+0x6a>
1000e526:	68ab      	ldr	r3, [r5, #8]
1000e528:	7898      	ldrb	r0, [r3, #2]
1000e52a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e52c:	10012f68 	.word	0x10012f68
1000e530:	10012bf8 	.word	0x10012bf8
1000e534:	1000f7d7 	.word	0x1000f7d7
1000e538:	10012f74 	.word	0x10012f74
1000e53c:	00000b0d 	.word	0x00000b0d
1000e540:	10012bec 	.word	0x10012bec
1000e544:	1000ccd9 	.word	0x1000ccd9
1000e548:	1000cd35 	.word	0x1000cd35

1000e54c <gattm_att_get_value_req_handler>:
1000e54c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e54e:	b085      	sub	sp, #20
1000e550:	9201      	str	r2, [sp, #4]
1000e552:	220a      	movs	r2, #10
1000e554:	1c04      	adds	r4, r0, #0
1000e556:	481d      	ldr	r0, [pc, #116]	; (1000e5cc <gattm_att_get_value_req_handler+0x80>)
1000e558:	ab02      	add	r3, sp, #8
1000e55a:	1dde      	adds	r6, r3, #7
1000e55c:	7002      	strb	r2, [r0, #0]
1000e55e:	2300      	movs	r3, #0
1000e560:	220b      	movs	r2, #11
1000e562:	4d1b      	ldr	r5, [pc, #108]	; (1000e5d0 <gattm_att_get_value_req_handler+0x84>)
1000e564:	1c0f      	adds	r7, r1, #0
1000e566:	8829      	ldrh	r1, [r5, #0]
1000e568:	882d      	ldrh	r5, [r5, #0]
1000e56a:	7101      	strb	r1, [r0, #4]
1000e56c:	0a2d      	lsrs	r5, r5, #8
1000e56e:	7145      	strb	r5, [r0, #5]
1000e570:	0a25      	lsrs	r5, r4, #8
1000e572:	7245      	strb	r5, [r0, #9]
1000e574:	4917      	ldr	r1, [pc, #92]	; (1000e5d4 <gattm_att_get_value_req_handler+0x88>)
1000e576:	4d18      	ldr	r5, [pc, #96]	; (1000e5d8 <gattm_att_get_value_req_handler+0x8c>)
1000e578:	7033      	strb	r3, [r6, #0]
1000e57a:	7042      	strb	r2, [r0, #1]
1000e57c:	7082      	strb	r2, [r0, #2]
1000e57e:	70c3      	strb	r3, [r0, #3]
1000e580:	8029      	strh	r1, [r5, #0]
1000e582:	80aa      	strh	r2, [r5, #4]
1000e584:	71c3      	strb	r3, [r0, #7]
1000e586:	3a09      	subs	r2, #9
1000e588:	210a      	movs	r1, #10
1000e58a:	4b14      	ldr	r3, [pc, #80]	; (1000e5dc <gattm_att_get_value_req_handler+0x90>)
1000e58c:	7182      	strb	r2, [r0, #6]
1000e58e:	7204      	strb	r4, [r0, #8]
1000e590:	4798      	blx	r3
1000e592:	1c30      	adds	r0, r6, #0
1000e594:	4b12      	ldr	r3, [pc, #72]	; (1000e5e0 <gattm_att_get_value_req_handler+0x94>)
1000e596:	4798      	blx	r3
1000e598:	7833      	ldrb	r3, [r6, #0]
1000e59a:	20e2      	movs	r0, #226	; 0xe2
1000e59c:	2b00      	cmp	r3, #0
1000e59e:	d112      	bne.n	1000e5c6 <gattm_att_get_value_req_handler+0x7a>
1000e5a0:	68a9      	ldr	r1, [r5, #8]
1000e5a2:	9801      	ldr	r0, [sp, #4]
1000e5a4:	784d      	ldrb	r5, [r1, #1]
1000e5a6:	780b      	ldrb	r3, [r1, #0]
1000e5a8:	78ca      	ldrb	r2, [r1, #3]
1000e5aa:	022d      	lsls	r5, r5, #8
1000e5ac:	431d      	orrs	r5, r3
1000e5ae:	788b      	ldrb	r3, [r1, #2]
1000e5b0:	0212      	lsls	r2, r2, #8
1000e5b2:	431a      	orrs	r2, r3
1000e5b4:	803a      	strh	r2, [r7, #0]
1000e5b6:	790e      	ldrb	r6, [r1, #4]
1000e5b8:	4b0a      	ldr	r3, [pc, #40]	; (1000e5e4 <gattm_att_get_value_req_handler+0x98>)
1000e5ba:	3105      	adds	r1, #5
1000e5bc:	4798      	blx	r3
1000e5be:	20e2      	movs	r0, #226	; 0xe2
1000e5c0:	42ac      	cmp	r4, r5
1000e5c2:	d100      	bne.n	1000e5c6 <gattm_att_get_value_req_handler+0x7a>
1000e5c4:	1c30      	adds	r0, r6, #0
1000e5c6:	b005      	add	sp, #20
1000e5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e5ca:	46c0      	nop			; (mov r8, r8)
1000e5cc:	10012f68 	.word	0x10012f68
1000e5d0:	10012bf8 	.word	0x10012bf8
1000e5d4:	00000b0b 	.word	0x00000b0b
1000e5d8:	10012bec 	.word	0x10012bec
1000e5dc:	1000ccd9 	.word	0x1000ccd9
1000e5e0:	1000cd35 	.word	0x1000cd35
1000e5e4:	1000f7d7 	.word	0x1000f7d7

1000e5e8 <htpt_enable_rsp_handler>:
1000e5e8:	780b      	ldrb	r3, [r1, #0]
1000e5ea:	7013      	strb	r3, [r2, #0]
1000e5ec:	784b      	ldrb	r3, [r1, #1]
1000e5ee:	7053      	strb	r3, [r2, #1]
1000e5f0:	4770      	bx	lr

1000e5f2 <htpt_temp_send_rsp_handler>:
1000e5f2:	780b      	ldrb	r3, [r1, #0]
1000e5f4:	7013      	strb	r3, [r2, #0]
1000e5f6:	4770      	bx	lr

1000e5f8 <htpt_meas_intv_upd_rsp_handler>:
1000e5f8:	780b      	ldrb	r3, [r1, #0]
1000e5fa:	7013      	strb	r3, [r2, #0]
1000e5fc:	4770      	bx	lr

1000e5fe <htpt_meas_intv_chg_req_ind_handler>:
1000e5fe:	78cb      	ldrb	r3, [r1, #3]
1000e600:	7889      	ldrb	r1, [r1, #2]
1000e602:	021b      	lsls	r3, r3, #8
1000e604:	430b      	orrs	r3, r1
1000e606:	8013      	strh	r3, [r2, #0]
1000e608:	4770      	bx	lr

1000e60a <htpt_cfg_indntf_ind_handler>:
1000e60a:	780b      	ldrb	r3, [r1, #0]
1000e60c:	7013      	strb	r3, [r2, #0]
1000e60e:	784b      	ldrb	r3, [r1, #1]
1000e610:	7053      	strb	r3, [r2, #1]
1000e612:	4770      	bx	lr

1000e614 <__gnu_thumb1_case_uqi>:
1000e614:	b402      	push	{r1}
1000e616:	4671      	mov	r1, lr
1000e618:	0849      	lsrs	r1, r1, #1
1000e61a:	0049      	lsls	r1, r1, #1
1000e61c:	5c09      	ldrb	r1, [r1, r0]
1000e61e:	0049      	lsls	r1, r1, #1
1000e620:	448e      	add	lr, r1
1000e622:	bc02      	pop	{r1}
1000e624:	4770      	bx	lr
1000e626:	46c0      	nop			; (mov r8, r8)

1000e628 <__aeabi_uidiv>:
1000e628:	2200      	movs	r2, #0
1000e62a:	0843      	lsrs	r3, r0, #1
1000e62c:	428b      	cmp	r3, r1
1000e62e:	d374      	bcc.n	1000e71a <__aeabi_uidiv+0xf2>
1000e630:	0903      	lsrs	r3, r0, #4
1000e632:	428b      	cmp	r3, r1
1000e634:	d35f      	bcc.n	1000e6f6 <__aeabi_uidiv+0xce>
1000e636:	0a03      	lsrs	r3, r0, #8
1000e638:	428b      	cmp	r3, r1
1000e63a:	d344      	bcc.n	1000e6c6 <__aeabi_uidiv+0x9e>
1000e63c:	0b03      	lsrs	r3, r0, #12
1000e63e:	428b      	cmp	r3, r1
1000e640:	d328      	bcc.n	1000e694 <__aeabi_uidiv+0x6c>
1000e642:	0c03      	lsrs	r3, r0, #16
1000e644:	428b      	cmp	r3, r1
1000e646:	d30d      	bcc.n	1000e664 <__aeabi_uidiv+0x3c>
1000e648:	22ff      	movs	r2, #255	; 0xff
1000e64a:	0209      	lsls	r1, r1, #8
1000e64c:	ba12      	rev	r2, r2
1000e64e:	0c03      	lsrs	r3, r0, #16
1000e650:	428b      	cmp	r3, r1
1000e652:	d302      	bcc.n	1000e65a <__aeabi_uidiv+0x32>
1000e654:	1212      	asrs	r2, r2, #8
1000e656:	0209      	lsls	r1, r1, #8
1000e658:	d065      	beq.n	1000e726 <__aeabi_uidiv+0xfe>
1000e65a:	0b03      	lsrs	r3, r0, #12
1000e65c:	428b      	cmp	r3, r1
1000e65e:	d319      	bcc.n	1000e694 <__aeabi_uidiv+0x6c>
1000e660:	e000      	b.n	1000e664 <__aeabi_uidiv+0x3c>
1000e662:	0a09      	lsrs	r1, r1, #8
1000e664:	0bc3      	lsrs	r3, r0, #15
1000e666:	428b      	cmp	r3, r1
1000e668:	d301      	bcc.n	1000e66e <__aeabi_uidiv+0x46>
1000e66a:	03cb      	lsls	r3, r1, #15
1000e66c:	1ac0      	subs	r0, r0, r3
1000e66e:	4152      	adcs	r2, r2
1000e670:	0b83      	lsrs	r3, r0, #14
1000e672:	428b      	cmp	r3, r1
1000e674:	d301      	bcc.n	1000e67a <__aeabi_uidiv+0x52>
1000e676:	038b      	lsls	r3, r1, #14
1000e678:	1ac0      	subs	r0, r0, r3
1000e67a:	4152      	adcs	r2, r2
1000e67c:	0b43      	lsrs	r3, r0, #13
1000e67e:	428b      	cmp	r3, r1
1000e680:	d301      	bcc.n	1000e686 <__aeabi_uidiv+0x5e>
1000e682:	034b      	lsls	r3, r1, #13
1000e684:	1ac0      	subs	r0, r0, r3
1000e686:	4152      	adcs	r2, r2
1000e688:	0b03      	lsrs	r3, r0, #12
1000e68a:	428b      	cmp	r3, r1
1000e68c:	d301      	bcc.n	1000e692 <__aeabi_uidiv+0x6a>
1000e68e:	030b      	lsls	r3, r1, #12
1000e690:	1ac0      	subs	r0, r0, r3
1000e692:	4152      	adcs	r2, r2
1000e694:	0ac3      	lsrs	r3, r0, #11
1000e696:	428b      	cmp	r3, r1
1000e698:	d301      	bcc.n	1000e69e <__aeabi_uidiv+0x76>
1000e69a:	02cb      	lsls	r3, r1, #11
1000e69c:	1ac0      	subs	r0, r0, r3
1000e69e:	4152      	adcs	r2, r2
1000e6a0:	0a83      	lsrs	r3, r0, #10
1000e6a2:	428b      	cmp	r3, r1
1000e6a4:	d301      	bcc.n	1000e6aa <__aeabi_uidiv+0x82>
1000e6a6:	028b      	lsls	r3, r1, #10
1000e6a8:	1ac0      	subs	r0, r0, r3
1000e6aa:	4152      	adcs	r2, r2
1000e6ac:	0a43      	lsrs	r3, r0, #9
1000e6ae:	428b      	cmp	r3, r1
1000e6b0:	d301      	bcc.n	1000e6b6 <__aeabi_uidiv+0x8e>
1000e6b2:	024b      	lsls	r3, r1, #9
1000e6b4:	1ac0      	subs	r0, r0, r3
1000e6b6:	4152      	adcs	r2, r2
1000e6b8:	0a03      	lsrs	r3, r0, #8
1000e6ba:	428b      	cmp	r3, r1
1000e6bc:	d301      	bcc.n	1000e6c2 <__aeabi_uidiv+0x9a>
1000e6be:	020b      	lsls	r3, r1, #8
1000e6c0:	1ac0      	subs	r0, r0, r3
1000e6c2:	4152      	adcs	r2, r2
1000e6c4:	d2cd      	bcs.n	1000e662 <__aeabi_uidiv+0x3a>
1000e6c6:	09c3      	lsrs	r3, r0, #7
1000e6c8:	428b      	cmp	r3, r1
1000e6ca:	d301      	bcc.n	1000e6d0 <__aeabi_uidiv+0xa8>
1000e6cc:	01cb      	lsls	r3, r1, #7
1000e6ce:	1ac0      	subs	r0, r0, r3
1000e6d0:	4152      	adcs	r2, r2
1000e6d2:	0983      	lsrs	r3, r0, #6
1000e6d4:	428b      	cmp	r3, r1
1000e6d6:	d301      	bcc.n	1000e6dc <__aeabi_uidiv+0xb4>
1000e6d8:	018b      	lsls	r3, r1, #6
1000e6da:	1ac0      	subs	r0, r0, r3
1000e6dc:	4152      	adcs	r2, r2
1000e6de:	0943      	lsrs	r3, r0, #5
1000e6e0:	428b      	cmp	r3, r1
1000e6e2:	d301      	bcc.n	1000e6e8 <__aeabi_uidiv+0xc0>
1000e6e4:	014b      	lsls	r3, r1, #5
1000e6e6:	1ac0      	subs	r0, r0, r3
1000e6e8:	4152      	adcs	r2, r2
1000e6ea:	0903      	lsrs	r3, r0, #4
1000e6ec:	428b      	cmp	r3, r1
1000e6ee:	d301      	bcc.n	1000e6f4 <__aeabi_uidiv+0xcc>
1000e6f0:	010b      	lsls	r3, r1, #4
1000e6f2:	1ac0      	subs	r0, r0, r3
1000e6f4:	4152      	adcs	r2, r2
1000e6f6:	08c3      	lsrs	r3, r0, #3
1000e6f8:	428b      	cmp	r3, r1
1000e6fa:	d301      	bcc.n	1000e700 <__aeabi_uidiv+0xd8>
1000e6fc:	00cb      	lsls	r3, r1, #3
1000e6fe:	1ac0      	subs	r0, r0, r3
1000e700:	4152      	adcs	r2, r2
1000e702:	0883      	lsrs	r3, r0, #2
1000e704:	428b      	cmp	r3, r1
1000e706:	d301      	bcc.n	1000e70c <__aeabi_uidiv+0xe4>
1000e708:	008b      	lsls	r3, r1, #2
1000e70a:	1ac0      	subs	r0, r0, r3
1000e70c:	4152      	adcs	r2, r2
1000e70e:	0843      	lsrs	r3, r0, #1
1000e710:	428b      	cmp	r3, r1
1000e712:	d301      	bcc.n	1000e718 <__aeabi_uidiv+0xf0>
1000e714:	004b      	lsls	r3, r1, #1
1000e716:	1ac0      	subs	r0, r0, r3
1000e718:	4152      	adcs	r2, r2
1000e71a:	1a41      	subs	r1, r0, r1
1000e71c:	d200      	bcs.n	1000e720 <__aeabi_uidiv+0xf8>
1000e71e:	4601      	mov	r1, r0
1000e720:	4152      	adcs	r2, r2
1000e722:	4610      	mov	r0, r2
1000e724:	4770      	bx	lr
1000e726:	e7ff      	b.n	1000e728 <__aeabi_uidiv+0x100>
1000e728:	b501      	push	{r0, lr}
1000e72a:	2000      	movs	r0, #0
1000e72c:	f000 f80c 	bl	1000e748 <__aeabi_idiv0>
1000e730:	bd02      	pop	{r1, pc}
1000e732:	46c0      	nop			; (mov r8, r8)

1000e734 <__aeabi_uidivmod>:
1000e734:	2900      	cmp	r1, #0
1000e736:	d0f7      	beq.n	1000e728 <__aeabi_uidiv+0x100>
1000e738:	b503      	push	{r0, r1, lr}
1000e73a:	f7ff ff75 	bl	1000e628 <__aeabi_uidiv>
1000e73e:	bc0e      	pop	{r1, r2, r3}
1000e740:	4342      	muls	r2, r0
1000e742:	1a89      	subs	r1, r1, r2
1000e744:	4718      	bx	r3
1000e746:	46c0      	nop			; (mov r8, r8)

1000e748 <__aeabi_idiv0>:
1000e748:	4770      	bx	lr
1000e74a:	46c0      	nop			; (mov r8, r8)

1000e74c <__aeabi_d2uiz>:
1000e74c:	b538      	push	{r3, r4, r5, lr}
1000e74e:	2200      	movs	r2, #0
1000e750:	4b0c      	ldr	r3, [pc, #48]	; (1000e784 <__aeabi_d2uiz+0x38>)
1000e752:	1c04      	adds	r4, r0, #0
1000e754:	1c0d      	adds	r5, r1, #0
1000e756:	f000 fec7 	bl	1000f4e8 <__aeabi_dcmpge>
1000e75a:	2800      	cmp	r0, #0
1000e75c:	d104      	bne.n	1000e768 <__aeabi_d2uiz+0x1c>
1000e75e:	1c20      	adds	r0, r4, #0
1000e760:	1c29      	adds	r1, r5, #0
1000e762:	f000 fe25 	bl	1000f3b0 <__aeabi_d2iz>
1000e766:	bd38      	pop	{r3, r4, r5, pc}
1000e768:	4b06      	ldr	r3, [pc, #24]	; (1000e784 <__aeabi_d2uiz+0x38>)
1000e76a:	2200      	movs	r2, #0
1000e76c:	1c20      	adds	r0, r4, #0
1000e76e:	1c29      	adds	r1, r5, #0
1000e770:	f000 faa4 	bl	1000ecbc <__aeabi_dsub>
1000e774:	f000 fe1c 	bl	1000f3b0 <__aeabi_d2iz>
1000e778:	2380      	movs	r3, #128	; 0x80
1000e77a:	061b      	lsls	r3, r3, #24
1000e77c:	469c      	mov	ip, r3
1000e77e:	4460      	add	r0, ip
1000e780:	e7f1      	b.n	1000e766 <__aeabi_d2uiz+0x1a>
1000e782:	46c0      	nop			; (mov r8, r8)
1000e784:	41e00000 	.word	0x41e00000

1000e788 <__aeabi_dmul>:
1000e788:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e78a:	465f      	mov	r7, fp
1000e78c:	4656      	mov	r6, sl
1000e78e:	464d      	mov	r5, r9
1000e790:	4644      	mov	r4, r8
1000e792:	b4f0      	push	{r4, r5, r6, r7}
1000e794:	1c05      	adds	r5, r0, #0
1000e796:	1c06      	adds	r6, r0, #0
1000e798:	0308      	lsls	r0, r1, #12
1000e79a:	b087      	sub	sp, #28
1000e79c:	4699      	mov	r9, r3
1000e79e:	004f      	lsls	r7, r1, #1
1000e7a0:	0b03      	lsrs	r3, r0, #12
1000e7a2:	0fcc      	lsrs	r4, r1, #31
1000e7a4:	4692      	mov	sl, r2
1000e7a6:	469b      	mov	fp, r3
1000e7a8:	0d7f      	lsrs	r7, r7, #21
1000e7aa:	9401      	str	r4, [sp, #4]
1000e7ac:	d067      	beq.n	1000e87e <__aeabi_dmul+0xf6>
1000e7ae:	4b6c      	ldr	r3, [pc, #432]	; (1000e960 <__aeabi_dmul+0x1d8>)
1000e7b0:	429f      	cmp	r7, r3
1000e7b2:	d036      	beq.n	1000e822 <__aeabi_dmul+0x9a>
1000e7b4:	2080      	movs	r0, #128	; 0x80
1000e7b6:	465b      	mov	r3, fp
1000e7b8:	0340      	lsls	r0, r0, #13
1000e7ba:	4318      	orrs	r0, r3
1000e7bc:	00c0      	lsls	r0, r0, #3
1000e7be:	0f6b      	lsrs	r3, r5, #29
1000e7c0:	4318      	orrs	r0, r3
1000e7c2:	4b68      	ldr	r3, [pc, #416]	; (1000e964 <__aeabi_dmul+0x1dc>)
1000e7c4:	4683      	mov	fp, r0
1000e7c6:	469c      	mov	ip, r3
1000e7c8:	2300      	movs	r3, #0
1000e7ca:	4698      	mov	r8, r3
1000e7cc:	00ee      	lsls	r6, r5, #3
1000e7ce:	4467      	add	r7, ip
1000e7d0:	9300      	str	r3, [sp, #0]
1000e7d2:	464b      	mov	r3, r9
1000e7d4:	4649      	mov	r1, r9
1000e7d6:	031d      	lsls	r5, r3, #12
1000e7d8:	0fc9      	lsrs	r1, r1, #31
1000e7da:	005b      	lsls	r3, r3, #1
1000e7dc:	4652      	mov	r2, sl
1000e7de:	0b2d      	lsrs	r5, r5, #12
1000e7e0:	0d5b      	lsrs	r3, r3, #21
1000e7e2:	4689      	mov	r9, r1
1000e7e4:	d100      	bne.n	1000e7e8 <__aeabi_dmul+0x60>
1000e7e6:	e06e      	b.n	1000e8c6 <__aeabi_dmul+0x13e>
1000e7e8:	495d      	ldr	r1, [pc, #372]	; (1000e960 <__aeabi_dmul+0x1d8>)
1000e7ea:	428b      	cmp	r3, r1
1000e7ec:	d064      	beq.n	1000e8b8 <__aeabi_dmul+0x130>
1000e7ee:	2080      	movs	r0, #128	; 0x80
1000e7f0:	495c      	ldr	r1, [pc, #368]	; (1000e964 <__aeabi_dmul+0x1dc>)
1000e7f2:	0340      	lsls	r0, r0, #13
1000e7f4:	468c      	mov	ip, r1
1000e7f6:	2100      	movs	r1, #0
1000e7f8:	4305      	orrs	r5, r0
1000e7fa:	00ed      	lsls	r5, r5, #3
1000e7fc:	0f50      	lsrs	r0, r2, #29
1000e7fe:	4305      	orrs	r5, r0
1000e800:	00d2      	lsls	r2, r2, #3
1000e802:	4463      	add	r3, ip
1000e804:	4648      	mov	r0, r9
1000e806:	18ff      	adds	r7, r7, r3
1000e808:	1c7b      	adds	r3, r7, #1
1000e80a:	469a      	mov	sl, r3
1000e80c:	9b00      	ldr	r3, [sp, #0]
1000e80e:	4060      	eors	r0, r4
1000e810:	9002      	str	r0, [sp, #8]
1000e812:	430b      	orrs	r3, r1
1000e814:	2b0f      	cmp	r3, #15
1000e816:	d900      	bls.n	1000e81a <__aeabi_dmul+0x92>
1000e818:	e0ac      	b.n	1000e974 <__aeabi_dmul+0x1ec>
1000e81a:	4853      	ldr	r0, [pc, #332]	; (1000e968 <__aeabi_dmul+0x1e0>)
1000e81c:	009b      	lsls	r3, r3, #2
1000e81e:	58c3      	ldr	r3, [r0, r3]
1000e820:	469f      	mov	pc, r3
1000e822:	465b      	mov	r3, fp
1000e824:	431d      	orrs	r5, r3
1000e826:	d000      	beq.n	1000e82a <__aeabi_dmul+0xa2>
1000e828:	e082      	b.n	1000e930 <__aeabi_dmul+0x1a8>
1000e82a:	2308      	movs	r3, #8
1000e82c:	9300      	str	r3, [sp, #0]
1000e82e:	2300      	movs	r3, #0
1000e830:	469b      	mov	fp, r3
1000e832:	3302      	adds	r3, #2
1000e834:	2600      	movs	r6, #0
1000e836:	4698      	mov	r8, r3
1000e838:	e7cb      	b.n	1000e7d2 <__aeabi_dmul+0x4a>
1000e83a:	9b02      	ldr	r3, [sp, #8]
1000e83c:	9301      	str	r3, [sp, #4]
1000e83e:	4643      	mov	r3, r8
1000e840:	2b02      	cmp	r3, #2
1000e842:	d159      	bne.n	1000e8f8 <__aeabi_dmul+0x170>
1000e844:	2401      	movs	r4, #1
1000e846:	2500      	movs	r5, #0
1000e848:	2600      	movs	r6, #0
1000e84a:	9b01      	ldr	r3, [sp, #4]
1000e84c:	401c      	ands	r4, r3
1000e84e:	4b44      	ldr	r3, [pc, #272]	; (1000e960 <__aeabi_dmul+0x1d8>)
1000e850:	2100      	movs	r1, #0
1000e852:	032d      	lsls	r5, r5, #12
1000e854:	0d0a      	lsrs	r2, r1, #20
1000e856:	0512      	lsls	r2, r2, #20
1000e858:	0b2d      	lsrs	r5, r5, #12
1000e85a:	4315      	orrs	r5, r2
1000e85c:	4a43      	ldr	r2, [pc, #268]	; (1000e96c <__aeabi_dmul+0x1e4>)
1000e85e:	051b      	lsls	r3, r3, #20
1000e860:	4015      	ands	r5, r2
1000e862:	431d      	orrs	r5, r3
1000e864:	006d      	lsls	r5, r5, #1
1000e866:	07e4      	lsls	r4, r4, #31
1000e868:	086d      	lsrs	r5, r5, #1
1000e86a:	4325      	orrs	r5, r4
1000e86c:	1c30      	adds	r0, r6, #0
1000e86e:	1c29      	adds	r1, r5, #0
1000e870:	b007      	add	sp, #28
1000e872:	bc3c      	pop	{r2, r3, r4, r5}
1000e874:	4690      	mov	r8, r2
1000e876:	4699      	mov	r9, r3
1000e878:	46a2      	mov	sl, r4
1000e87a:	46ab      	mov	fp, r5
1000e87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e87e:	432b      	orrs	r3, r5
1000e880:	d04e      	beq.n	1000e920 <__aeabi_dmul+0x198>
1000e882:	465b      	mov	r3, fp
1000e884:	2b00      	cmp	r3, #0
1000e886:	d100      	bne.n	1000e88a <__aeabi_dmul+0x102>
1000e888:	e185      	b.n	1000eb96 <__aeabi_dmul+0x40e>
1000e88a:	4658      	mov	r0, fp
1000e88c:	f000 fe36 	bl	1000f4fc <__clzsi2>
1000e890:	1c02      	adds	r2, r0, #0
1000e892:	2328      	movs	r3, #40	; 0x28
1000e894:	1c29      	adds	r1, r5, #0
1000e896:	1a9b      	subs	r3, r3, r2
1000e898:	1c16      	adds	r6, r2, #0
1000e89a:	4658      	mov	r0, fp
1000e89c:	40d9      	lsrs	r1, r3
1000e89e:	3e08      	subs	r6, #8
1000e8a0:	40b0      	lsls	r0, r6
1000e8a2:	1c0b      	adds	r3, r1, #0
1000e8a4:	40b5      	lsls	r5, r6
1000e8a6:	4303      	orrs	r3, r0
1000e8a8:	469b      	mov	fp, r3
1000e8aa:	1c2e      	adds	r6, r5, #0
1000e8ac:	2300      	movs	r3, #0
1000e8ae:	4f30      	ldr	r7, [pc, #192]	; (1000e970 <__aeabi_dmul+0x1e8>)
1000e8b0:	9300      	str	r3, [sp, #0]
1000e8b2:	1abf      	subs	r7, r7, r2
1000e8b4:	4698      	mov	r8, r3
1000e8b6:	e78c      	b.n	1000e7d2 <__aeabi_dmul+0x4a>
1000e8b8:	4651      	mov	r1, sl
1000e8ba:	4329      	orrs	r1, r5
1000e8bc:	d12e      	bne.n	1000e91c <__aeabi_dmul+0x194>
1000e8be:	2500      	movs	r5, #0
1000e8c0:	2200      	movs	r2, #0
1000e8c2:	2102      	movs	r1, #2
1000e8c4:	e79e      	b.n	1000e804 <__aeabi_dmul+0x7c>
1000e8c6:	4651      	mov	r1, sl
1000e8c8:	4329      	orrs	r1, r5
1000e8ca:	d023      	beq.n	1000e914 <__aeabi_dmul+0x18c>
1000e8cc:	2d00      	cmp	r5, #0
1000e8ce:	d100      	bne.n	1000e8d2 <__aeabi_dmul+0x14a>
1000e8d0:	e154      	b.n	1000eb7c <__aeabi_dmul+0x3f4>
1000e8d2:	1c28      	adds	r0, r5, #0
1000e8d4:	f000 fe12 	bl	1000f4fc <__clzsi2>
1000e8d8:	1c03      	adds	r3, r0, #0
1000e8da:	2128      	movs	r1, #40	; 0x28
1000e8dc:	4650      	mov	r0, sl
1000e8de:	1ac9      	subs	r1, r1, r3
1000e8e0:	1c1a      	adds	r2, r3, #0
1000e8e2:	40c8      	lsrs	r0, r1
1000e8e4:	4651      	mov	r1, sl
1000e8e6:	3a08      	subs	r2, #8
1000e8e8:	4091      	lsls	r1, r2
1000e8ea:	4095      	lsls	r5, r2
1000e8ec:	1c0a      	adds	r2, r1, #0
1000e8ee:	4305      	orrs	r5, r0
1000e8f0:	481f      	ldr	r0, [pc, #124]	; (1000e970 <__aeabi_dmul+0x1e8>)
1000e8f2:	2100      	movs	r1, #0
1000e8f4:	1ac3      	subs	r3, r0, r3
1000e8f6:	e785      	b.n	1000e804 <__aeabi_dmul+0x7c>
1000e8f8:	2b03      	cmp	r3, #3
1000e8fa:	d100      	bne.n	1000e8fe <__aeabi_dmul+0x176>
1000e8fc:	e1c2      	b.n	1000ec84 <__aeabi_dmul+0x4fc>
1000e8fe:	2b01      	cmp	r3, #1
1000e900:	d000      	beq.n	1000e904 <__aeabi_dmul+0x17c>
1000e902:	e16d      	b.n	1000ebe0 <__aeabi_dmul+0x458>
1000e904:	4644      	mov	r4, r8
1000e906:	9b01      	ldr	r3, [sp, #4]
1000e908:	2500      	movs	r5, #0
1000e90a:	401c      	ands	r4, r3
1000e90c:	b2e4      	uxtb	r4, r4
1000e90e:	2300      	movs	r3, #0
1000e910:	2600      	movs	r6, #0
1000e912:	e79d      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000e914:	2500      	movs	r5, #0
1000e916:	2200      	movs	r2, #0
1000e918:	2101      	movs	r1, #1
1000e91a:	e773      	b.n	1000e804 <__aeabi_dmul+0x7c>
1000e91c:	2103      	movs	r1, #3
1000e91e:	e771      	b.n	1000e804 <__aeabi_dmul+0x7c>
1000e920:	2304      	movs	r3, #4
1000e922:	9300      	str	r3, [sp, #0]
1000e924:	2300      	movs	r3, #0
1000e926:	469b      	mov	fp, r3
1000e928:	3301      	adds	r3, #1
1000e92a:	2600      	movs	r6, #0
1000e92c:	4698      	mov	r8, r3
1000e92e:	e750      	b.n	1000e7d2 <__aeabi_dmul+0x4a>
1000e930:	230c      	movs	r3, #12
1000e932:	9300      	str	r3, [sp, #0]
1000e934:	3b09      	subs	r3, #9
1000e936:	4698      	mov	r8, r3
1000e938:	e74b      	b.n	1000e7d2 <__aeabi_dmul+0x4a>
1000e93a:	2580      	movs	r5, #128	; 0x80
1000e93c:	2400      	movs	r4, #0
1000e93e:	032d      	lsls	r5, r5, #12
1000e940:	2600      	movs	r6, #0
1000e942:	4b07      	ldr	r3, [pc, #28]	; (1000e960 <__aeabi_dmul+0x1d8>)
1000e944:	e784      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000e946:	464b      	mov	r3, r9
1000e948:	46ab      	mov	fp, r5
1000e94a:	1c16      	adds	r6, r2, #0
1000e94c:	9301      	str	r3, [sp, #4]
1000e94e:	4688      	mov	r8, r1
1000e950:	e775      	b.n	1000e83e <__aeabi_dmul+0xb6>
1000e952:	9b02      	ldr	r3, [sp, #8]
1000e954:	46ab      	mov	fp, r5
1000e956:	1c16      	adds	r6, r2, #0
1000e958:	9301      	str	r3, [sp, #4]
1000e95a:	4688      	mov	r8, r1
1000e95c:	e76f      	b.n	1000e83e <__aeabi_dmul+0xb6>
1000e95e:	46c0      	nop			; (mov r8, r8)
1000e960:	000007ff 	.word	0x000007ff
1000e964:	fffffc01 	.word	0xfffffc01
1000e968:	10011780 	.word	0x10011780
1000e96c:	800fffff 	.word	0x800fffff
1000e970:	fffffc0d 	.word	0xfffffc0d
1000e974:	0c33      	lsrs	r3, r6, #16
1000e976:	0436      	lsls	r6, r6, #16
1000e978:	0c36      	lsrs	r6, r6, #16
1000e97a:	469c      	mov	ip, r3
1000e97c:	1c33      	adds	r3, r6, #0
1000e97e:	0c14      	lsrs	r4, r2, #16
1000e980:	0412      	lsls	r2, r2, #16
1000e982:	0c12      	lsrs	r2, r2, #16
1000e984:	4353      	muls	r3, r2
1000e986:	4698      	mov	r8, r3
1000e988:	4663      	mov	r3, ip
1000e98a:	4353      	muls	r3, r2
1000e98c:	4699      	mov	r9, r3
1000e98e:	4663      	mov	r3, ip
1000e990:	4363      	muls	r3, r4
1000e992:	9301      	str	r3, [sp, #4]
1000e994:	1c33      	adds	r3, r6, #0
1000e996:	4641      	mov	r1, r8
1000e998:	4363      	muls	r3, r4
1000e99a:	0c09      	lsrs	r1, r1, #16
1000e99c:	444b      	add	r3, r9
1000e99e:	185b      	adds	r3, r3, r1
1000e9a0:	4599      	cmp	r9, r3
1000e9a2:	d905      	bls.n	1000e9b0 <__aeabi_dmul+0x228>
1000e9a4:	2080      	movs	r0, #128	; 0x80
1000e9a6:	0240      	lsls	r0, r0, #9
1000e9a8:	4681      	mov	r9, r0
1000e9aa:	9901      	ldr	r1, [sp, #4]
1000e9ac:	4449      	add	r1, r9
1000e9ae:	9101      	str	r1, [sp, #4]
1000e9b0:	0c19      	lsrs	r1, r3, #16
1000e9b2:	9103      	str	r1, [sp, #12]
1000e9b4:	4641      	mov	r1, r8
1000e9b6:	0409      	lsls	r1, r1, #16
1000e9b8:	0c09      	lsrs	r1, r1, #16
1000e9ba:	041b      	lsls	r3, r3, #16
1000e9bc:	185b      	adds	r3, r3, r1
1000e9be:	9304      	str	r3, [sp, #16]
1000e9c0:	0c2b      	lsrs	r3, r5, #16
1000e9c2:	4698      	mov	r8, r3
1000e9c4:	1c33      	adds	r3, r6, #0
1000e9c6:	042d      	lsls	r5, r5, #16
1000e9c8:	0c29      	lsrs	r1, r5, #16
1000e9ca:	434b      	muls	r3, r1
1000e9cc:	4660      	mov	r0, ip
1000e9ce:	9300      	str	r3, [sp, #0]
1000e9d0:	4643      	mov	r3, r8
1000e9d2:	4665      	mov	r5, ip
1000e9d4:	4358      	muls	r0, r3
1000e9d6:	435e      	muls	r6, r3
1000e9d8:	9b00      	ldr	r3, [sp, #0]
1000e9da:	434d      	muls	r5, r1
1000e9dc:	0c1b      	lsrs	r3, r3, #16
1000e9de:	4699      	mov	r9, r3
1000e9e0:	19ae      	adds	r6, r5, r6
1000e9e2:	444e      	add	r6, r9
1000e9e4:	4684      	mov	ip, r0
1000e9e6:	42b5      	cmp	r5, r6
1000e9e8:	d903      	bls.n	1000e9f2 <__aeabi_dmul+0x26a>
1000e9ea:	2380      	movs	r3, #128	; 0x80
1000e9ec:	025b      	lsls	r3, r3, #9
1000e9ee:	4699      	mov	r9, r3
1000e9f0:	44cc      	add	ip, r9
1000e9f2:	0c35      	lsrs	r5, r6, #16
1000e9f4:	1c2b      	adds	r3, r5, #0
1000e9f6:	9803      	ldr	r0, [sp, #12]
1000e9f8:	4463      	add	r3, ip
1000e9fa:	4684      	mov	ip, r0
1000e9fc:	9305      	str	r3, [sp, #20]
1000e9fe:	9b00      	ldr	r3, [sp, #0]
1000ea00:	0436      	lsls	r6, r6, #16
1000ea02:	041b      	lsls	r3, r3, #16
1000ea04:	0c1b      	lsrs	r3, r3, #16
1000ea06:	18f3      	adds	r3, r6, r3
1000ea08:	449c      	add	ip, r3
1000ea0a:	4660      	mov	r0, ip
1000ea0c:	9003      	str	r0, [sp, #12]
1000ea0e:	4658      	mov	r0, fp
1000ea10:	0405      	lsls	r5, r0, #16
1000ea12:	0c06      	lsrs	r6, r0, #16
1000ea14:	0c28      	lsrs	r0, r5, #16
1000ea16:	4684      	mov	ip, r0
1000ea18:	4350      	muls	r0, r2
1000ea1a:	1c35      	adds	r5, r6, #0
1000ea1c:	4681      	mov	r9, r0
1000ea1e:	4660      	mov	r0, ip
1000ea20:	4365      	muls	r5, r4
1000ea22:	4344      	muls	r4, r0
1000ea24:	4648      	mov	r0, r9
1000ea26:	0c00      	lsrs	r0, r0, #16
1000ea28:	4683      	mov	fp, r0
1000ea2a:	4372      	muls	r2, r6
1000ea2c:	1914      	adds	r4, r2, r4
1000ea2e:	445c      	add	r4, fp
1000ea30:	42a2      	cmp	r2, r4
1000ea32:	d903      	bls.n	1000ea3c <__aeabi_dmul+0x2b4>
1000ea34:	2280      	movs	r2, #128	; 0x80
1000ea36:	0252      	lsls	r2, r2, #9
1000ea38:	4693      	mov	fp, r2
1000ea3a:	445d      	add	r5, fp
1000ea3c:	0c22      	lsrs	r2, r4, #16
1000ea3e:	18ad      	adds	r5, r5, r2
1000ea40:	464a      	mov	r2, r9
1000ea42:	0412      	lsls	r2, r2, #16
1000ea44:	0c12      	lsrs	r2, r2, #16
1000ea46:	0424      	lsls	r4, r4, #16
1000ea48:	4640      	mov	r0, r8
1000ea4a:	18a4      	adds	r4, r4, r2
1000ea4c:	4662      	mov	r2, ip
1000ea4e:	434a      	muls	r2, r1
1000ea50:	4371      	muls	r1, r6
1000ea52:	4346      	muls	r6, r0
1000ea54:	4660      	mov	r0, ip
1000ea56:	9600      	str	r6, [sp, #0]
1000ea58:	4646      	mov	r6, r8
1000ea5a:	4370      	muls	r0, r6
1000ea5c:	4680      	mov	r8, r0
1000ea5e:	0c10      	lsrs	r0, r2, #16
1000ea60:	4684      	mov	ip, r0
1000ea62:	4488      	add	r8, r1
1000ea64:	44e0      	add	r8, ip
1000ea66:	4541      	cmp	r1, r8
1000ea68:	d905      	bls.n	1000ea76 <__aeabi_dmul+0x2ee>
1000ea6a:	2180      	movs	r1, #128	; 0x80
1000ea6c:	0249      	lsls	r1, r1, #9
1000ea6e:	468c      	mov	ip, r1
1000ea70:	9900      	ldr	r1, [sp, #0]
1000ea72:	4461      	add	r1, ip
1000ea74:	9100      	str	r1, [sp, #0]
1000ea76:	9801      	ldr	r0, [sp, #4]
1000ea78:	9903      	ldr	r1, [sp, #12]
1000ea7a:	4684      	mov	ip, r0
1000ea7c:	4461      	add	r1, ip
1000ea7e:	4299      	cmp	r1, r3
1000ea80:	419b      	sbcs	r3, r3
1000ea82:	425b      	negs	r3, r3
1000ea84:	4699      	mov	r9, r3
1000ea86:	9805      	ldr	r0, [sp, #20]
1000ea88:	4643      	mov	r3, r8
1000ea8a:	4684      	mov	ip, r0
1000ea8c:	0412      	lsls	r2, r2, #16
1000ea8e:	0c12      	lsrs	r2, r2, #16
1000ea90:	041b      	lsls	r3, r3, #16
1000ea92:	189b      	adds	r3, r3, r2
1000ea94:	4463      	add	r3, ip
1000ea96:	469c      	mov	ip, r3
1000ea98:	46ab      	mov	fp, r5
1000ea9a:	4283      	cmp	r3, r0
1000ea9c:	419b      	sbcs	r3, r3
1000ea9e:	4640      	mov	r0, r8
1000eaa0:	190a      	adds	r2, r1, r4
1000eaa2:	44cc      	add	ip, r9
1000eaa4:	42a2      	cmp	r2, r4
1000eaa6:	4189      	sbcs	r1, r1
1000eaa8:	44e3      	add	fp, ip
1000eaaa:	45cc      	cmp	ip, r9
1000eaac:	41b6      	sbcs	r6, r6
1000eaae:	465c      	mov	r4, fp
1000eab0:	0c00      	lsrs	r0, r0, #16
1000eab2:	4680      	mov	r8, r0
1000eab4:	4249      	negs	r1, r1
1000eab6:	4276      	negs	r6, r6
1000eab8:	425b      	negs	r3, r3
1000eaba:	1864      	adds	r4, r4, r1
1000eabc:	4333      	orrs	r3, r6
1000eabe:	4498      	add	r8, r3
1000eac0:	428c      	cmp	r4, r1
1000eac2:	4189      	sbcs	r1, r1
1000eac4:	45ab      	cmp	fp, r5
1000eac6:	419b      	sbcs	r3, r3
1000eac8:	4249      	negs	r1, r1
1000eaca:	425b      	negs	r3, r3
1000eacc:	4319      	orrs	r1, r3
1000eace:	1c0d      	adds	r5, r1, #0
1000ead0:	9b00      	ldr	r3, [sp, #0]
1000ead2:	4445      	add	r5, r8
1000ead4:	18ee      	adds	r6, r5, r3
1000ead6:	0276      	lsls	r6, r6, #9
1000ead8:	0de5      	lsrs	r5, r4, #23
1000eada:	432e      	orrs	r6, r5
1000eadc:	46b3      	mov	fp, r6
1000eade:	9b04      	ldr	r3, [sp, #16]
1000eae0:	0256      	lsls	r6, r2, #9
1000eae2:	431e      	orrs	r6, r3
1000eae4:	1e73      	subs	r3, r6, #1
1000eae6:	419e      	sbcs	r6, r3
1000eae8:	465b      	mov	r3, fp
1000eaea:	0dd2      	lsrs	r2, r2, #23
1000eaec:	4332      	orrs	r2, r6
1000eaee:	0266      	lsls	r6, r4, #9
1000eaf0:	4316      	orrs	r6, r2
1000eaf2:	01db      	lsls	r3, r3, #7
1000eaf4:	d50a      	bpl.n	1000eb0c <__aeabi_dmul+0x384>
1000eaf6:	2301      	movs	r3, #1
1000eaf8:	4033      	ands	r3, r6
1000eafa:	0876      	lsrs	r6, r6, #1
1000eafc:	431e      	orrs	r6, r3
1000eafe:	465b      	mov	r3, fp
1000eb00:	07db      	lsls	r3, r3, #31
1000eb02:	431e      	orrs	r6, r3
1000eb04:	465b      	mov	r3, fp
1000eb06:	085b      	lsrs	r3, r3, #1
1000eb08:	469b      	mov	fp, r3
1000eb0a:	4657      	mov	r7, sl
1000eb0c:	4b63      	ldr	r3, [pc, #396]	; (1000ec9c <__aeabi_dmul+0x514>)
1000eb0e:	18fb      	adds	r3, r7, r3
1000eb10:	2b00      	cmp	r3, #0
1000eb12:	dd5a      	ble.n	1000ebca <__aeabi_dmul+0x442>
1000eb14:	0772      	lsls	r2, r6, #29
1000eb16:	d009      	beq.n	1000eb2c <__aeabi_dmul+0x3a4>
1000eb18:	220f      	movs	r2, #15
1000eb1a:	4032      	ands	r2, r6
1000eb1c:	2a04      	cmp	r2, #4
1000eb1e:	d005      	beq.n	1000eb2c <__aeabi_dmul+0x3a4>
1000eb20:	1d32      	adds	r2, r6, #4
1000eb22:	42b2      	cmp	r2, r6
1000eb24:	41b6      	sbcs	r6, r6
1000eb26:	4276      	negs	r6, r6
1000eb28:	44b3      	add	fp, r6
1000eb2a:	1c16      	adds	r6, r2, #0
1000eb2c:	465a      	mov	r2, fp
1000eb2e:	01d2      	lsls	r2, r2, #7
1000eb30:	d506      	bpl.n	1000eb40 <__aeabi_dmul+0x3b8>
1000eb32:	465a      	mov	r2, fp
1000eb34:	4b5a      	ldr	r3, [pc, #360]	; (1000eca0 <__aeabi_dmul+0x518>)
1000eb36:	401a      	ands	r2, r3
1000eb38:	2380      	movs	r3, #128	; 0x80
1000eb3a:	4693      	mov	fp, r2
1000eb3c:	00db      	lsls	r3, r3, #3
1000eb3e:	18fb      	adds	r3, r7, r3
1000eb40:	4a58      	ldr	r2, [pc, #352]	; (1000eca4 <__aeabi_dmul+0x51c>)
1000eb42:	4293      	cmp	r3, r2
1000eb44:	dd34      	ble.n	1000ebb0 <__aeabi_dmul+0x428>
1000eb46:	2401      	movs	r4, #1
1000eb48:	9b02      	ldr	r3, [sp, #8]
1000eb4a:	2500      	movs	r5, #0
1000eb4c:	401c      	ands	r4, r3
1000eb4e:	2600      	movs	r6, #0
1000eb50:	4b55      	ldr	r3, [pc, #340]	; (1000eca8 <__aeabi_dmul+0x520>)
1000eb52:	e67d      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000eb54:	2080      	movs	r0, #128	; 0x80
1000eb56:	465b      	mov	r3, fp
1000eb58:	0300      	lsls	r0, r0, #12
1000eb5a:	4203      	tst	r3, r0
1000eb5c:	d008      	beq.n	1000eb70 <__aeabi_dmul+0x3e8>
1000eb5e:	4205      	tst	r5, r0
1000eb60:	d106      	bne.n	1000eb70 <__aeabi_dmul+0x3e8>
1000eb62:	4305      	orrs	r5, r0
1000eb64:	032d      	lsls	r5, r5, #12
1000eb66:	0b2d      	lsrs	r5, r5, #12
1000eb68:	464c      	mov	r4, r9
1000eb6a:	1c16      	adds	r6, r2, #0
1000eb6c:	4b4e      	ldr	r3, [pc, #312]	; (1000eca8 <__aeabi_dmul+0x520>)
1000eb6e:	e66f      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000eb70:	465d      	mov	r5, fp
1000eb72:	4305      	orrs	r5, r0
1000eb74:	032d      	lsls	r5, r5, #12
1000eb76:	0b2d      	lsrs	r5, r5, #12
1000eb78:	4b4b      	ldr	r3, [pc, #300]	; (1000eca8 <__aeabi_dmul+0x520>)
1000eb7a:	e669      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000eb7c:	4650      	mov	r0, sl
1000eb7e:	f000 fcbd 	bl	1000f4fc <__clzsi2>
1000eb82:	1c03      	adds	r3, r0, #0
1000eb84:	3320      	adds	r3, #32
1000eb86:	2b27      	cmp	r3, #39	; 0x27
1000eb88:	dc00      	bgt.n	1000eb8c <__aeabi_dmul+0x404>
1000eb8a:	e6a6      	b.n	1000e8da <__aeabi_dmul+0x152>
1000eb8c:	4655      	mov	r5, sl
1000eb8e:	3808      	subs	r0, #8
1000eb90:	4085      	lsls	r5, r0
1000eb92:	2200      	movs	r2, #0
1000eb94:	e6ac      	b.n	1000e8f0 <__aeabi_dmul+0x168>
1000eb96:	1c28      	adds	r0, r5, #0
1000eb98:	f000 fcb0 	bl	1000f4fc <__clzsi2>
1000eb9c:	1c02      	adds	r2, r0, #0
1000eb9e:	3220      	adds	r2, #32
1000eba0:	2a27      	cmp	r2, #39	; 0x27
1000eba2:	dc00      	bgt.n	1000eba6 <__aeabi_dmul+0x41e>
1000eba4:	e675      	b.n	1000e892 <__aeabi_dmul+0x10a>
1000eba6:	3808      	subs	r0, #8
1000eba8:	4085      	lsls	r5, r0
1000ebaa:	2600      	movs	r6, #0
1000ebac:	46ab      	mov	fp, r5
1000ebae:	e67d      	b.n	1000e8ac <__aeabi_dmul+0x124>
1000ebb0:	465a      	mov	r2, fp
1000ebb2:	08f6      	lsrs	r6, r6, #3
1000ebb4:	0752      	lsls	r2, r2, #29
1000ebb6:	4316      	orrs	r6, r2
1000ebb8:	465a      	mov	r2, fp
1000ebba:	2401      	movs	r4, #1
1000ebbc:	0255      	lsls	r5, r2, #9
1000ebbe:	9a02      	ldr	r2, [sp, #8]
1000ebc0:	055b      	lsls	r3, r3, #21
1000ebc2:	0b2d      	lsrs	r5, r5, #12
1000ebc4:	0d5b      	lsrs	r3, r3, #21
1000ebc6:	4014      	ands	r4, r2
1000ebc8:	e642      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000ebca:	4d38      	ldr	r5, [pc, #224]	; (1000ecac <__aeabi_dmul+0x524>)
1000ebcc:	1bed      	subs	r5, r5, r7
1000ebce:	2d38      	cmp	r5, #56	; 0x38
1000ebd0:	dd0a      	ble.n	1000ebe8 <__aeabi_dmul+0x460>
1000ebd2:	2401      	movs	r4, #1
1000ebd4:	9b02      	ldr	r3, [sp, #8]
1000ebd6:	2500      	movs	r5, #0
1000ebd8:	401c      	ands	r4, r3
1000ebda:	2600      	movs	r6, #0
1000ebdc:	2300      	movs	r3, #0
1000ebde:	e637      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000ebe0:	9b01      	ldr	r3, [sp, #4]
1000ebe2:	4657      	mov	r7, sl
1000ebe4:	9302      	str	r3, [sp, #8]
1000ebe6:	e791      	b.n	1000eb0c <__aeabi_dmul+0x384>
1000ebe8:	2d1f      	cmp	r5, #31
1000ebea:	dc25      	bgt.n	1000ec38 <__aeabi_dmul+0x4b0>
1000ebec:	4b30      	ldr	r3, [pc, #192]	; (1000ecb0 <__aeabi_dmul+0x528>)
1000ebee:	1c32      	adds	r2, r6, #0
1000ebf0:	469c      	mov	ip, r3
1000ebf2:	4467      	add	r7, ip
1000ebf4:	40be      	lsls	r6, r7
1000ebf6:	465b      	mov	r3, fp
1000ebf8:	40bb      	lsls	r3, r7
1000ebfa:	1c37      	adds	r7, r6, #0
1000ebfc:	40ea      	lsrs	r2, r5
1000ebfe:	1e7e      	subs	r6, r7, #1
1000ec00:	41b7      	sbcs	r7, r6
1000ec02:	4313      	orrs	r3, r2
1000ec04:	433b      	orrs	r3, r7
1000ec06:	1c1e      	adds	r6, r3, #0
1000ec08:	465b      	mov	r3, fp
1000ec0a:	40eb      	lsrs	r3, r5
1000ec0c:	1c1d      	adds	r5, r3, #0
1000ec0e:	0773      	lsls	r3, r6, #29
1000ec10:	d009      	beq.n	1000ec26 <__aeabi_dmul+0x49e>
1000ec12:	230f      	movs	r3, #15
1000ec14:	4033      	ands	r3, r6
1000ec16:	2b04      	cmp	r3, #4
1000ec18:	d005      	beq.n	1000ec26 <__aeabi_dmul+0x49e>
1000ec1a:	1d33      	adds	r3, r6, #4
1000ec1c:	42b3      	cmp	r3, r6
1000ec1e:	41b6      	sbcs	r6, r6
1000ec20:	4276      	negs	r6, r6
1000ec22:	19ad      	adds	r5, r5, r6
1000ec24:	1c1e      	adds	r6, r3, #0
1000ec26:	022b      	lsls	r3, r5, #8
1000ec28:	d520      	bpl.n	1000ec6c <__aeabi_dmul+0x4e4>
1000ec2a:	2401      	movs	r4, #1
1000ec2c:	9b02      	ldr	r3, [sp, #8]
1000ec2e:	2500      	movs	r5, #0
1000ec30:	401c      	ands	r4, r3
1000ec32:	2600      	movs	r6, #0
1000ec34:	2301      	movs	r3, #1
1000ec36:	e60b      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000ec38:	465a      	mov	r2, fp
1000ec3a:	4b1e      	ldr	r3, [pc, #120]	; (1000ecb4 <__aeabi_dmul+0x52c>)
1000ec3c:	1bdb      	subs	r3, r3, r7
1000ec3e:	40da      	lsrs	r2, r3
1000ec40:	1c13      	adds	r3, r2, #0
1000ec42:	2d20      	cmp	r5, #32
1000ec44:	d01c      	beq.n	1000ec80 <__aeabi_dmul+0x4f8>
1000ec46:	4a1c      	ldr	r2, [pc, #112]	; (1000ecb8 <__aeabi_dmul+0x530>)
1000ec48:	4694      	mov	ip, r2
1000ec4a:	465a      	mov	r2, fp
1000ec4c:	4467      	add	r7, ip
1000ec4e:	40ba      	lsls	r2, r7
1000ec50:	1c17      	adds	r7, r2, #0
1000ec52:	433e      	orrs	r6, r7
1000ec54:	1e72      	subs	r2, r6, #1
1000ec56:	4196      	sbcs	r6, r2
1000ec58:	431e      	orrs	r6, r3
1000ec5a:	2307      	movs	r3, #7
1000ec5c:	2500      	movs	r5, #0
1000ec5e:	4033      	ands	r3, r6
1000ec60:	d007      	beq.n	1000ec72 <__aeabi_dmul+0x4ea>
1000ec62:	230f      	movs	r3, #15
1000ec64:	2500      	movs	r5, #0
1000ec66:	4033      	ands	r3, r6
1000ec68:	2b04      	cmp	r3, #4
1000ec6a:	d1d6      	bne.n	1000ec1a <__aeabi_dmul+0x492>
1000ec6c:	076b      	lsls	r3, r5, #29
1000ec6e:	026d      	lsls	r5, r5, #9
1000ec70:	0b2d      	lsrs	r5, r5, #12
1000ec72:	2401      	movs	r4, #1
1000ec74:	08f6      	lsrs	r6, r6, #3
1000ec76:	431e      	orrs	r6, r3
1000ec78:	9b02      	ldr	r3, [sp, #8]
1000ec7a:	401c      	ands	r4, r3
1000ec7c:	2300      	movs	r3, #0
1000ec7e:	e5e7      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000ec80:	2700      	movs	r7, #0
1000ec82:	e7e6      	b.n	1000ec52 <__aeabi_dmul+0x4ca>
1000ec84:	2580      	movs	r5, #128	; 0x80
1000ec86:	465b      	mov	r3, fp
1000ec88:	2401      	movs	r4, #1
1000ec8a:	032d      	lsls	r5, r5, #12
1000ec8c:	431d      	orrs	r5, r3
1000ec8e:	9b01      	ldr	r3, [sp, #4]
1000ec90:	032d      	lsls	r5, r5, #12
1000ec92:	4023      	ands	r3, r4
1000ec94:	1c1c      	adds	r4, r3, #0
1000ec96:	0b2d      	lsrs	r5, r5, #12
1000ec98:	4b03      	ldr	r3, [pc, #12]	; (1000eca8 <__aeabi_dmul+0x520>)
1000ec9a:	e5d9      	b.n	1000e850 <__aeabi_dmul+0xc8>
1000ec9c:	000003ff 	.word	0x000003ff
1000eca0:	feffffff 	.word	0xfeffffff
1000eca4:	000007fe 	.word	0x000007fe
1000eca8:	000007ff 	.word	0x000007ff
1000ecac:	fffffc02 	.word	0xfffffc02
1000ecb0:	0000041e 	.word	0x0000041e
1000ecb4:	fffffbe2 	.word	0xfffffbe2
1000ecb8:	0000043e 	.word	0x0000043e

1000ecbc <__aeabi_dsub>:
1000ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ecbe:	464d      	mov	r5, r9
1000ecc0:	4644      	mov	r4, r8
1000ecc2:	465f      	mov	r7, fp
1000ecc4:	4656      	mov	r6, sl
1000ecc6:	b4f0      	push	{r4, r5, r6, r7}
1000ecc8:	1c0e      	adds	r6, r1, #0
1000ecca:	1c11      	adds	r1, r2, #0
1000eccc:	0332      	lsls	r2, r6, #12
1000ecce:	0a52      	lsrs	r2, r2, #9
1000ecd0:	0f47      	lsrs	r7, r0, #29
1000ecd2:	4317      	orrs	r7, r2
1000ecd4:	00c5      	lsls	r5, r0, #3
1000ecd6:	031a      	lsls	r2, r3, #12
1000ecd8:	0058      	lsls	r0, r3, #1
1000ecda:	0fdb      	lsrs	r3, r3, #31
1000ecdc:	4699      	mov	r9, r3
1000ecde:	0a52      	lsrs	r2, r2, #9
1000ece0:	0f4b      	lsrs	r3, r1, #29
1000ece2:	b083      	sub	sp, #12
1000ece4:	431a      	orrs	r2, r3
1000ece6:	00cb      	lsls	r3, r1, #3
1000ece8:	9301      	str	r3, [sp, #4]
1000ecea:	4bcf      	ldr	r3, [pc, #828]	; (1000f028 <__aeabi_dsub+0x36c>)
1000ecec:	0074      	lsls	r4, r6, #1
1000ecee:	0ff6      	lsrs	r6, r6, #31
1000ecf0:	0d64      	lsrs	r4, r4, #21
1000ecf2:	46b0      	mov	r8, r6
1000ecf4:	0d40      	lsrs	r0, r0, #21
1000ecf6:	4298      	cmp	r0, r3
1000ecf8:	d100      	bne.n	1000ecfc <__aeabi_dsub+0x40>
1000ecfa:	e0e8      	b.n	1000eece <__aeabi_dsub+0x212>
1000ecfc:	2301      	movs	r3, #1
1000ecfe:	4649      	mov	r1, r9
1000ed00:	4059      	eors	r1, r3
1000ed02:	1c0b      	adds	r3, r1, #0
1000ed04:	429e      	cmp	r6, r3
1000ed06:	d100      	bne.n	1000ed0a <__aeabi_dsub+0x4e>
1000ed08:	e0b1      	b.n	1000ee6e <__aeabi_dsub+0x1b2>
1000ed0a:	1a26      	subs	r6, r4, r0
1000ed0c:	2e00      	cmp	r6, #0
1000ed0e:	dc00      	bgt.n	1000ed12 <__aeabi_dsub+0x56>
1000ed10:	e11c      	b.n	1000ef4c <__aeabi_dsub+0x290>
1000ed12:	2800      	cmp	r0, #0
1000ed14:	d142      	bne.n	1000ed9c <__aeabi_dsub+0xe0>
1000ed16:	1c13      	adds	r3, r2, #0
1000ed18:	9901      	ldr	r1, [sp, #4]
1000ed1a:	430b      	orrs	r3, r1
1000ed1c:	d000      	beq.n	1000ed20 <__aeabi_dsub+0x64>
1000ed1e:	e0e6      	b.n	1000eeee <__aeabi_dsub+0x232>
1000ed20:	076b      	lsls	r3, r5, #29
1000ed22:	d100      	bne.n	1000ed26 <__aeabi_dsub+0x6a>
1000ed24:	e08e      	b.n	1000ee44 <__aeabi_dsub+0x188>
1000ed26:	230f      	movs	r3, #15
1000ed28:	402b      	ands	r3, r5
1000ed2a:	2b04      	cmp	r3, #4
1000ed2c:	d100      	bne.n	1000ed30 <__aeabi_dsub+0x74>
1000ed2e:	e089      	b.n	1000ee44 <__aeabi_dsub+0x188>
1000ed30:	1d2a      	adds	r2, r5, #4
1000ed32:	42aa      	cmp	r2, r5
1000ed34:	41ad      	sbcs	r5, r5
1000ed36:	2380      	movs	r3, #128	; 0x80
1000ed38:	2601      	movs	r6, #1
1000ed3a:	4641      	mov	r1, r8
1000ed3c:	426d      	negs	r5, r5
1000ed3e:	197f      	adds	r7, r7, r5
1000ed40:	041b      	lsls	r3, r3, #16
1000ed42:	403b      	ands	r3, r7
1000ed44:	400e      	ands	r6, r1
1000ed46:	1c15      	adds	r5, r2, #0
1000ed48:	2b00      	cmp	r3, #0
1000ed4a:	d100      	bne.n	1000ed4e <__aeabi_dsub+0x92>
1000ed4c:	e083      	b.n	1000ee56 <__aeabi_dsub+0x19a>
1000ed4e:	4bb6      	ldr	r3, [pc, #728]	; (1000f028 <__aeabi_dsub+0x36c>)
1000ed50:	3401      	adds	r4, #1
1000ed52:	429c      	cmp	r4, r3
1000ed54:	d100      	bne.n	1000ed58 <__aeabi_dsub+0x9c>
1000ed56:	e116      	b.n	1000ef86 <__aeabi_dsub+0x2ca>
1000ed58:	1c3a      	adds	r2, r7, #0
1000ed5a:	4bb4      	ldr	r3, [pc, #720]	; (1000f02c <__aeabi_dsub+0x370>)
1000ed5c:	08ed      	lsrs	r5, r5, #3
1000ed5e:	401a      	ands	r2, r3
1000ed60:	0750      	lsls	r0, r2, #29
1000ed62:	0564      	lsls	r4, r4, #21
1000ed64:	0252      	lsls	r2, r2, #9
1000ed66:	4305      	orrs	r5, r0
1000ed68:	0b12      	lsrs	r2, r2, #12
1000ed6a:	0d64      	lsrs	r4, r4, #21
1000ed6c:	2100      	movs	r1, #0
1000ed6e:	0312      	lsls	r2, r2, #12
1000ed70:	0d0b      	lsrs	r3, r1, #20
1000ed72:	051b      	lsls	r3, r3, #20
1000ed74:	0564      	lsls	r4, r4, #21
1000ed76:	0b12      	lsrs	r2, r2, #12
1000ed78:	431a      	orrs	r2, r3
1000ed7a:	0863      	lsrs	r3, r4, #1
1000ed7c:	4cac      	ldr	r4, [pc, #688]	; (1000f030 <__aeabi_dsub+0x374>)
1000ed7e:	07f6      	lsls	r6, r6, #31
1000ed80:	4014      	ands	r4, r2
1000ed82:	431c      	orrs	r4, r3
1000ed84:	0064      	lsls	r4, r4, #1
1000ed86:	0864      	lsrs	r4, r4, #1
1000ed88:	4334      	orrs	r4, r6
1000ed8a:	1c28      	adds	r0, r5, #0
1000ed8c:	1c21      	adds	r1, r4, #0
1000ed8e:	b003      	add	sp, #12
1000ed90:	bc3c      	pop	{r2, r3, r4, r5}
1000ed92:	4690      	mov	r8, r2
1000ed94:	4699      	mov	r9, r3
1000ed96:	46a2      	mov	sl, r4
1000ed98:	46ab      	mov	fp, r5
1000ed9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed9c:	4ba2      	ldr	r3, [pc, #648]	; (1000f028 <__aeabi_dsub+0x36c>)
1000ed9e:	429c      	cmp	r4, r3
1000eda0:	d0be      	beq.n	1000ed20 <__aeabi_dsub+0x64>
1000eda2:	2380      	movs	r3, #128	; 0x80
1000eda4:	041b      	lsls	r3, r3, #16
1000eda6:	431a      	orrs	r2, r3
1000eda8:	2e38      	cmp	r6, #56	; 0x38
1000edaa:	dd00      	ble.n	1000edae <__aeabi_dsub+0xf2>
1000edac:	e103      	b.n	1000efb6 <__aeabi_dsub+0x2fa>
1000edae:	2e1f      	cmp	r6, #31
1000edb0:	dd00      	ble.n	1000edb4 <__aeabi_dsub+0xf8>
1000edb2:	e13f      	b.n	1000f034 <__aeabi_dsub+0x378>
1000edb4:	2020      	movs	r0, #32
1000edb6:	1b83      	subs	r3, r0, r6
1000edb8:	4699      	mov	r9, r3
1000edba:	1c13      	adds	r3, r2, #0
1000edbc:	4649      	mov	r1, r9
1000edbe:	408b      	lsls	r3, r1
1000edc0:	469c      	mov	ip, r3
1000edc2:	9b01      	ldr	r3, [sp, #4]
1000edc4:	4660      	mov	r0, ip
1000edc6:	40f3      	lsrs	r3, r6
1000edc8:	4303      	orrs	r3, r0
1000edca:	9801      	ldr	r0, [sp, #4]
1000edcc:	40f2      	lsrs	r2, r6
1000edce:	4088      	lsls	r0, r1
1000edd0:	1c01      	adds	r1, r0, #0
1000edd2:	1e48      	subs	r0, r1, #1
1000edd4:	4181      	sbcs	r1, r0
1000edd6:	430b      	orrs	r3, r1
1000edd8:	1aeb      	subs	r3, r5, r3
1000edda:	429d      	cmp	r5, r3
1000eddc:	4180      	sbcs	r0, r0
1000edde:	1c1d      	adds	r5, r3, #0
1000ede0:	1aba      	subs	r2, r7, r2
1000ede2:	4240      	negs	r0, r0
1000ede4:	1a17      	subs	r7, r2, r0
1000ede6:	023b      	lsls	r3, r7, #8
1000ede8:	d400      	bmi.n	1000edec <__aeabi_dsub+0x130>
1000edea:	e0a8      	b.n	1000ef3e <__aeabi_dsub+0x282>
1000edec:	027a      	lsls	r2, r7, #9
1000edee:	0a56      	lsrs	r6, r2, #9
1000edf0:	2e00      	cmp	r6, #0
1000edf2:	d100      	bne.n	1000edf6 <__aeabi_dsub+0x13a>
1000edf4:	e0ca      	b.n	1000ef8c <__aeabi_dsub+0x2d0>
1000edf6:	1c30      	adds	r0, r6, #0
1000edf8:	f000 fb80 	bl	1000f4fc <__clzsi2>
1000edfc:	1c03      	adds	r3, r0, #0
1000edfe:	3b08      	subs	r3, #8
1000ee00:	2b1f      	cmp	r3, #31
1000ee02:	dd00      	ble.n	1000ee06 <__aeabi_dsub+0x14a>
1000ee04:	e0cb      	b.n	1000ef9e <__aeabi_dsub+0x2e2>
1000ee06:	2228      	movs	r2, #40	; 0x28
1000ee08:	1c29      	adds	r1, r5, #0
1000ee0a:	1a12      	subs	r2, r2, r0
1000ee0c:	40d1      	lsrs	r1, r2
1000ee0e:	409e      	lsls	r6, r3
1000ee10:	1c0a      	adds	r2, r1, #0
1000ee12:	409d      	lsls	r5, r3
1000ee14:	4332      	orrs	r2, r6
1000ee16:	429c      	cmp	r4, r3
1000ee18:	dd00      	ble.n	1000ee1c <__aeabi_dsub+0x160>
1000ee1a:	e0c8      	b.n	1000efae <__aeabi_dsub+0x2f2>
1000ee1c:	1b1c      	subs	r4, r3, r4
1000ee1e:	1c67      	adds	r7, r4, #1
1000ee20:	2f1f      	cmp	r7, #31
1000ee22:	dd00      	ble.n	1000ee26 <__aeabi_dsub+0x16a>
1000ee24:	e0ed      	b.n	1000f002 <__aeabi_dsub+0x346>
1000ee26:	231f      	movs	r3, #31
1000ee28:	1c29      	adds	r1, r5, #0
1000ee2a:	1b1c      	subs	r4, r3, r4
1000ee2c:	1c13      	adds	r3, r2, #0
1000ee2e:	40a5      	lsls	r5, r4
1000ee30:	40a3      	lsls	r3, r4
1000ee32:	40f9      	lsrs	r1, r7
1000ee34:	1e6c      	subs	r4, r5, #1
1000ee36:	41a5      	sbcs	r5, r4
1000ee38:	40fa      	lsrs	r2, r7
1000ee3a:	4319      	orrs	r1, r3
1000ee3c:	430d      	orrs	r5, r1
1000ee3e:	1c17      	adds	r7, r2, #0
1000ee40:	2400      	movs	r4, #0
1000ee42:	e76d      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000ee44:	2380      	movs	r3, #128	; 0x80
1000ee46:	2601      	movs	r6, #1
1000ee48:	4642      	mov	r2, r8
1000ee4a:	041b      	lsls	r3, r3, #16
1000ee4c:	403b      	ands	r3, r7
1000ee4e:	4016      	ands	r6, r2
1000ee50:	2b00      	cmp	r3, #0
1000ee52:	d000      	beq.n	1000ee56 <__aeabi_dsub+0x19a>
1000ee54:	e77b      	b.n	1000ed4e <__aeabi_dsub+0x92>
1000ee56:	4b74      	ldr	r3, [pc, #464]	; (1000f028 <__aeabi_dsub+0x36c>)
1000ee58:	08ed      	lsrs	r5, r5, #3
1000ee5a:	0778      	lsls	r0, r7, #29
1000ee5c:	4305      	orrs	r5, r0
1000ee5e:	08fa      	lsrs	r2, r7, #3
1000ee60:	429c      	cmp	r4, r3
1000ee62:	d03b      	beq.n	1000eedc <__aeabi_dsub+0x220>
1000ee64:	0312      	lsls	r2, r2, #12
1000ee66:	0564      	lsls	r4, r4, #21
1000ee68:	0b12      	lsrs	r2, r2, #12
1000ee6a:	0d64      	lsrs	r4, r4, #21
1000ee6c:	e77e      	b.n	1000ed6c <__aeabi_dsub+0xb0>
1000ee6e:	1a23      	subs	r3, r4, r0
1000ee70:	469a      	mov	sl, r3
1000ee72:	2b00      	cmp	r3, #0
1000ee74:	dc00      	bgt.n	1000ee78 <__aeabi_dsub+0x1bc>
1000ee76:	e0a5      	b.n	1000efc4 <__aeabi_dsub+0x308>
1000ee78:	2800      	cmp	r0, #0
1000ee7a:	d044      	beq.n	1000ef06 <__aeabi_dsub+0x24a>
1000ee7c:	486a      	ldr	r0, [pc, #424]	; (1000f028 <__aeabi_dsub+0x36c>)
1000ee7e:	4284      	cmp	r4, r0
1000ee80:	d100      	bne.n	1000ee84 <__aeabi_dsub+0x1c8>
1000ee82:	e74d      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000ee84:	2080      	movs	r0, #128	; 0x80
1000ee86:	0400      	lsls	r0, r0, #16
1000ee88:	4302      	orrs	r2, r0
1000ee8a:	4653      	mov	r3, sl
1000ee8c:	2b38      	cmp	r3, #56	; 0x38
1000ee8e:	dc00      	bgt.n	1000ee92 <__aeabi_dsub+0x1d6>
1000ee90:	e11c      	b.n	1000f0cc <__aeabi_dsub+0x410>
1000ee92:	9b01      	ldr	r3, [sp, #4]
1000ee94:	431a      	orrs	r2, r3
1000ee96:	1e51      	subs	r1, r2, #1
1000ee98:	418a      	sbcs	r2, r1
1000ee9a:	b2d1      	uxtb	r1, r2
1000ee9c:	2200      	movs	r2, #0
1000ee9e:	1949      	adds	r1, r1, r5
1000eea0:	42a9      	cmp	r1, r5
1000eea2:	4180      	sbcs	r0, r0
1000eea4:	1c0d      	adds	r5, r1, #0
1000eea6:	19d2      	adds	r2, r2, r7
1000eea8:	4240      	negs	r0, r0
1000eeaa:	1817      	adds	r7, r2, r0
1000eeac:	023b      	lsls	r3, r7, #8
1000eeae:	d546      	bpl.n	1000ef3e <__aeabi_dsub+0x282>
1000eeb0:	4b5d      	ldr	r3, [pc, #372]	; (1000f028 <__aeabi_dsub+0x36c>)
1000eeb2:	3401      	adds	r4, #1
1000eeb4:	429c      	cmp	r4, r3
1000eeb6:	d100      	bne.n	1000eeba <__aeabi_dsub+0x1fe>
1000eeb8:	e169      	b.n	1000f18e <__aeabi_dsub+0x4d2>
1000eeba:	2001      	movs	r0, #1
1000eebc:	4a5b      	ldr	r2, [pc, #364]	; (1000f02c <__aeabi_dsub+0x370>)
1000eebe:	086b      	lsrs	r3, r5, #1
1000eec0:	403a      	ands	r2, r7
1000eec2:	4028      	ands	r0, r5
1000eec4:	4318      	orrs	r0, r3
1000eec6:	07d5      	lsls	r5, r2, #31
1000eec8:	4305      	orrs	r5, r0
1000eeca:	0857      	lsrs	r7, r2, #1
1000eecc:	e728      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000eece:	1c13      	adds	r3, r2, #0
1000eed0:	9901      	ldr	r1, [sp, #4]
1000eed2:	430b      	orrs	r3, r1
1000eed4:	d100      	bne.n	1000eed8 <__aeabi_dsub+0x21c>
1000eed6:	e711      	b.n	1000ecfc <__aeabi_dsub+0x40>
1000eed8:	464b      	mov	r3, r9
1000eeda:	e713      	b.n	1000ed04 <__aeabi_dsub+0x48>
1000eedc:	1c2b      	adds	r3, r5, #0
1000eede:	4313      	orrs	r3, r2
1000eee0:	d051      	beq.n	1000ef86 <__aeabi_dsub+0x2ca>
1000eee2:	2380      	movs	r3, #128	; 0x80
1000eee4:	031b      	lsls	r3, r3, #12
1000eee6:	431a      	orrs	r2, r3
1000eee8:	0312      	lsls	r2, r2, #12
1000eeea:	0b12      	lsrs	r2, r2, #12
1000eeec:	e73e      	b.n	1000ed6c <__aeabi_dsub+0xb0>
1000eeee:	3e01      	subs	r6, #1
1000eef0:	2e00      	cmp	r6, #0
1000eef2:	d000      	beq.n	1000eef6 <__aeabi_dsub+0x23a>
1000eef4:	e080      	b.n	1000eff8 <__aeabi_dsub+0x33c>
1000eef6:	1a69      	subs	r1, r5, r1
1000eef8:	428d      	cmp	r5, r1
1000eefa:	419b      	sbcs	r3, r3
1000eefc:	1aba      	subs	r2, r7, r2
1000eefe:	425b      	negs	r3, r3
1000ef00:	1ad7      	subs	r7, r2, r3
1000ef02:	1c0d      	adds	r5, r1, #0
1000ef04:	e76f      	b.n	1000ede6 <__aeabi_dsub+0x12a>
1000ef06:	1c10      	adds	r0, r2, #0
1000ef08:	9b01      	ldr	r3, [sp, #4]
1000ef0a:	4318      	orrs	r0, r3
1000ef0c:	d100      	bne.n	1000ef10 <__aeabi_dsub+0x254>
1000ef0e:	e707      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000ef10:	2301      	movs	r3, #1
1000ef12:	425b      	negs	r3, r3
1000ef14:	469c      	mov	ip, r3
1000ef16:	44e2      	add	sl, ip
1000ef18:	4653      	mov	r3, sl
1000ef1a:	2b00      	cmp	r3, #0
1000ef1c:	d000      	beq.n	1000ef20 <__aeabi_dsub+0x264>
1000ef1e:	e102      	b.n	1000f126 <__aeabi_dsub+0x46a>
1000ef20:	9b01      	ldr	r3, [sp, #4]
1000ef22:	19d2      	adds	r2, r2, r7
1000ef24:	1959      	adds	r1, r3, r5
1000ef26:	42a9      	cmp	r1, r5
1000ef28:	419b      	sbcs	r3, r3
1000ef2a:	425b      	negs	r3, r3
1000ef2c:	18d7      	adds	r7, r2, r3
1000ef2e:	1c0d      	adds	r5, r1, #0
1000ef30:	e7bc      	b.n	1000eeac <__aeabi_dsub+0x1f0>
1000ef32:	4663      	mov	r3, ip
1000ef34:	4303      	orrs	r3, r0
1000ef36:	d100      	bne.n	1000ef3a <__aeabi_dsub+0x27e>
1000ef38:	e128      	b.n	1000f18c <__aeabi_dsub+0x4d0>
1000ef3a:	1c07      	adds	r7, r0, #0
1000ef3c:	4665      	mov	r5, ip
1000ef3e:	076b      	lsls	r3, r5, #29
1000ef40:	d000      	beq.n	1000ef44 <__aeabi_dsub+0x288>
1000ef42:	e6f0      	b.n	1000ed26 <__aeabi_dsub+0x6a>
1000ef44:	2601      	movs	r6, #1
1000ef46:	4643      	mov	r3, r8
1000ef48:	401e      	ands	r6, r3
1000ef4a:	e784      	b.n	1000ee56 <__aeabi_dsub+0x19a>
1000ef4c:	2e00      	cmp	r6, #0
1000ef4e:	d000      	beq.n	1000ef52 <__aeabi_dsub+0x296>
1000ef50:	e081      	b.n	1000f056 <__aeabi_dsub+0x39a>
1000ef52:	1c60      	adds	r0, r4, #1
1000ef54:	0540      	lsls	r0, r0, #21
1000ef56:	0d40      	lsrs	r0, r0, #21
1000ef58:	2801      	cmp	r0, #1
1000ef5a:	dc00      	bgt.n	1000ef5e <__aeabi_dsub+0x2a2>
1000ef5c:	e107      	b.n	1000f16e <__aeabi_dsub+0x4b2>
1000ef5e:	9901      	ldr	r1, [sp, #4]
1000ef60:	1a68      	subs	r0, r5, r1
1000ef62:	4684      	mov	ip, r0
1000ef64:	4565      	cmp	r5, ip
1000ef66:	41b6      	sbcs	r6, r6
1000ef68:	1ab8      	subs	r0, r7, r2
1000ef6a:	4276      	negs	r6, r6
1000ef6c:	1b86      	subs	r6, r0, r6
1000ef6e:	0230      	lsls	r0, r6, #8
1000ef70:	d400      	bmi.n	1000ef74 <__aeabi_dsub+0x2b8>
1000ef72:	e0a1      	b.n	1000f0b8 <__aeabi_dsub+0x3fc>
1000ef74:	468c      	mov	ip, r1
1000ef76:	1b4d      	subs	r5, r1, r5
1000ef78:	45ac      	cmp	ip, r5
1000ef7a:	4189      	sbcs	r1, r1
1000ef7c:	1bd2      	subs	r2, r2, r7
1000ef7e:	4249      	negs	r1, r1
1000ef80:	1a56      	subs	r6, r2, r1
1000ef82:	4698      	mov	r8, r3
1000ef84:	e734      	b.n	1000edf0 <__aeabi_dsub+0x134>
1000ef86:	2200      	movs	r2, #0
1000ef88:	2500      	movs	r5, #0
1000ef8a:	e6ef      	b.n	1000ed6c <__aeabi_dsub+0xb0>
1000ef8c:	1c28      	adds	r0, r5, #0
1000ef8e:	f000 fab5 	bl	1000f4fc <__clzsi2>
1000ef92:	3020      	adds	r0, #32
1000ef94:	1c03      	adds	r3, r0, #0
1000ef96:	3b08      	subs	r3, #8
1000ef98:	2b1f      	cmp	r3, #31
1000ef9a:	dc00      	bgt.n	1000ef9e <__aeabi_dsub+0x2e2>
1000ef9c:	e733      	b.n	1000ee06 <__aeabi_dsub+0x14a>
1000ef9e:	1c02      	adds	r2, r0, #0
1000efa0:	3a28      	subs	r2, #40	; 0x28
1000efa2:	4095      	lsls	r5, r2
1000efa4:	1c2a      	adds	r2, r5, #0
1000efa6:	2500      	movs	r5, #0
1000efa8:	429c      	cmp	r4, r3
1000efaa:	dc00      	bgt.n	1000efae <__aeabi_dsub+0x2f2>
1000efac:	e736      	b.n	1000ee1c <__aeabi_dsub+0x160>
1000efae:	4f1f      	ldr	r7, [pc, #124]	; (1000f02c <__aeabi_dsub+0x370>)
1000efb0:	1ae4      	subs	r4, r4, r3
1000efb2:	4017      	ands	r7, r2
1000efb4:	e6b4      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000efb6:	9b01      	ldr	r3, [sp, #4]
1000efb8:	431a      	orrs	r2, r3
1000efba:	1e51      	subs	r1, r2, #1
1000efbc:	418a      	sbcs	r2, r1
1000efbe:	b2d3      	uxtb	r3, r2
1000efc0:	2200      	movs	r2, #0
1000efc2:	e709      	b.n	1000edd8 <__aeabi_dsub+0x11c>
1000efc4:	2b00      	cmp	r3, #0
1000efc6:	d000      	beq.n	1000efca <__aeabi_dsub+0x30e>
1000efc8:	e101      	b.n	1000f1ce <__aeabi_dsub+0x512>
1000efca:	1c60      	adds	r0, r4, #1
1000efcc:	0543      	lsls	r3, r0, #21
1000efce:	0d5b      	lsrs	r3, r3, #21
1000efd0:	2b01      	cmp	r3, #1
1000efd2:	dc00      	bgt.n	1000efd6 <__aeabi_dsub+0x31a>
1000efd4:	e0b0      	b.n	1000f138 <__aeabi_dsub+0x47c>
1000efd6:	4b14      	ldr	r3, [pc, #80]	; (1000f028 <__aeabi_dsub+0x36c>)
1000efd8:	4298      	cmp	r0, r3
1000efda:	d100      	bne.n	1000efde <__aeabi_dsub+0x322>
1000efdc:	e11e      	b.n	1000f21c <__aeabi_dsub+0x560>
1000efde:	9b01      	ldr	r3, [sp, #4]
1000efe0:	19d2      	adds	r2, r2, r7
1000efe2:	1959      	adds	r1, r3, r5
1000efe4:	42a9      	cmp	r1, r5
1000efe6:	419b      	sbcs	r3, r3
1000efe8:	425b      	negs	r3, r3
1000efea:	18d2      	adds	r2, r2, r3
1000efec:	0849      	lsrs	r1, r1, #1
1000efee:	07d5      	lsls	r5, r2, #31
1000eff0:	430d      	orrs	r5, r1
1000eff2:	0857      	lsrs	r7, r2, #1
1000eff4:	1c04      	adds	r4, r0, #0
1000eff6:	e693      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000eff8:	4b0b      	ldr	r3, [pc, #44]	; (1000f028 <__aeabi_dsub+0x36c>)
1000effa:	429c      	cmp	r4, r3
1000effc:	d000      	beq.n	1000f000 <__aeabi_dsub+0x344>
1000effe:	e6d3      	b.n	1000eda8 <__aeabi_dsub+0xec>
1000f000:	e68e      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f002:	1c21      	adds	r1, r4, #0
1000f004:	1c13      	adds	r3, r2, #0
1000f006:	391f      	subs	r1, #31
1000f008:	40cb      	lsrs	r3, r1
1000f00a:	1c19      	adds	r1, r3, #0
1000f00c:	2f20      	cmp	r7, #32
1000f00e:	d100      	bne.n	1000f012 <__aeabi_dsub+0x356>
1000f010:	e08e      	b.n	1000f130 <__aeabi_dsub+0x474>
1000f012:	233f      	movs	r3, #63	; 0x3f
1000f014:	1b1c      	subs	r4, r3, r4
1000f016:	40a2      	lsls	r2, r4
1000f018:	4315      	orrs	r5, r2
1000f01a:	1e6a      	subs	r2, r5, #1
1000f01c:	4195      	sbcs	r5, r2
1000f01e:	2700      	movs	r7, #0
1000f020:	430d      	orrs	r5, r1
1000f022:	2400      	movs	r4, #0
1000f024:	e78b      	b.n	1000ef3e <__aeabi_dsub+0x282>
1000f026:	46c0      	nop			; (mov r8, r8)
1000f028:	000007ff 	.word	0x000007ff
1000f02c:	ff7fffff 	.word	0xff7fffff
1000f030:	800fffff 	.word	0x800fffff
1000f034:	1c33      	adds	r3, r6, #0
1000f036:	1c10      	adds	r0, r2, #0
1000f038:	3b20      	subs	r3, #32
1000f03a:	40d8      	lsrs	r0, r3
1000f03c:	2e20      	cmp	r6, #32
1000f03e:	d079      	beq.n	1000f134 <__aeabi_dsub+0x478>
1000f040:	2340      	movs	r3, #64	; 0x40
1000f042:	1b9b      	subs	r3, r3, r6
1000f044:	409a      	lsls	r2, r3
1000f046:	1c13      	adds	r3, r2, #0
1000f048:	9a01      	ldr	r2, [sp, #4]
1000f04a:	4313      	orrs	r3, r2
1000f04c:	1e59      	subs	r1, r3, #1
1000f04e:	418b      	sbcs	r3, r1
1000f050:	2200      	movs	r2, #0
1000f052:	4303      	orrs	r3, r0
1000f054:	e6c0      	b.n	1000edd8 <__aeabi_dsub+0x11c>
1000f056:	2c00      	cmp	r4, #0
1000f058:	d053      	beq.n	1000f102 <__aeabi_dsub+0x446>
1000f05a:	4cc7      	ldr	r4, [pc, #796]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f05c:	42a0      	cmp	r0, r4
1000f05e:	d100      	bne.n	1000f062 <__aeabi_dsub+0x3a6>
1000f060:	e0b0      	b.n	1000f1c4 <__aeabi_dsub+0x508>
1000f062:	2480      	movs	r4, #128	; 0x80
1000f064:	4271      	negs	r1, r6
1000f066:	4689      	mov	r9, r1
1000f068:	0424      	lsls	r4, r4, #16
1000f06a:	4327      	orrs	r7, r4
1000f06c:	4649      	mov	r1, r9
1000f06e:	2938      	cmp	r1, #56	; 0x38
1000f070:	dd00      	ble.n	1000f074 <__aeabi_dsub+0x3b8>
1000f072:	e0cd      	b.n	1000f210 <__aeabi_dsub+0x554>
1000f074:	291f      	cmp	r1, #31
1000f076:	dd00      	ble.n	1000f07a <__aeabi_dsub+0x3be>
1000f078:	e159      	b.n	1000f32e <__aeabi_dsub+0x672>
1000f07a:	2420      	movs	r4, #32
1000f07c:	1c3e      	adds	r6, r7, #0
1000f07e:	1a61      	subs	r1, r4, r1
1000f080:	408e      	lsls	r6, r1
1000f082:	468a      	mov	sl, r1
1000f084:	46b0      	mov	r8, r6
1000f086:	4649      	mov	r1, r9
1000f088:	1c2e      	adds	r6, r5, #0
1000f08a:	40ce      	lsrs	r6, r1
1000f08c:	4651      	mov	r1, sl
1000f08e:	46b4      	mov	ip, r6
1000f090:	408d      	lsls	r5, r1
1000f092:	4664      	mov	r4, ip
1000f094:	4646      	mov	r6, r8
1000f096:	4649      	mov	r1, r9
1000f098:	4326      	orrs	r6, r4
1000f09a:	1e6c      	subs	r4, r5, #1
1000f09c:	41a5      	sbcs	r5, r4
1000f09e:	40cf      	lsrs	r7, r1
1000f0a0:	4335      	orrs	r5, r6
1000f0a2:	9901      	ldr	r1, [sp, #4]
1000f0a4:	1bd7      	subs	r7, r2, r7
1000f0a6:	468c      	mov	ip, r1
1000f0a8:	1b4d      	subs	r5, r1, r5
1000f0aa:	45ac      	cmp	ip, r5
1000f0ac:	4192      	sbcs	r2, r2
1000f0ae:	4252      	negs	r2, r2
1000f0b0:	1abf      	subs	r7, r7, r2
1000f0b2:	1c04      	adds	r4, r0, #0
1000f0b4:	4698      	mov	r8, r3
1000f0b6:	e696      	b.n	1000ede6 <__aeabi_dsub+0x12a>
1000f0b8:	4663      	mov	r3, ip
1000f0ba:	4665      	mov	r5, ip
1000f0bc:	4333      	orrs	r3, r6
1000f0be:	d000      	beq.n	1000f0c2 <__aeabi_dsub+0x406>
1000f0c0:	e696      	b.n	1000edf0 <__aeabi_dsub+0x134>
1000f0c2:	2600      	movs	r6, #0
1000f0c4:	2700      	movs	r7, #0
1000f0c6:	2400      	movs	r4, #0
1000f0c8:	2500      	movs	r5, #0
1000f0ca:	e6c4      	b.n	1000ee56 <__aeabi_dsub+0x19a>
1000f0cc:	2b1f      	cmp	r3, #31
1000f0ce:	dc61      	bgt.n	1000f194 <__aeabi_dsub+0x4d8>
1000f0d0:	2020      	movs	r0, #32
1000f0d2:	1ac3      	subs	r3, r0, r3
1000f0d4:	469b      	mov	fp, r3
1000f0d6:	1c13      	adds	r3, r2, #0
1000f0d8:	4659      	mov	r1, fp
1000f0da:	408b      	lsls	r3, r1
1000f0dc:	4651      	mov	r1, sl
1000f0de:	4699      	mov	r9, r3
1000f0e0:	9b01      	ldr	r3, [sp, #4]
1000f0e2:	40cb      	lsrs	r3, r1
1000f0e4:	469c      	mov	ip, r3
1000f0e6:	464b      	mov	r3, r9
1000f0e8:	4660      	mov	r0, ip
1000f0ea:	4303      	orrs	r3, r0
1000f0ec:	469c      	mov	ip, r3
1000f0ee:	465b      	mov	r3, fp
1000f0f0:	9901      	ldr	r1, [sp, #4]
1000f0f2:	4099      	lsls	r1, r3
1000f0f4:	4663      	mov	r3, ip
1000f0f6:	1e48      	subs	r0, r1, #1
1000f0f8:	4181      	sbcs	r1, r0
1000f0fa:	4319      	orrs	r1, r3
1000f0fc:	4653      	mov	r3, sl
1000f0fe:	40da      	lsrs	r2, r3
1000f100:	e6cd      	b.n	1000ee9e <__aeabi_dsub+0x1e2>
1000f102:	1c3c      	adds	r4, r7, #0
1000f104:	432c      	orrs	r4, r5
1000f106:	d05d      	beq.n	1000f1c4 <__aeabi_dsub+0x508>
1000f108:	43f1      	mvns	r1, r6
1000f10a:	4689      	mov	r9, r1
1000f10c:	2900      	cmp	r1, #0
1000f10e:	d155      	bne.n	1000f1bc <__aeabi_dsub+0x500>
1000f110:	9901      	ldr	r1, [sp, #4]
1000f112:	1bd2      	subs	r2, r2, r7
1000f114:	468c      	mov	ip, r1
1000f116:	1b4d      	subs	r5, r1, r5
1000f118:	45ac      	cmp	ip, r5
1000f11a:	4189      	sbcs	r1, r1
1000f11c:	4249      	negs	r1, r1
1000f11e:	1a57      	subs	r7, r2, r1
1000f120:	1c04      	adds	r4, r0, #0
1000f122:	4698      	mov	r8, r3
1000f124:	e65f      	b.n	1000ede6 <__aeabi_dsub+0x12a>
1000f126:	4894      	ldr	r0, [pc, #592]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f128:	4284      	cmp	r4, r0
1000f12a:	d000      	beq.n	1000f12e <__aeabi_dsub+0x472>
1000f12c:	e6ad      	b.n	1000ee8a <__aeabi_dsub+0x1ce>
1000f12e:	e5f7      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f130:	2200      	movs	r2, #0
1000f132:	e771      	b.n	1000f018 <__aeabi_dsub+0x35c>
1000f134:	2300      	movs	r3, #0
1000f136:	e787      	b.n	1000f048 <__aeabi_dsub+0x38c>
1000f138:	1c3b      	adds	r3, r7, #0
1000f13a:	432b      	orrs	r3, r5
1000f13c:	2c00      	cmp	r4, #0
1000f13e:	d000      	beq.n	1000f142 <__aeabi_dsub+0x486>
1000f140:	e0da      	b.n	1000f2f8 <__aeabi_dsub+0x63c>
1000f142:	2b00      	cmp	r3, #0
1000f144:	d100      	bne.n	1000f148 <__aeabi_dsub+0x48c>
1000f146:	e113      	b.n	1000f370 <__aeabi_dsub+0x6b4>
1000f148:	1c13      	adds	r3, r2, #0
1000f14a:	9901      	ldr	r1, [sp, #4]
1000f14c:	430b      	orrs	r3, r1
1000f14e:	d100      	bne.n	1000f152 <__aeabi_dsub+0x496>
1000f150:	e5e6      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f152:	1949      	adds	r1, r1, r5
1000f154:	42a9      	cmp	r1, r5
1000f156:	419b      	sbcs	r3, r3
1000f158:	19d2      	adds	r2, r2, r7
1000f15a:	425b      	negs	r3, r3
1000f15c:	18d7      	adds	r7, r2, r3
1000f15e:	023b      	lsls	r3, r7, #8
1000f160:	d400      	bmi.n	1000f164 <__aeabi_dsub+0x4a8>
1000f162:	e121      	b.n	1000f3a8 <__aeabi_dsub+0x6ec>
1000f164:	4b85      	ldr	r3, [pc, #532]	; (1000f37c <__aeabi_dsub+0x6c0>)
1000f166:	1c0d      	adds	r5, r1, #0
1000f168:	401f      	ands	r7, r3
1000f16a:	1c04      	adds	r4, r0, #0
1000f16c:	e5d8      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f16e:	1c38      	adds	r0, r7, #0
1000f170:	4328      	orrs	r0, r5
1000f172:	2c00      	cmp	r4, #0
1000f174:	d140      	bne.n	1000f1f8 <__aeabi_dsub+0x53c>
1000f176:	2800      	cmp	r0, #0
1000f178:	d000      	beq.n	1000f17c <__aeabi_dsub+0x4c0>
1000f17a:	e083      	b.n	1000f284 <__aeabi_dsub+0x5c8>
1000f17c:	1c10      	adds	r0, r2, #0
1000f17e:	9901      	ldr	r1, [sp, #4]
1000f180:	4308      	orrs	r0, r1
1000f182:	d003      	beq.n	1000f18c <__aeabi_dsub+0x4d0>
1000f184:	1c17      	adds	r7, r2, #0
1000f186:	1c0d      	adds	r5, r1, #0
1000f188:	4698      	mov	r8, r3
1000f18a:	e5c9      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f18c:	2600      	movs	r6, #0
1000f18e:	2700      	movs	r7, #0
1000f190:	2500      	movs	r5, #0
1000f192:	e660      	b.n	1000ee56 <__aeabi_dsub+0x19a>
1000f194:	4650      	mov	r0, sl
1000f196:	1c13      	adds	r3, r2, #0
1000f198:	3820      	subs	r0, #32
1000f19a:	40c3      	lsrs	r3, r0
1000f19c:	1c18      	adds	r0, r3, #0
1000f19e:	4653      	mov	r3, sl
1000f1a0:	2b20      	cmp	r3, #32
1000f1a2:	d100      	bne.n	1000f1a6 <__aeabi_dsub+0x4ea>
1000f1a4:	e0c1      	b.n	1000f32a <__aeabi_dsub+0x66e>
1000f1a6:	2340      	movs	r3, #64	; 0x40
1000f1a8:	4651      	mov	r1, sl
1000f1aa:	1a5b      	subs	r3, r3, r1
1000f1ac:	409a      	lsls	r2, r3
1000f1ae:	9901      	ldr	r1, [sp, #4]
1000f1b0:	4311      	orrs	r1, r2
1000f1b2:	1e4a      	subs	r2, r1, #1
1000f1b4:	4191      	sbcs	r1, r2
1000f1b6:	2200      	movs	r2, #0
1000f1b8:	4301      	orrs	r1, r0
1000f1ba:	e670      	b.n	1000ee9e <__aeabi_dsub+0x1e2>
1000f1bc:	4c6e      	ldr	r4, [pc, #440]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f1be:	42a0      	cmp	r0, r4
1000f1c0:	d000      	beq.n	1000f1c4 <__aeabi_dsub+0x508>
1000f1c2:	e753      	b.n	1000f06c <__aeabi_dsub+0x3b0>
1000f1c4:	1c17      	adds	r7, r2, #0
1000f1c6:	9d01      	ldr	r5, [sp, #4]
1000f1c8:	1c04      	adds	r4, r0, #0
1000f1ca:	4698      	mov	r8, r3
1000f1cc:	e5a8      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f1ce:	2c00      	cmp	r4, #0
1000f1d0:	d128      	bne.n	1000f224 <__aeabi_dsub+0x568>
1000f1d2:	1c3c      	adds	r4, r7, #0
1000f1d4:	432c      	orrs	r4, r5
1000f1d6:	d100      	bne.n	1000f1da <__aeabi_dsub+0x51e>
1000f1d8:	e08a      	b.n	1000f2f0 <__aeabi_dsub+0x634>
1000f1da:	43db      	mvns	r3, r3
1000f1dc:	469a      	mov	sl, r3
1000f1de:	2b00      	cmp	r3, #0
1000f1e0:	d000      	beq.n	1000f1e4 <__aeabi_dsub+0x528>
1000f1e2:	e082      	b.n	1000f2ea <__aeabi_dsub+0x62e>
1000f1e4:	9b01      	ldr	r3, [sp, #4]
1000f1e6:	19d2      	adds	r2, r2, r7
1000f1e8:	469c      	mov	ip, r3
1000f1ea:	4465      	add	r5, ip
1000f1ec:	429d      	cmp	r5, r3
1000f1ee:	4189      	sbcs	r1, r1
1000f1f0:	4249      	negs	r1, r1
1000f1f2:	1857      	adds	r7, r2, r1
1000f1f4:	1c04      	adds	r4, r0, #0
1000f1f6:	e659      	b.n	1000eeac <__aeabi_dsub+0x1f0>
1000f1f8:	2800      	cmp	r0, #0
1000f1fa:	d15b      	bne.n	1000f2b4 <__aeabi_dsub+0x5f8>
1000f1fc:	1c10      	adds	r0, r2, #0
1000f1fe:	9901      	ldr	r1, [sp, #4]
1000f200:	4308      	orrs	r0, r1
1000f202:	d100      	bne.n	1000f206 <__aeabi_dsub+0x54a>
1000f204:	e0a4      	b.n	1000f350 <__aeabi_dsub+0x694>
1000f206:	1c17      	adds	r7, r2, #0
1000f208:	1c0d      	adds	r5, r1, #0
1000f20a:	4698      	mov	r8, r3
1000f20c:	4c5a      	ldr	r4, [pc, #360]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f20e:	e587      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f210:	433d      	orrs	r5, r7
1000f212:	1e6f      	subs	r7, r5, #1
1000f214:	41bd      	sbcs	r5, r7
1000f216:	2700      	movs	r7, #0
1000f218:	b2ed      	uxtb	r5, r5
1000f21a:	e742      	b.n	1000f0a2 <__aeabi_dsub+0x3e6>
1000f21c:	1c04      	adds	r4, r0, #0
1000f21e:	2700      	movs	r7, #0
1000f220:	2500      	movs	r5, #0
1000f222:	e618      	b.n	1000ee56 <__aeabi_dsub+0x19a>
1000f224:	4c54      	ldr	r4, [pc, #336]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f226:	42a0      	cmp	r0, r4
1000f228:	d062      	beq.n	1000f2f0 <__aeabi_dsub+0x634>
1000f22a:	4653      	mov	r3, sl
1000f22c:	2480      	movs	r4, #128	; 0x80
1000f22e:	425b      	negs	r3, r3
1000f230:	469a      	mov	sl, r3
1000f232:	0424      	lsls	r4, r4, #16
1000f234:	4327      	orrs	r7, r4
1000f236:	4653      	mov	r3, sl
1000f238:	2b38      	cmp	r3, #56	; 0x38
1000f23a:	dd00      	ble.n	1000f23e <__aeabi_dsub+0x582>
1000f23c:	e08e      	b.n	1000f35c <__aeabi_dsub+0x6a0>
1000f23e:	2b1f      	cmp	r3, #31
1000f240:	dd00      	ble.n	1000f244 <__aeabi_dsub+0x588>
1000f242:	e09d      	b.n	1000f380 <__aeabi_dsub+0x6c4>
1000f244:	2420      	movs	r4, #32
1000f246:	1ae3      	subs	r3, r4, r3
1000f248:	469b      	mov	fp, r3
1000f24a:	1c3b      	adds	r3, r7, #0
1000f24c:	4659      	mov	r1, fp
1000f24e:	408b      	lsls	r3, r1
1000f250:	4651      	mov	r1, sl
1000f252:	4699      	mov	r9, r3
1000f254:	1c2b      	adds	r3, r5, #0
1000f256:	40cb      	lsrs	r3, r1
1000f258:	469c      	mov	ip, r3
1000f25a:	464b      	mov	r3, r9
1000f25c:	4664      	mov	r4, ip
1000f25e:	4323      	orrs	r3, r4
1000f260:	469c      	mov	ip, r3
1000f262:	465b      	mov	r3, fp
1000f264:	409d      	lsls	r5, r3
1000f266:	4663      	mov	r3, ip
1000f268:	1e6c      	subs	r4, r5, #1
1000f26a:	41a5      	sbcs	r5, r4
1000f26c:	40cf      	lsrs	r7, r1
1000f26e:	431d      	orrs	r5, r3
1000f270:	9b01      	ldr	r3, [sp, #4]
1000f272:	18bf      	adds	r7, r7, r2
1000f274:	469c      	mov	ip, r3
1000f276:	4465      	add	r5, ip
1000f278:	429d      	cmp	r5, r3
1000f27a:	4192      	sbcs	r2, r2
1000f27c:	4252      	negs	r2, r2
1000f27e:	18bf      	adds	r7, r7, r2
1000f280:	1c04      	adds	r4, r0, #0
1000f282:	e613      	b.n	1000eeac <__aeabi_dsub+0x1f0>
1000f284:	1c10      	adds	r0, r2, #0
1000f286:	9901      	ldr	r1, [sp, #4]
1000f288:	4308      	orrs	r0, r1
1000f28a:	d100      	bne.n	1000f28e <__aeabi_dsub+0x5d2>
1000f28c:	e548      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f28e:	1a68      	subs	r0, r5, r1
1000f290:	4684      	mov	ip, r0
1000f292:	4285      	cmp	r5, r0
1000f294:	4180      	sbcs	r0, r0
1000f296:	1abe      	subs	r6, r7, r2
1000f298:	4240      	negs	r0, r0
1000f29a:	1a30      	subs	r0, r6, r0
1000f29c:	0206      	lsls	r6, r0, #8
1000f29e:	d400      	bmi.n	1000f2a2 <__aeabi_dsub+0x5e6>
1000f2a0:	e647      	b.n	1000ef32 <__aeabi_dsub+0x276>
1000f2a2:	468c      	mov	ip, r1
1000f2a4:	1b4d      	subs	r5, r1, r5
1000f2a6:	45ac      	cmp	ip, r5
1000f2a8:	4189      	sbcs	r1, r1
1000f2aa:	1bd2      	subs	r2, r2, r7
1000f2ac:	4249      	negs	r1, r1
1000f2ae:	1a57      	subs	r7, r2, r1
1000f2b0:	4698      	mov	r8, r3
1000f2b2:	e535      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f2b4:	1c10      	adds	r0, r2, #0
1000f2b6:	9901      	ldr	r1, [sp, #4]
1000f2b8:	4308      	orrs	r0, r1
1000f2ba:	d034      	beq.n	1000f326 <__aeabi_dsub+0x66a>
1000f2bc:	2480      	movs	r4, #128	; 0x80
1000f2be:	0778      	lsls	r0, r7, #29
1000f2c0:	08ed      	lsrs	r5, r5, #3
1000f2c2:	08ff      	lsrs	r7, r7, #3
1000f2c4:	0324      	lsls	r4, r4, #12
1000f2c6:	4328      	orrs	r0, r5
1000f2c8:	4227      	tst	r7, r4
1000f2ca:	d008      	beq.n	1000f2de <__aeabi_dsub+0x622>
1000f2cc:	08d6      	lsrs	r6, r2, #3
1000f2ce:	4226      	tst	r6, r4
1000f2d0:	d105      	bne.n	1000f2de <__aeabi_dsub+0x622>
1000f2d2:	08c9      	lsrs	r1, r1, #3
1000f2d4:	0752      	lsls	r2, r2, #29
1000f2d6:	430a      	orrs	r2, r1
1000f2d8:	1c10      	adds	r0, r2, #0
1000f2da:	1c37      	adds	r7, r6, #0
1000f2dc:	4698      	mov	r8, r3
1000f2de:	00ff      	lsls	r7, r7, #3
1000f2e0:	0f42      	lsrs	r2, r0, #29
1000f2e2:	4317      	orrs	r7, r2
1000f2e4:	00c5      	lsls	r5, r0, #3
1000f2e6:	4c24      	ldr	r4, [pc, #144]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f2e8:	e51a      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f2ea:	4c23      	ldr	r4, [pc, #140]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f2ec:	42a0      	cmp	r0, r4
1000f2ee:	d1a2      	bne.n	1000f236 <__aeabi_dsub+0x57a>
1000f2f0:	1c17      	adds	r7, r2, #0
1000f2f2:	9d01      	ldr	r5, [sp, #4]
1000f2f4:	1c04      	adds	r4, r0, #0
1000f2f6:	e513      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f2f8:	2b00      	cmp	r3, #0
1000f2fa:	d035      	beq.n	1000f368 <__aeabi_dsub+0x6ac>
1000f2fc:	1c13      	adds	r3, r2, #0
1000f2fe:	9901      	ldr	r1, [sp, #4]
1000f300:	430b      	orrs	r3, r1
1000f302:	d010      	beq.n	1000f326 <__aeabi_dsub+0x66a>
1000f304:	2480      	movs	r4, #128	; 0x80
1000f306:	0778      	lsls	r0, r7, #29
1000f308:	08ed      	lsrs	r5, r5, #3
1000f30a:	08ff      	lsrs	r7, r7, #3
1000f30c:	0324      	lsls	r4, r4, #12
1000f30e:	4328      	orrs	r0, r5
1000f310:	4227      	tst	r7, r4
1000f312:	d0e4      	beq.n	1000f2de <__aeabi_dsub+0x622>
1000f314:	08d3      	lsrs	r3, r2, #3
1000f316:	4223      	tst	r3, r4
1000f318:	d1e1      	bne.n	1000f2de <__aeabi_dsub+0x622>
1000f31a:	08c9      	lsrs	r1, r1, #3
1000f31c:	0752      	lsls	r2, r2, #29
1000f31e:	430a      	orrs	r2, r1
1000f320:	1c10      	adds	r0, r2, #0
1000f322:	1c1f      	adds	r7, r3, #0
1000f324:	e7db      	b.n	1000f2de <__aeabi_dsub+0x622>
1000f326:	4c14      	ldr	r4, [pc, #80]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f328:	e4fa      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f32a:	2200      	movs	r2, #0
1000f32c:	e73f      	b.n	1000f1ae <__aeabi_dsub+0x4f2>
1000f32e:	464c      	mov	r4, r9
1000f330:	1c3e      	adds	r6, r7, #0
1000f332:	3c20      	subs	r4, #32
1000f334:	40e6      	lsrs	r6, r4
1000f336:	4649      	mov	r1, r9
1000f338:	1c34      	adds	r4, r6, #0
1000f33a:	2920      	cmp	r1, #32
1000f33c:	d032      	beq.n	1000f3a4 <__aeabi_dsub+0x6e8>
1000f33e:	2640      	movs	r6, #64	; 0x40
1000f340:	1a76      	subs	r6, r6, r1
1000f342:	40b7      	lsls	r7, r6
1000f344:	433d      	orrs	r5, r7
1000f346:	1e6f      	subs	r7, r5, #1
1000f348:	41bd      	sbcs	r5, r7
1000f34a:	2700      	movs	r7, #0
1000f34c:	4325      	orrs	r5, r4
1000f34e:	e6a8      	b.n	1000f0a2 <__aeabi_dsub+0x3e6>
1000f350:	2780      	movs	r7, #128	; 0x80
1000f352:	2600      	movs	r6, #0
1000f354:	03ff      	lsls	r7, r7, #15
1000f356:	4c08      	ldr	r4, [pc, #32]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f358:	2500      	movs	r5, #0
1000f35a:	e57c      	b.n	1000ee56 <__aeabi_dsub+0x19a>
1000f35c:	433d      	orrs	r5, r7
1000f35e:	1e6f      	subs	r7, r5, #1
1000f360:	41bd      	sbcs	r5, r7
1000f362:	2700      	movs	r7, #0
1000f364:	b2ed      	uxtb	r5, r5
1000f366:	e783      	b.n	1000f270 <__aeabi_dsub+0x5b4>
1000f368:	1c17      	adds	r7, r2, #0
1000f36a:	9d01      	ldr	r5, [sp, #4]
1000f36c:	4c02      	ldr	r4, [pc, #8]	; (1000f378 <__aeabi_dsub+0x6bc>)
1000f36e:	e4d7      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f370:	1c17      	adds	r7, r2, #0
1000f372:	9d01      	ldr	r5, [sp, #4]
1000f374:	e4d4      	b.n	1000ed20 <__aeabi_dsub+0x64>
1000f376:	46c0      	nop			; (mov r8, r8)
1000f378:	000007ff 	.word	0x000007ff
1000f37c:	ff7fffff 	.word	0xff7fffff
1000f380:	4654      	mov	r4, sl
1000f382:	1c3b      	adds	r3, r7, #0
1000f384:	3c20      	subs	r4, #32
1000f386:	40e3      	lsrs	r3, r4
1000f388:	1c1c      	adds	r4, r3, #0
1000f38a:	4653      	mov	r3, sl
1000f38c:	2b20      	cmp	r3, #32
1000f38e:	d00d      	beq.n	1000f3ac <__aeabi_dsub+0x6f0>
1000f390:	2340      	movs	r3, #64	; 0x40
1000f392:	4651      	mov	r1, sl
1000f394:	1a5b      	subs	r3, r3, r1
1000f396:	409f      	lsls	r7, r3
1000f398:	433d      	orrs	r5, r7
1000f39a:	1e6f      	subs	r7, r5, #1
1000f39c:	41bd      	sbcs	r5, r7
1000f39e:	2700      	movs	r7, #0
1000f3a0:	4325      	orrs	r5, r4
1000f3a2:	e765      	b.n	1000f270 <__aeabi_dsub+0x5b4>
1000f3a4:	2700      	movs	r7, #0
1000f3a6:	e7cd      	b.n	1000f344 <__aeabi_dsub+0x688>
1000f3a8:	1c0d      	adds	r5, r1, #0
1000f3aa:	e5c8      	b.n	1000ef3e <__aeabi_dsub+0x282>
1000f3ac:	2700      	movs	r7, #0
1000f3ae:	e7f3      	b.n	1000f398 <__aeabi_dsub+0x6dc>

1000f3b0 <__aeabi_d2iz>:
1000f3b0:	030b      	lsls	r3, r1, #12
1000f3b2:	b530      	push	{r4, r5, lr}
1000f3b4:	4c13      	ldr	r4, [pc, #76]	; (1000f404 <__aeabi_d2iz+0x54>)
1000f3b6:	0b1a      	lsrs	r2, r3, #12
1000f3b8:	004b      	lsls	r3, r1, #1
1000f3ba:	1c05      	adds	r5, r0, #0
1000f3bc:	0d5b      	lsrs	r3, r3, #21
1000f3be:	0fc9      	lsrs	r1, r1, #31
1000f3c0:	2000      	movs	r0, #0
1000f3c2:	42a3      	cmp	r3, r4
1000f3c4:	dd10      	ble.n	1000f3e8 <__aeabi_d2iz+0x38>
1000f3c6:	4810      	ldr	r0, [pc, #64]	; (1000f408 <__aeabi_d2iz+0x58>)
1000f3c8:	4283      	cmp	r3, r0
1000f3ca:	dc0e      	bgt.n	1000f3ea <__aeabi_d2iz+0x3a>
1000f3cc:	2080      	movs	r0, #128	; 0x80
1000f3ce:	4c0f      	ldr	r4, [pc, #60]	; (1000f40c <__aeabi_d2iz+0x5c>)
1000f3d0:	0340      	lsls	r0, r0, #13
1000f3d2:	4302      	orrs	r2, r0
1000f3d4:	1ae4      	subs	r4, r4, r3
1000f3d6:	2c1f      	cmp	r4, #31
1000f3d8:	dd0a      	ble.n	1000f3f0 <__aeabi_d2iz+0x40>
1000f3da:	480d      	ldr	r0, [pc, #52]	; (1000f410 <__aeabi_d2iz+0x60>)
1000f3dc:	1ac3      	subs	r3, r0, r3
1000f3de:	40da      	lsrs	r2, r3
1000f3e0:	1c13      	adds	r3, r2, #0
1000f3e2:	4248      	negs	r0, r1
1000f3e4:	4043      	eors	r3, r0
1000f3e6:	1858      	adds	r0, r3, r1
1000f3e8:	bd30      	pop	{r4, r5, pc}
1000f3ea:	4b0a      	ldr	r3, [pc, #40]	; (1000f414 <__aeabi_d2iz+0x64>)
1000f3ec:	18c8      	adds	r0, r1, r3
1000f3ee:	e7fb      	b.n	1000f3e8 <__aeabi_d2iz+0x38>
1000f3f0:	1c28      	adds	r0, r5, #0
1000f3f2:	40e0      	lsrs	r0, r4
1000f3f4:	4c08      	ldr	r4, [pc, #32]	; (1000f418 <__aeabi_d2iz+0x68>)
1000f3f6:	46a4      	mov	ip, r4
1000f3f8:	4463      	add	r3, ip
1000f3fa:	409a      	lsls	r2, r3
1000f3fc:	1c13      	adds	r3, r2, #0
1000f3fe:	4303      	orrs	r3, r0
1000f400:	e7ef      	b.n	1000f3e2 <__aeabi_d2iz+0x32>
1000f402:	46c0      	nop			; (mov r8, r8)
1000f404:	000003fe 	.word	0x000003fe
1000f408:	0000041d 	.word	0x0000041d
1000f40c:	00000433 	.word	0x00000433
1000f410:	00000413 	.word	0x00000413
1000f414:	7fffffff 	.word	0x7fffffff
1000f418:	fffffbed 	.word	0xfffffbed

1000f41c <__aeabi_ui2d>:
1000f41c:	b510      	push	{r4, lr}
1000f41e:	1e04      	subs	r4, r0, #0
1000f420:	d010      	beq.n	1000f444 <__aeabi_ui2d+0x28>
1000f422:	f000 f86b 	bl	1000f4fc <__clzsi2>
1000f426:	4a14      	ldr	r2, [pc, #80]	; (1000f478 <__aeabi_ui2d+0x5c>)
1000f428:	1a12      	subs	r2, r2, r0
1000f42a:	280a      	cmp	r0, #10
1000f42c:	dc1a      	bgt.n	1000f464 <__aeabi_ui2d+0x48>
1000f42e:	230b      	movs	r3, #11
1000f430:	1c21      	adds	r1, r4, #0
1000f432:	1a1b      	subs	r3, r3, r0
1000f434:	40d9      	lsrs	r1, r3
1000f436:	3015      	adds	r0, #21
1000f438:	030b      	lsls	r3, r1, #12
1000f43a:	0552      	lsls	r2, r2, #21
1000f43c:	4084      	lsls	r4, r0
1000f43e:	0b1b      	lsrs	r3, r3, #12
1000f440:	0d52      	lsrs	r2, r2, #21
1000f442:	e001      	b.n	1000f448 <__aeabi_ui2d+0x2c>
1000f444:	2200      	movs	r2, #0
1000f446:	2300      	movs	r3, #0
1000f448:	2100      	movs	r1, #0
1000f44a:	031b      	lsls	r3, r3, #12
1000f44c:	1c20      	adds	r0, r4, #0
1000f44e:	0b1c      	lsrs	r4, r3, #12
1000f450:	0d0b      	lsrs	r3, r1, #20
1000f452:	051b      	lsls	r3, r3, #20
1000f454:	4323      	orrs	r3, r4
1000f456:	4c09      	ldr	r4, [pc, #36]	; (1000f47c <__aeabi_ui2d+0x60>)
1000f458:	0512      	lsls	r2, r2, #20
1000f45a:	4023      	ands	r3, r4
1000f45c:	4313      	orrs	r3, r2
1000f45e:	005b      	lsls	r3, r3, #1
1000f460:	0859      	lsrs	r1, r3, #1
1000f462:	bd10      	pop	{r4, pc}
1000f464:	1c03      	adds	r3, r0, #0
1000f466:	3b0b      	subs	r3, #11
1000f468:	409c      	lsls	r4, r3
1000f46a:	0552      	lsls	r2, r2, #21
1000f46c:	0323      	lsls	r3, r4, #12
1000f46e:	0b1b      	lsrs	r3, r3, #12
1000f470:	0d52      	lsrs	r2, r2, #21
1000f472:	2400      	movs	r4, #0
1000f474:	e7e8      	b.n	1000f448 <__aeabi_ui2d+0x2c>
1000f476:	46c0      	nop			; (mov r8, r8)
1000f478:	0000041e 	.word	0x0000041e
1000f47c:	800fffff 	.word	0x800fffff

1000f480 <__aeabi_cdrcmple>:
1000f480:	4684      	mov	ip, r0
1000f482:	1c10      	adds	r0, r2, #0
1000f484:	4662      	mov	r2, ip
1000f486:	468c      	mov	ip, r1
1000f488:	1c19      	adds	r1, r3, #0
1000f48a:	4663      	mov	r3, ip
1000f48c:	e000      	b.n	1000f490 <__aeabi_cdcmpeq>
1000f48e:	46c0      	nop			; (mov r8, r8)

1000f490 <__aeabi_cdcmpeq>:
1000f490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f492:	f000 f905 	bl	1000f6a0 <__ledf2>
1000f496:	2800      	cmp	r0, #0
1000f498:	d401      	bmi.n	1000f49e <__aeabi_cdcmpeq+0xe>
1000f49a:	2100      	movs	r1, #0
1000f49c:	42c8      	cmn	r0, r1
1000f49e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f4a0 <__aeabi_dcmpeq>:
1000f4a0:	b510      	push	{r4, lr}
1000f4a2:	f000 f849 	bl	1000f538 <__eqdf2>
1000f4a6:	4240      	negs	r0, r0
1000f4a8:	3001      	adds	r0, #1
1000f4aa:	bd10      	pop	{r4, pc}

1000f4ac <__aeabi_dcmplt>:
1000f4ac:	b510      	push	{r4, lr}
1000f4ae:	f000 f8f7 	bl	1000f6a0 <__ledf2>
1000f4b2:	2800      	cmp	r0, #0
1000f4b4:	db01      	blt.n	1000f4ba <__aeabi_dcmplt+0xe>
1000f4b6:	2000      	movs	r0, #0
1000f4b8:	bd10      	pop	{r4, pc}
1000f4ba:	2001      	movs	r0, #1
1000f4bc:	bd10      	pop	{r4, pc}
1000f4be:	46c0      	nop			; (mov r8, r8)

1000f4c0 <__aeabi_dcmple>:
1000f4c0:	b510      	push	{r4, lr}
1000f4c2:	f000 f8ed 	bl	1000f6a0 <__ledf2>
1000f4c6:	2800      	cmp	r0, #0
1000f4c8:	dd01      	ble.n	1000f4ce <__aeabi_dcmple+0xe>
1000f4ca:	2000      	movs	r0, #0
1000f4cc:	bd10      	pop	{r4, pc}
1000f4ce:	2001      	movs	r0, #1
1000f4d0:	bd10      	pop	{r4, pc}
1000f4d2:	46c0      	nop			; (mov r8, r8)

1000f4d4 <__aeabi_dcmpgt>:
1000f4d4:	b510      	push	{r4, lr}
1000f4d6:	f000 f873 	bl	1000f5c0 <__gedf2>
1000f4da:	2800      	cmp	r0, #0
1000f4dc:	dc01      	bgt.n	1000f4e2 <__aeabi_dcmpgt+0xe>
1000f4de:	2000      	movs	r0, #0
1000f4e0:	bd10      	pop	{r4, pc}
1000f4e2:	2001      	movs	r0, #1
1000f4e4:	bd10      	pop	{r4, pc}
1000f4e6:	46c0      	nop			; (mov r8, r8)

1000f4e8 <__aeabi_dcmpge>:
1000f4e8:	b510      	push	{r4, lr}
1000f4ea:	f000 f869 	bl	1000f5c0 <__gedf2>
1000f4ee:	2800      	cmp	r0, #0
1000f4f0:	da01      	bge.n	1000f4f6 <__aeabi_dcmpge+0xe>
1000f4f2:	2000      	movs	r0, #0
1000f4f4:	bd10      	pop	{r4, pc}
1000f4f6:	2001      	movs	r0, #1
1000f4f8:	bd10      	pop	{r4, pc}
1000f4fa:	46c0      	nop			; (mov r8, r8)

1000f4fc <__clzsi2>:
1000f4fc:	211c      	movs	r1, #28
1000f4fe:	2301      	movs	r3, #1
1000f500:	041b      	lsls	r3, r3, #16
1000f502:	4298      	cmp	r0, r3
1000f504:	d301      	bcc.n	1000f50a <__clzsi2+0xe>
1000f506:	0c00      	lsrs	r0, r0, #16
1000f508:	3910      	subs	r1, #16
1000f50a:	0a1b      	lsrs	r3, r3, #8
1000f50c:	4298      	cmp	r0, r3
1000f50e:	d301      	bcc.n	1000f514 <__clzsi2+0x18>
1000f510:	0a00      	lsrs	r0, r0, #8
1000f512:	3908      	subs	r1, #8
1000f514:	091b      	lsrs	r3, r3, #4
1000f516:	4298      	cmp	r0, r3
1000f518:	d301      	bcc.n	1000f51e <__clzsi2+0x22>
1000f51a:	0900      	lsrs	r0, r0, #4
1000f51c:	3904      	subs	r1, #4
1000f51e:	a202      	add	r2, pc, #8	; (adr r2, 1000f528 <__clzsi2+0x2c>)
1000f520:	5c10      	ldrb	r0, [r2, r0]
1000f522:	1840      	adds	r0, r0, r1
1000f524:	4770      	bx	lr
1000f526:	46c0      	nop			; (mov r8, r8)
1000f528:	02020304 	.word	0x02020304
1000f52c:	01010101 	.word	0x01010101
	...

1000f538 <__eqdf2>:
1000f538:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f53a:	465f      	mov	r7, fp
1000f53c:	464d      	mov	r5, r9
1000f53e:	4644      	mov	r4, r8
1000f540:	4656      	mov	r6, sl
1000f542:	b4f0      	push	{r4, r5, r6, r7}
1000f544:	031f      	lsls	r7, r3, #12
1000f546:	005c      	lsls	r4, r3, #1
1000f548:	0fdb      	lsrs	r3, r3, #31
1000f54a:	4699      	mov	r9, r3
1000f54c:	4b1b      	ldr	r3, [pc, #108]	; (1000f5bc <__eqdf2+0x84>)
1000f54e:	030e      	lsls	r6, r1, #12
1000f550:	004d      	lsls	r5, r1, #1
1000f552:	0fc9      	lsrs	r1, r1, #31
1000f554:	4684      	mov	ip, r0
1000f556:	0b36      	lsrs	r6, r6, #12
1000f558:	0d6d      	lsrs	r5, r5, #21
1000f55a:	468b      	mov	fp, r1
1000f55c:	4690      	mov	r8, r2
1000f55e:	0b3f      	lsrs	r7, r7, #12
1000f560:	0d64      	lsrs	r4, r4, #21
1000f562:	429d      	cmp	r5, r3
1000f564:	d00c      	beq.n	1000f580 <__eqdf2+0x48>
1000f566:	4b15      	ldr	r3, [pc, #84]	; (1000f5bc <__eqdf2+0x84>)
1000f568:	429c      	cmp	r4, r3
1000f56a:	d010      	beq.n	1000f58e <__eqdf2+0x56>
1000f56c:	2301      	movs	r3, #1
1000f56e:	42a5      	cmp	r5, r4
1000f570:	d014      	beq.n	1000f59c <__eqdf2+0x64>
1000f572:	1c18      	adds	r0, r3, #0
1000f574:	bc3c      	pop	{r2, r3, r4, r5}
1000f576:	4690      	mov	r8, r2
1000f578:	4699      	mov	r9, r3
1000f57a:	46a2      	mov	sl, r4
1000f57c:	46ab      	mov	fp, r5
1000f57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f580:	1c31      	adds	r1, r6, #0
1000f582:	2301      	movs	r3, #1
1000f584:	4301      	orrs	r1, r0
1000f586:	d1f4      	bne.n	1000f572 <__eqdf2+0x3a>
1000f588:	4b0c      	ldr	r3, [pc, #48]	; (1000f5bc <__eqdf2+0x84>)
1000f58a:	429c      	cmp	r4, r3
1000f58c:	d1ee      	bne.n	1000f56c <__eqdf2+0x34>
1000f58e:	433a      	orrs	r2, r7
1000f590:	2301      	movs	r3, #1
1000f592:	2a00      	cmp	r2, #0
1000f594:	d1ed      	bne.n	1000f572 <__eqdf2+0x3a>
1000f596:	2301      	movs	r3, #1
1000f598:	42a5      	cmp	r5, r4
1000f59a:	d1ea      	bne.n	1000f572 <__eqdf2+0x3a>
1000f59c:	42be      	cmp	r6, r7
1000f59e:	d1e8      	bne.n	1000f572 <__eqdf2+0x3a>
1000f5a0:	45c4      	cmp	ip, r8
1000f5a2:	d1e6      	bne.n	1000f572 <__eqdf2+0x3a>
1000f5a4:	45cb      	cmp	fp, r9
1000f5a6:	d006      	beq.n	1000f5b6 <__eqdf2+0x7e>
1000f5a8:	2d00      	cmp	r5, #0
1000f5aa:	d1e2      	bne.n	1000f572 <__eqdf2+0x3a>
1000f5ac:	4330      	orrs	r0, r6
1000f5ae:	1c03      	adds	r3, r0, #0
1000f5b0:	1e58      	subs	r0, r3, #1
1000f5b2:	4183      	sbcs	r3, r0
1000f5b4:	e7dd      	b.n	1000f572 <__eqdf2+0x3a>
1000f5b6:	2300      	movs	r3, #0
1000f5b8:	e7db      	b.n	1000f572 <__eqdf2+0x3a>
1000f5ba:	46c0      	nop			; (mov r8, r8)
1000f5bc:	000007ff 	.word	0x000007ff

1000f5c0 <__gedf2>:
1000f5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f5c2:	4657      	mov	r7, sl
1000f5c4:	4645      	mov	r5, r8
1000f5c6:	464e      	mov	r6, r9
1000f5c8:	b4e0      	push	{r5, r6, r7}
1000f5ca:	030f      	lsls	r7, r1, #12
1000f5cc:	004e      	lsls	r6, r1, #1
1000f5ce:	0fc9      	lsrs	r1, r1, #31
1000f5d0:	468a      	mov	sl, r1
1000f5d2:	4932      	ldr	r1, [pc, #200]	; (1000f69c <__gedf2+0xdc>)
1000f5d4:	031d      	lsls	r5, r3, #12
1000f5d6:	005c      	lsls	r4, r3, #1
1000f5d8:	4684      	mov	ip, r0
1000f5da:	0b3f      	lsrs	r7, r7, #12
1000f5dc:	0d76      	lsrs	r6, r6, #21
1000f5de:	4690      	mov	r8, r2
1000f5e0:	0b2d      	lsrs	r5, r5, #12
1000f5e2:	0d64      	lsrs	r4, r4, #21
1000f5e4:	0fdb      	lsrs	r3, r3, #31
1000f5e6:	428e      	cmp	r6, r1
1000f5e8:	d00f      	beq.n	1000f60a <__gedf2+0x4a>
1000f5ea:	428c      	cmp	r4, r1
1000f5ec:	d039      	beq.n	1000f662 <__gedf2+0xa2>
1000f5ee:	2e00      	cmp	r6, #0
1000f5f0:	d110      	bne.n	1000f614 <__gedf2+0x54>
1000f5f2:	4338      	orrs	r0, r7
1000f5f4:	4241      	negs	r1, r0
1000f5f6:	4141      	adcs	r1, r0
1000f5f8:	4689      	mov	r9, r1
1000f5fa:	2c00      	cmp	r4, #0
1000f5fc:	d127      	bne.n	1000f64e <__gedf2+0x8e>
1000f5fe:	432a      	orrs	r2, r5
1000f600:	d125      	bne.n	1000f64e <__gedf2+0x8e>
1000f602:	2000      	movs	r0, #0
1000f604:	2900      	cmp	r1, #0
1000f606:	d10e      	bne.n	1000f626 <__gedf2+0x66>
1000f608:	e008      	b.n	1000f61c <__gedf2+0x5c>
1000f60a:	1c39      	adds	r1, r7, #0
1000f60c:	4301      	orrs	r1, r0
1000f60e:	d12e      	bne.n	1000f66e <__gedf2+0xae>
1000f610:	42b4      	cmp	r4, r6
1000f612:	d026      	beq.n	1000f662 <__gedf2+0xa2>
1000f614:	2c00      	cmp	r4, #0
1000f616:	d00b      	beq.n	1000f630 <__gedf2+0x70>
1000f618:	459a      	cmp	sl, r3
1000f61a:	d00d      	beq.n	1000f638 <__gedf2+0x78>
1000f61c:	4653      	mov	r3, sl
1000f61e:	4259      	negs	r1, r3
1000f620:	2301      	movs	r3, #1
1000f622:	4319      	orrs	r1, r3
1000f624:	1c08      	adds	r0, r1, #0
1000f626:	bc1c      	pop	{r2, r3, r4}
1000f628:	4690      	mov	r8, r2
1000f62a:	4699      	mov	r9, r3
1000f62c:	46a2      	mov	sl, r4
1000f62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f630:	432a      	orrs	r2, r5
1000f632:	d0f3      	beq.n	1000f61c <__gedf2+0x5c>
1000f634:	459a      	cmp	sl, r3
1000f636:	d1f1      	bne.n	1000f61c <__gedf2+0x5c>
1000f638:	42a6      	cmp	r6, r4
1000f63a:	dcef      	bgt.n	1000f61c <__gedf2+0x5c>
1000f63c:	da1a      	bge.n	1000f674 <__gedf2+0xb4>
1000f63e:	4650      	mov	r0, sl
1000f640:	4241      	negs	r1, r0
1000f642:	4148      	adcs	r0, r1
1000f644:	2301      	movs	r3, #1
1000f646:	4241      	negs	r1, r0
1000f648:	4319      	orrs	r1, r3
1000f64a:	1c08      	adds	r0, r1, #0
1000f64c:	e7eb      	b.n	1000f626 <__gedf2+0x66>
1000f64e:	464a      	mov	r2, r9
1000f650:	2a00      	cmp	r2, #0
1000f652:	d0e1      	beq.n	1000f618 <__gedf2+0x58>
1000f654:	4258      	negs	r0, r3
1000f656:	4158      	adcs	r0, r3
1000f658:	2201      	movs	r2, #1
1000f65a:	4241      	negs	r1, r0
1000f65c:	4311      	orrs	r1, r2
1000f65e:	1c08      	adds	r0, r1, #0
1000f660:	e7e1      	b.n	1000f626 <__gedf2+0x66>
1000f662:	1c29      	adds	r1, r5, #0
1000f664:	4311      	orrs	r1, r2
1000f666:	d102      	bne.n	1000f66e <__gedf2+0xae>
1000f668:	2e00      	cmp	r6, #0
1000f66a:	d0c2      	beq.n	1000f5f2 <__gedf2+0x32>
1000f66c:	e7d4      	b.n	1000f618 <__gedf2+0x58>
1000f66e:	2002      	movs	r0, #2
1000f670:	4240      	negs	r0, r0
1000f672:	e7d8      	b.n	1000f626 <__gedf2+0x66>
1000f674:	42af      	cmp	r7, r5
1000f676:	d8d1      	bhi.n	1000f61c <__gedf2+0x5c>
1000f678:	d009      	beq.n	1000f68e <__gedf2+0xce>
1000f67a:	2000      	movs	r0, #0
1000f67c:	42af      	cmp	r7, r5
1000f67e:	d2d2      	bcs.n	1000f626 <__gedf2+0x66>
1000f680:	4650      	mov	r0, sl
1000f682:	4241      	negs	r1, r0
1000f684:	4148      	adcs	r0, r1
1000f686:	2301      	movs	r3, #1
1000f688:	4240      	negs	r0, r0
1000f68a:	4318      	orrs	r0, r3
1000f68c:	e7cb      	b.n	1000f626 <__gedf2+0x66>
1000f68e:	45c4      	cmp	ip, r8
1000f690:	d8c4      	bhi.n	1000f61c <__gedf2+0x5c>
1000f692:	2000      	movs	r0, #0
1000f694:	45c4      	cmp	ip, r8
1000f696:	d3f3      	bcc.n	1000f680 <__gedf2+0xc0>
1000f698:	e7c5      	b.n	1000f626 <__gedf2+0x66>
1000f69a:	46c0      	nop			; (mov r8, r8)
1000f69c:	000007ff 	.word	0x000007ff

1000f6a0 <__ledf2>:
1000f6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6a2:	465f      	mov	r7, fp
1000f6a4:	464d      	mov	r5, r9
1000f6a6:	4644      	mov	r4, r8
1000f6a8:	4656      	mov	r6, sl
1000f6aa:	4680      	mov	r8, r0
1000f6ac:	b4f0      	push	{r4, r5, r6, r7}
1000f6ae:	1c06      	adds	r6, r0, #0
1000f6b0:	0308      	lsls	r0, r1, #12
1000f6b2:	0b00      	lsrs	r0, r0, #12
1000f6b4:	4684      	mov	ip, r0
1000f6b6:	482c      	ldr	r0, [pc, #176]	; (1000f768 <__ledf2+0xc8>)
1000f6b8:	004c      	lsls	r4, r1, #1
1000f6ba:	031f      	lsls	r7, r3, #12
1000f6bc:	005d      	lsls	r5, r3, #1
1000f6be:	0fc9      	lsrs	r1, r1, #31
1000f6c0:	0d64      	lsrs	r4, r4, #21
1000f6c2:	468b      	mov	fp, r1
1000f6c4:	4691      	mov	r9, r2
1000f6c6:	0b3f      	lsrs	r7, r7, #12
1000f6c8:	0d6d      	lsrs	r5, r5, #21
1000f6ca:	0fdb      	lsrs	r3, r3, #31
1000f6cc:	4284      	cmp	r4, r0
1000f6ce:	d012      	beq.n	1000f6f6 <__ledf2+0x56>
1000f6d0:	4285      	cmp	r5, r0
1000f6d2:	d025      	beq.n	1000f720 <__ledf2+0x80>
1000f6d4:	2c00      	cmp	r4, #0
1000f6d6:	d114      	bne.n	1000f702 <__ledf2+0x62>
1000f6d8:	4661      	mov	r1, ip
1000f6da:	430e      	orrs	r6, r1
1000f6dc:	4270      	negs	r0, r6
1000f6de:	4146      	adcs	r6, r0
1000f6e0:	2d00      	cmp	r5, #0
1000f6e2:	d035      	beq.n	1000f750 <__ledf2+0xb0>
1000f6e4:	2e00      	cmp	r6, #0
1000f6e6:	d021      	beq.n	1000f72c <__ledf2+0x8c>
1000f6e8:	4258      	negs	r0, r3
1000f6ea:	4158      	adcs	r0, r3
1000f6ec:	2101      	movs	r1, #1
1000f6ee:	4243      	negs	r3, r0
1000f6f0:	430b      	orrs	r3, r1
1000f6f2:	1c18      	adds	r0, r3, #0
1000f6f4:	e00e      	b.n	1000f714 <__ledf2+0x74>
1000f6f6:	4661      	mov	r1, ip
1000f6f8:	2002      	movs	r0, #2
1000f6fa:	4331      	orrs	r1, r6
1000f6fc:	d10a      	bne.n	1000f714 <__ledf2+0x74>
1000f6fe:	42a5      	cmp	r5, r4
1000f700:	d00e      	beq.n	1000f720 <__ledf2+0x80>
1000f702:	2d00      	cmp	r5, #0
1000f704:	d112      	bne.n	1000f72c <__ledf2+0x8c>
1000f706:	433a      	orrs	r2, r7
1000f708:	d110      	bne.n	1000f72c <__ledf2+0x8c>
1000f70a:	465b      	mov	r3, fp
1000f70c:	4259      	negs	r1, r3
1000f70e:	2301      	movs	r3, #1
1000f710:	4319      	orrs	r1, r3
1000f712:	1c08      	adds	r0, r1, #0
1000f714:	bc3c      	pop	{r2, r3, r4, r5}
1000f716:	4690      	mov	r8, r2
1000f718:	4699      	mov	r9, r3
1000f71a:	46a2      	mov	sl, r4
1000f71c:	46ab      	mov	fp, r5
1000f71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f720:	1c39      	adds	r1, r7, #0
1000f722:	2002      	movs	r0, #2
1000f724:	4311      	orrs	r1, r2
1000f726:	d1f5      	bne.n	1000f714 <__ledf2+0x74>
1000f728:	2c00      	cmp	r4, #0
1000f72a:	d0d5      	beq.n	1000f6d8 <__ledf2+0x38>
1000f72c:	459b      	cmp	fp, r3
1000f72e:	d1ec      	bne.n	1000f70a <__ledf2+0x6a>
1000f730:	42ac      	cmp	r4, r5
1000f732:	dcea      	bgt.n	1000f70a <__ledf2+0x6a>
1000f734:	db05      	blt.n	1000f742 <__ledf2+0xa2>
1000f736:	45bc      	cmp	ip, r7
1000f738:	d8e7      	bhi.n	1000f70a <__ledf2+0x6a>
1000f73a:	d00f      	beq.n	1000f75c <__ledf2+0xbc>
1000f73c:	2000      	movs	r0, #0
1000f73e:	45bc      	cmp	ip, r7
1000f740:	d2e8      	bcs.n	1000f714 <__ledf2+0x74>
1000f742:	4658      	mov	r0, fp
1000f744:	4241      	negs	r1, r0
1000f746:	4148      	adcs	r0, r1
1000f748:	4241      	negs	r1, r0
1000f74a:	2001      	movs	r0, #1
1000f74c:	4308      	orrs	r0, r1
1000f74e:	e7e1      	b.n	1000f714 <__ledf2+0x74>
1000f750:	433a      	orrs	r2, r7
1000f752:	d1c7      	bne.n	1000f6e4 <__ledf2+0x44>
1000f754:	2000      	movs	r0, #0
1000f756:	2e00      	cmp	r6, #0
1000f758:	d1dc      	bne.n	1000f714 <__ledf2+0x74>
1000f75a:	e7d6      	b.n	1000f70a <__ledf2+0x6a>
1000f75c:	45c8      	cmp	r8, r9
1000f75e:	d8d4      	bhi.n	1000f70a <__ledf2+0x6a>
1000f760:	2000      	movs	r0, #0
1000f762:	45c8      	cmp	r8, r9
1000f764:	d3ed      	bcc.n	1000f742 <__ledf2+0xa2>
1000f766:	e7d5      	b.n	1000f714 <__ledf2+0x74>
1000f768:	000007ff 	.word	0x000007ff

1000f76c <__libc_init_array>:
1000f76c:	4b0e      	ldr	r3, [pc, #56]	; (1000f7a8 <__libc_init_array+0x3c>)
1000f76e:	b570      	push	{r4, r5, r6, lr}
1000f770:	2500      	movs	r5, #0
1000f772:	1c1e      	adds	r6, r3, #0
1000f774:	4c0d      	ldr	r4, [pc, #52]	; (1000f7ac <__libc_init_array+0x40>)
1000f776:	1ae4      	subs	r4, r4, r3
1000f778:	10a4      	asrs	r4, r4, #2
1000f77a:	42a5      	cmp	r5, r4
1000f77c:	d004      	beq.n	1000f788 <__libc_init_array+0x1c>
1000f77e:	00ab      	lsls	r3, r5, #2
1000f780:	58f3      	ldr	r3, [r6, r3]
1000f782:	4798      	blx	r3
1000f784:	3501      	adds	r5, #1
1000f786:	e7f8      	b.n	1000f77a <__libc_init_array+0xe>
1000f788:	f002 f868 	bl	1001185c <_init>
1000f78c:	4b08      	ldr	r3, [pc, #32]	; (1000f7b0 <__libc_init_array+0x44>)
1000f78e:	2500      	movs	r5, #0
1000f790:	1c1e      	adds	r6, r3, #0
1000f792:	4c08      	ldr	r4, [pc, #32]	; (1000f7b4 <__libc_init_array+0x48>)
1000f794:	1ae4      	subs	r4, r4, r3
1000f796:	10a4      	asrs	r4, r4, #2
1000f798:	42a5      	cmp	r5, r4
1000f79a:	d004      	beq.n	1000f7a6 <__libc_init_array+0x3a>
1000f79c:	00ab      	lsls	r3, r5, #2
1000f79e:	58f3      	ldr	r3, [r6, r3]
1000f7a0:	4798      	blx	r3
1000f7a2:	3501      	adds	r5, #1
1000f7a4:	e7f8      	b.n	1000f798 <__libc_init_array+0x2c>
1000f7a6:	bd70      	pop	{r4, r5, r6, pc}
1000f7a8:	10011868 	.word	0x10011868
1000f7ac:	10011868 	.word	0x10011868
1000f7b0:	10011868 	.word	0x10011868
1000f7b4:	1001186c 	.word	0x1001186c

1000f7b8 <memcmp>:
1000f7b8:	b530      	push	{r4, r5, lr}
1000f7ba:	2400      	movs	r4, #0
1000f7bc:	4294      	cmp	r4, r2
1000f7be:	d008      	beq.n	1000f7d2 <memcmp+0x1a>
1000f7c0:	5d03      	ldrb	r3, [r0, r4]
1000f7c2:	1c65      	adds	r5, r4, #1
1000f7c4:	5d0c      	ldrb	r4, [r1, r4]
1000f7c6:	42a3      	cmp	r3, r4
1000f7c8:	d001      	beq.n	1000f7ce <memcmp+0x16>
1000f7ca:	1b18      	subs	r0, r3, r4
1000f7cc:	e002      	b.n	1000f7d4 <memcmp+0x1c>
1000f7ce:	1c2c      	adds	r4, r5, #0
1000f7d0:	e7f4      	b.n	1000f7bc <memcmp+0x4>
1000f7d2:	2000      	movs	r0, #0
1000f7d4:	bd30      	pop	{r4, r5, pc}

1000f7d6 <memcpy>:
1000f7d6:	2300      	movs	r3, #0
1000f7d8:	b510      	push	{r4, lr}
1000f7da:	4293      	cmp	r3, r2
1000f7dc:	d003      	beq.n	1000f7e6 <memcpy+0x10>
1000f7de:	5ccc      	ldrb	r4, [r1, r3]
1000f7e0:	54c4      	strb	r4, [r0, r3]
1000f7e2:	3301      	adds	r3, #1
1000f7e4:	e7f9      	b.n	1000f7da <memcpy+0x4>
1000f7e6:	bd10      	pop	{r4, pc}

1000f7e8 <memset>:
1000f7e8:	1c03      	adds	r3, r0, #0
1000f7ea:	1882      	adds	r2, r0, r2
1000f7ec:	4293      	cmp	r3, r2
1000f7ee:	d002      	beq.n	1000f7f6 <memset+0xe>
1000f7f0:	7019      	strb	r1, [r3, #0]
1000f7f2:	3301      	adds	r3, #1
1000f7f4:	e7fa      	b.n	1000f7ec <memset+0x4>
1000f7f6:	4770      	bx	lr

1000f7f8 <iprintf>:
1000f7f8:	b40f      	push	{r0, r1, r2, r3}
1000f7fa:	4b0b      	ldr	r3, [pc, #44]	; (1000f828 <iprintf+0x30>)
1000f7fc:	b513      	push	{r0, r1, r4, lr}
1000f7fe:	681c      	ldr	r4, [r3, #0]
1000f800:	2c00      	cmp	r4, #0
1000f802:	d005      	beq.n	1000f810 <iprintf+0x18>
1000f804:	69a3      	ldr	r3, [r4, #24]
1000f806:	2b00      	cmp	r3, #0
1000f808:	d102      	bne.n	1000f810 <iprintf+0x18>
1000f80a:	1c20      	adds	r0, r4, #0
1000f80c:	f000 fb1e 	bl	1000fe4c <__sinit>
1000f810:	ab05      	add	r3, sp, #20
1000f812:	1c20      	adds	r0, r4, #0
1000f814:	68a1      	ldr	r1, [r4, #8]
1000f816:	9a04      	ldr	r2, [sp, #16]
1000f818:	9301      	str	r3, [sp, #4]
1000f81a:	f000 fcd1 	bl	100101c0 <_vfiprintf_r>
1000f81e:	bc16      	pop	{r1, r2, r4}
1000f820:	bc08      	pop	{r3}
1000f822:	b004      	add	sp, #16
1000f824:	4718      	bx	r3
1000f826:	46c0      	nop			; (mov r8, r8)
1000f828:	10011904 	.word	0x10011904

1000f82c <putchar>:
1000f82c:	b538      	push	{r3, r4, r5, lr}
1000f82e:	4b08      	ldr	r3, [pc, #32]	; (1000f850 <putchar+0x24>)
1000f830:	1c05      	adds	r5, r0, #0
1000f832:	681c      	ldr	r4, [r3, #0]
1000f834:	2c00      	cmp	r4, #0
1000f836:	d005      	beq.n	1000f844 <putchar+0x18>
1000f838:	69a3      	ldr	r3, [r4, #24]
1000f83a:	2b00      	cmp	r3, #0
1000f83c:	d102      	bne.n	1000f844 <putchar+0x18>
1000f83e:	1c20      	adds	r0, r4, #0
1000f840:	f000 fb04 	bl	1000fe4c <__sinit>
1000f844:	1c29      	adds	r1, r5, #0
1000f846:	1c20      	adds	r0, r4, #0
1000f848:	68a2      	ldr	r2, [r4, #8]
1000f84a:	f000 ff4f 	bl	100106ec <_putc_r>
1000f84e:	bd38      	pop	{r3, r4, r5, pc}
1000f850:	10011904 	.word	0x10011904

1000f854 <_puts_r>:
1000f854:	b570      	push	{r4, r5, r6, lr}
1000f856:	1c05      	adds	r5, r0, #0
1000f858:	1c0e      	adds	r6, r1, #0
1000f85a:	2800      	cmp	r0, #0
1000f85c:	d004      	beq.n	1000f868 <_puts_r+0x14>
1000f85e:	6983      	ldr	r3, [r0, #24]
1000f860:	2b00      	cmp	r3, #0
1000f862:	d101      	bne.n	1000f868 <_puts_r+0x14>
1000f864:	f000 faf2 	bl	1000fe4c <__sinit>
1000f868:	68ac      	ldr	r4, [r5, #8]
1000f86a:	89a3      	ldrh	r3, [r4, #12]
1000f86c:	071b      	lsls	r3, r3, #28
1000f86e:	d502      	bpl.n	1000f876 <_puts_r+0x22>
1000f870:	6923      	ldr	r3, [r4, #16]
1000f872:	2b00      	cmp	r3, #0
1000f874:	d119      	bne.n	1000f8aa <_puts_r+0x56>
1000f876:	1c28      	adds	r0, r5, #0
1000f878:	1c21      	adds	r1, r4, #0
1000f87a:	f000 f97b 	bl	1000fb74 <__swsetup_r>
1000f87e:	2800      	cmp	r0, #0
1000f880:	d013      	beq.n	1000f8aa <_puts_r+0x56>
1000f882:	2001      	movs	r0, #1
1000f884:	4240      	negs	r0, r0
1000f886:	e045      	b.n	1000f914 <_puts_r+0xc0>
1000f888:	7831      	ldrb	r1, [r6, #0]
1000f88a:	2b00      	cmp	r3, #0
1000f88c:	da1b      	bge.n	1000f8c6 <_puts_r+0x72>
1000f88e:	69a2      	ldr	r2, [r4, #24]
1000f890:	4293      	cmp	r3, r2
1000f892:	da11      	bge.n	1000f8b8 <_puts_r+0x64>
1000f894:	1c22      	adds	r2, r4, #0
1000f896:	1c28      	adds	r0, r5, #0
1000f898:	f000 f914 	bl	1000fac4 <__swbuf_r>
1000f89c:	3001      	adds	r0, #1
1000f89e:	4242      	negs	r2, r0
1000f8a0:	4142      	adcs	r2, r0
1000f8a2:	b2d0      	uxtb	r0, r2
1000f8a4:	2800      	cmp	r0, #0
1000f8a6:	d1ec      	bne.n	1000f882 <_puts_r+0x2e>
1000f8a8:	3601      	adds	r6, #1
1000f8aa:	68a3      	ldr	r3, [r4, #8]
1000f8ac:	7832      	ldrb	r2, [r6, #0]
1000f8ae:	3b01      	subs	r3, #1
1000f8b0:	60a3      	str	r3, [r4, #8]
1000f8b2:	2a00      	cmp	r2, #0
1000f8b4:	d1e8      	bne.n	1000f888 <_puts_r+0x34>
1000f8b6:	e00c      	b.n	1000f8d2 <_puts_r+0x7e>
1000f8b8:	6823      	ldr	r3, [r4, #0]
1000f8ba:	7019      	strb	r1, [r3, #0]
1000f8bc:	6823      	ldr	r3, [r4, #0]
1000f8be:	7819      	ldrb	r1, [r3, #0]
1000f8c0:	290a      	cmp	r1, #10
1000f8c2:	d103      	bne.n	1000f8cc <_puts_r+0x78>
1000f8c4:	e7e6      	b.n	1000f894 <_puts_r+0x40>
1000f8c6:	6823      	ldr	r3, [r4, #0]
1000f8c8:	7019      	strb	r1, [r3, #0]
1000f8ca:	6823      	ldr	r3, [r4, #0]
1000f8cc:	3301      	adds	r3, #1
1000f8ce:	6023      	str	r3, [r4, #0]
1000f8d0:	e7ea      	b.n	1000f8a8 <_puts_r+0x54>
1000f8d2:	2b00      	cmp	r3, #0
1000f8d4:	da17      	bge.n	1000f906 <_puts_r+0xb2>
1000f8d6:	69a2      	ldr	r2, [r4, #24]
1000f8d8:	4293      	cmp	r3, r2
1000f8da:	db08      	blt.n	1000f8ee <_puts_r+0x9a>
1000f8dc:	230a      	movs	r3, #10
1000f8de:	6822      	ldr	r2, [r4, #0]
1000f8e0:	7013      	strb	r3, [r2, #0]
1000f8e2:	6823      	ldr	r3, [r4, #0]
1000f8e4:	7819      	ldrb	r1, [r3, #0]
1000f8e6:	290a      	cmp	r1, #10
1000f8e8:	d111      	bne.n	1000f90e <_puts_r+0xba>
1000f8ea:	1c28      	adds	r0, r5, #0
1000f8ec:	e001      	b.n	1000f8f2 <_puts_r+0x9e>
1000f8ee:	1c28      	adds	r0, r5, #0
1000f8f0:	210a      	movs	r1, #10
1000f8f2:	1c22      	adds	r2, r4, #0
1000f8f4:	f000 f8e6 	bl	1000fac4 <__swbuf_r>
1000f8f8:	3001      	adds	r0, #1
1000f8fa:	4242      	negs	r2, r0
1000f8fc:	4142      	adcs	r2, r0
1000f8fe:	b2d0      	uxtb	r0, r2
1000f900:	2800      	cmp	r0, #0
1000f902:	d006      	beq.n	1000f912 <_puts_r+0xbe>
1000f904:	e7bd      	b.n	1000f882 <_puts_r+0x2e>
1000f906:	230a      	movs	r3, #10
1000f908:	6822      	ldr	r2, [r4, #0]
1000f90a:	7013      	strb	r3, [r2, #0]
1000f90c:	6823      	ldr	r3, [r4, #0]
1000f90e:	3301      	adds	r3, #1
1000f910:	6023      	str	r3, [r4, #0]
1000f912:	200a      	movs	r0, #10
1000f914:	bd70      	pop	{r4, r5, r6, pc}
	...

1000f918 <puts>:
1000f918:	b508      	push	{r3, lr}
1000f91a:	4b03      	ldr	r3, [pc, #12]	; (1000f928 <puts+0x10>)
1000f91c:	1c01      	adds	r1, r0, #0
1000f91e:	6818      	ldr	r0, [r3, #0]
1000f920:	f7ff ff98 	bl	1000f854 <_puts_r>
1000f924:	bd08      	pop	{r3, pc}
1000f926:	46c0      	nop			; (mov r8, r8)
1000f928:	10011904 	.word	0x10011904

1000f92c <rand>:
1000f92c:	4b15      	ldr	r3, [pc, #84]	; (1000f984 <rand+0x58>)
1000f92e:	b510      	push	{r4, lr}
1000f930:	681c      	ldr	r4, [r3, #0]
1000f932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1000f934:	2b00      	cmp	r3, #0
1000f936:	d115      	bne.n	1000f964 <rand+0x38>
1000f938:	2018      	movs	r0, #24
1000f93a:	f000 fb71 	bl	10010020 <malloc>
1000f93e:	4b12      	ldr	r3, [pc, #72]	; (1000f988 <rand+0x5c>)
1000f940:	63a0      	str	r0, [r4, #56]	; 0x38
1000f942:	8003      	strh	r3, [r0, #0]
1000f944:	4b11      	ldr	r3, [pc, #68]	; (1000f98c <rand+0x60>)
1000f946:	2201      	movs	r2, #1
1000f948:	8043      	strh	r3, [r0, #2]
1000f94a:	4b11      	ldr	r3, [pc, #68]	; (1000f990 <rand+0x64>)
1000f94c:	8083      	strh	r3, [r0, #4]
1000f94e:	4b11      	ldr	r3, [pc, #68]	; (1000f994 <rand+0x68>)
1000f950:	80c3      	strh	r3, [r0, #6]
1000f952:	4b11      	ldr	r3, [pc, #68]	; (1000f998 <rand+0x6c>)
1000f954:	8103      	strh	r3, [r0, #8]
1000f956:	2305      	movs	r3, #5
1000f958:	8143      	strh	r3, [r0, #10]
1000f95a:	3306      	adds	r3, #6
1000f95c:	8183      	strh	r3, [r0, #12]
1000f95e:	2300      	movs	r3, #0
1000f960:	6102      	str	r2, [r0, #16]
1000f962:	6143      	str	r3, [r0, #20]
1000f964:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1000f966:	4a0d      	ldr	r2, [pc, #52]	; (1000f99c <rand+0x70>)
1000f968:	6920      	ldr	r0, [r4, #16]
1000f96a:	6961      	ldr	r1, [r4, #20]
1000f96c:	4b0c      	ldr	r3, [pc, #48]	; (1000f9a0 <rand+0x74>)
1000f96e:	f000 ffd5 	bl	1001091c <__aeabi_lmul>
1000f972:	2201      	movs	r2, #1
1000f974:	2300      	movs	r3, #0
1000f976:	1880      	adds	r0, r0, r2
1000f978:	4159      	adcs	r1, r3
1000f97a:	6120      	str	r0, [r4, #16]
1000f97c:	6161      	str	r1, [r4, #20]
1000f97e:	0048      	lsls	r0, r1, #1
1000f980:	0840      	lsrs	r0, r0, #1
1000f982:	bd10      	pop	{r4, pc}
1000f984:	10011904 	.word	0x10011904
1000f988:	0000330e 	.word	0x0000330e
1000f98c:	ffffabcd 	.word	0xffffabcd
1000f990:	00001234 	.word	0x00001234
1000f994:	ffffe66d 	.word	0xffffe66d
1000f998:	ffffdeec 	.word	0xffffdeec
1000f99c:	4c957f2d 	.word	0x4c957f2d
1000f9a0:	5851f42d 	.word	0x5851f42d

1000f9a4 <setbuf>:
1000f9a4:	b508      	push	{r3, lr}
1000f9a6:	424a      	negs	r2, r1
1000f9a8:	414a      	adcs	r2, r1
1000f9aa:	2380      	movs	r3, #128	; 0x80
1000f9ac:	0052      	lsls	r2, r2, #1
1000f9ae:	00db      	lsls	r3, r3, #3
1000f9b0:	f000 f802 	bl	1000f9b8 <setvbuf>
1000f9b4:	bd08      	pop	{r3, pc}
	...

1000f9b8 <setvbuf>:
1000f9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f9ba:	1c1e      	adds	r6, r3, #0
1000f9bc:	4b3c      	ldr	r3, [pc, #240]	; (1000fab0 <setvbuf+0xf8>)
1000f9be:	1c04      	adds	r4, r0, #0
1000f9c0:	681d      	ldr	r5, [r3, #0]
1000f9c2:	1c0f      	adds	r7, r1, #0
1000f9c4:	9201      	str	r2, [sp, #4]
1000f9c6:	2d00      	cmp	r5, #0
1000f9c8:	d005      	beq.n	1000f9d6 <setvbuf+0x1e>
1000f9ca:	69ab      	ldr	r3, [r5, #24]
1000f9cc:	2b00      	cmp	r3, #0
1000f9ce:	d102      	bne.n	1000f9d6 <setvbuf+0x1e>
1000f9d0:	1c28      	adds	r0, r5, #0
1000f9d2:	f000 fa3b 	bl	1000fe4c <__sinit>
1000f9d6:	4b37      	ldr	r3, [pc, #220]	; (1000fab4 <setvbuf+0xfc>)
1000f9d8:	429c      	cmp	r4, r3
1000f9da:	d101      	bne.n	1000f9e0 <setvbuf+0x28>
1000f9dc:	686c      	ldr	r4, [r5, #4]
1000f9de:	e008      	b.n	1000f9f2 <setvbuf+0x3a>
1000f9e0:	4b35      	ldr	r3, [pc, #212]	; (1000fab8 <setvbuf+0x100>)
1000f9e2:	429c      	cmp	r4, r3
1000f9e4:	d101      	bne.n	1000f9ea <setvbuf+0x32>
1000f9e6:	68ac      	ldr	r4, [r5, #8]
1000f9e8:	e003      	b.n	1000f9f2 <setvbuf+0x3a>
1000f9ea:	4b34      	ldr	r3, [pc, #208]	; (1000fabc <setvbuf+0x104>)
1000f9ec:	429c      	cmp	r4, r3
1000f9ee:	d100      	bne.n	1000f9f2 <setvbuf+0x3a>
1000f9f0:	68ec      	ldr	r4, [r5, #12]
1000f9f2:	9b01      	ldr	r3, [sp, #4]
1000f9f4:	2b02      	cmp	r3, #2
1000f9f6:	d858      	bhi.n	1000faaa <setvbuf+0xf2>
1000f9f8:	2e00      	cmp	r6, #0
1000f9fa:	db56      	blt.n	1000faaa <setvbuf+0xf2>
1000f9fc:	1c28      	adds	r0, r5, #0
1000f9fe:	1c21      	adds	r1, r4, #0
1000fa00:	f000 f9b6 	bl	1000fd70 <_fflush_r>
1000fa04:	2300      	movs	r3, #0
1000fa06:	6063      	str	r3, [r4, #4]
1000fa08:	61a3      	str	r3, [r4, #24]
1000fa0a:	89a3      	ldrh	r3, [r4, #12]
1000fa0c:	061b      	lsls	r3, r3, #24
1000fa0e:	d503      	bpl.n	1000fa18 <setvbuf+0x60>
1000fa10:	1c28      	adds	r0, r5, #0
1000fa12:	6921      	ldr	r1, [r4, #16]
1000fa14:	f000 fb0e 	bl	10010034 <_free_r>
1000fa18:	2283      	movs	r2, #131	; 0x83
1000fa1a:	89a3      	ldrh	r3, [r4, #12]
1000fa1c:	4393      	bics	r3, r2
1000fa1e:	81a3      	strh	r3, [r4, #12]
1000fa20:	9b01      	ldr	r3, [sp, #4]
1000fa22:	2b02      	cmp	r3, #2
1000fa24:	d013      	beq.n	1000fa4e <setvbuf+0x96>
1000fa26:	2f00      	cmp	r7, #0
1000fa28:	d125      	bne.n	1000fa76 <setvbuf+0xbe>
1000fa2a:	2e00      	cmp	r6, #0
1000fa2c:	d101      	bne.n	1000fa32 <setvbuf+0x7a>
1000fa2e:	2680      	movs	r6, #128	; 0x80
1000fa30:	00f6      	lsls	r6, r6, #3
1000fa32:	1c30      	adds	r0, r6, #0
1000fa34:	f000 faf4 	bl	10010020 <malloc>
1000fa38:	1e07      	subs	r7, r0, #0
1000fa3a:	d118      	bne.n	1000fa6e <setvbuf+0xb6>
1000fa3c:	2080      	movs	r0, #128	; 0x80
1000fa3e:	00c0      	lsls	r0, r0, #3
1000fa40:	f000 faee 	bl	10010020 <malloc>
1000fa44:	1e07      	subs	r7, r0, #0
1000fa46:	d110      	bne.n	1000fa6a <setvbuf+0xb2>
1000fa48:	2001      	movs	r0, #1
1000fa4a:	4240      	negs	r0, r0
1000fa4c:	e000      	b.n	1000fa50 <setvbuf+0x98>
1000fa4e:	2000      	movs	r0, #0
1000fa50:	2202      	movs	r2, #2
1000fa52:	89a3      	ldrh	r3, [r4, #12]
1000fa54:	4313      	orrs	r3, r2
1000fa56:	81a3      	strh	r3, [r4, #12]
1000fa58:	2300      	movs	r3, #0
1000fa5a:	60a3      	str	r3, [r4, #8]
1000fa5c:	1c23      	adds	r3, r4, #0
1000fa5e:	3347      	adds	r3, #71	; 0x47
1000fa60:	6023      	str	r3, [r4, #0]
1000fa62:	6123      	str	r3, [r4, #16]
1000fa64:	2301      	movs	r3, #1
1000fa66:	6163      	str	r3, [r4, #20]
1000fa68:	e021      	b.n	1000faae <setvbuf+0xf6>
1000fa6a:	2680      	movs	r6, #128	; 0x80
1000fa6c:	00f6      	lsls	r6, r6, #3
1000fa6e:	2280      	movs	r2, #128	; 0x80
1000fa70:	89a3      	ldrh	r3, [r4, #12]
1000fa72:	4313      	orrs	r3, r2
1000fa74:	81a3      	strh	r3, [r4, #12]
1000fa76:	9b01      	ldr	r3, [sp, #4]
1000fa78:	2b01      	cmp	r3, #1
1000fa7a:	d105      	bne.n	1000fa88 <setvbuf+0xd0>
1000fa7c:	89a3      	ldrh	r3, [r4, #12]
1000fa7e:	9a01      	ldr	r2, [sp, #4]
1000fa80:	431a      	orrs	r2, r3
1000fa82:	4273      	negs	r3, r6
1000fa84:	81a2      	strh	r2, [r4, #12]
1000fa86:	61a3      	str	r3, [r4, #24]
1000fa88:	4b0d      	ldr	r3, [pc, #52]	; (1000fac0 <setvbuf+0x108>)
1000fa8a:	2000      	movs	r0, #0
1000fa8c:	62ab      	str	r3, [r5, #40]	; 0x28
1000fa8e:	89a2      	ldrh	r2, [r4, #12]
1000fa90:	6027      	str	r7, [r4, #0]
1000fa92:	6127      	str	r7, [r4, #16]
1000fa94:	6166      	str	r6, [r4, #20]
1000fa96:	0713      	lsls	r3, r2, #28
1000fa98:	d509      	bpl.n	1000faae <setvbuf+0xf6>
1000fa9a:	2303      	movs	r3, #3
1000fa9c:	401a      	ands	r2, r3
1000fa9e:	4253      	negs	r3, r2
1000faa0:	4153      	adcs	r3, r2
1000faa2:	425b      	negs	r3, r3
1000faa4:	401e      	ands	r6, r3
1000faa6:	60a6      	str	r6, [r4, #8]
1000faa8:	e001      	b.n	1000faae <setvbuf+0xf6>
1000faaa:	2001      	movs	r0, #1
1000faac:	4240      	negs	r0, r0
1000faae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fab0:	10011904 	.word	0x10011904
1000fab4:	100117c8 	.word	0x100117c8
1000fab8:	100117e8 	.word	0x100117e8
1000fabc:	10011808 	.word	0x10011808
1000fac0:	1000fdc9 	.word	0x1000fdc9

1000fac4 <__swbuf_r>:
1000fac4:	b570      	push	{r4, r5, r6, lr}
1000fac6:	1c05      	adds	r5, r0, #0
1000fac8:	1c0e      	adds	r6, r1, #0
1000faca:	1c14      	adds	r4, r2, #0
1000facc:	2800      	cmp	r0, #0
1000face:	d004      	beq.n	1000fada <__swbuf_r+0x16>
1000fad0:	6983      	ldr	r3, [r0, #24]
1000fad2:	2b00      	cmp	r3, #0
1000fad4:	d101      	bne.n	1000fada <__swbuf_r+0x16>
1000fad6:	f000 f9b9 	bl	1000fe4c <__sinit>
1000fada:	4b23      	ldr	r3, [pc, #140]	; (1000fb68 <__swbuf_r+0xa4>)
1000fadc:	429c      	cmp	r4, r3
1000fade:	d101      	bne.n	1000fae4 <__swbuf_r+0x20>
1000fae0:	686c      	ldr	r4, [r5, #4]
1000fae2:	e008      	b.n	1000faf6 <__swbuf_r+0x32>
1000fae4:	4b21      	ldr	r3, [pc, #132]	; (1000fb6c <__swbuf_r+0xa8>)
1000fae6:	429c      	cmp	r4, r3
1000fae8:	d101      	bne.n	1000faee <__swbuf_r+0x2a>
1000faea:	68ac      	ldr	r4, [r5, #8]
1000faec:	e003      	b.n	1000faf6 <__swbuf_r+0x32>
1000faee:	4b20      	ldr	r3, [pc, #128]	; (1000fb70 <__swbuf_r+0xac>)
1000faf0:	429c      	cmp	r4, r3
1000faf2:	d100      	bne.n	1000faf6 <__swbuf_r+0x32>
1000faf4:	68ec      	ldr	r4, [r5, #12]
1000faf6:	69a3      	ldr	r3, [r4, #24]
1000faf8:	60a3      	str	r3, [r4, #8]
1000fafa:	89a3      	ldrh	r3, [r4, #12]
1000fafc:	071b      	lsls	r3, r3, #28
1000fafe:	d50a      	bpl.n	1000fb16 <__swbuf_r+0x52>
1000fb00:	6923      	ldr	r3, [r4, #16]
1000fb02:	2b00      	cmp	r3, #0
1000fb04:	d007      	beq.n	1000fb16 <__swbuf_r+0x52>
1000fb06:	6823      	ldr	r3, [r4, #0]
1000fb08:	6922      	ldr	r2, [r4, #16]
1000fb0a:	b2f6      	uxtb	r6, r6
1000fb0c:	1a98      	subs	r0, r3, r2
1000fb0e:	6963      	ldr	r3, [r4, #20]
1000fb10:	4298      	cmp	r0, r3
1000fb12:	db0f      	blt.n	1000fb34 <__swbuf_r+0x70>
1000fb14:	e008      	b.n	1000fb28 <__swbuf_r+0x64>
1000fb16:	1c28      	adds	r0, r5, #0
1000fb18:	1c21      	adds	r1, r4, #0
1000fb1a:	f000 f82b 	bl	1000fb74 <__swsetup_r>
1000fb1e:	2800      	cmp	r0, #0
1000fb20:	d0f1      	beq.n	1000fb06 <__swbuf_r+0x42>
1000fb22:	2001      	movs	r0, #1
1000fb24:	4240      	negs	r0, r0
1000fb26:	e01d      	b.n	1000fb64 <__swbuf_r+0xa0>
1000fb28:	1c28      	adds	r0, r5, #0
1000fb2a:	1c21      	adds	r1, r4, #0
1000fb2c:	f000 f920 	bl	1000fd70 <_fflush_r>
1000fb30:	2800      	cmp	r0, #0
1000fb32:	d1f6      	bne.n	1000fb22 <__swbuf_r+0x5e>
1000fb34:	68a3      	ldr	r3, [r4, #8]
1000fb36:	3001      	adds	r0, #1
1000fb38:	3b01      	subs	r3, #1
1000fb3a:	60a3      	str	r3, [r4, #8]
1000fb3c:	6823      	ldr	r3, [r4, #0]
1000fb3e:	1c5a      	adds	r2, r3, #1
1000fb40:	6022      	str	r2, [r4, #0]
1000fb42:	701e      	strb	r6, [r3, #0]
1000fb44:	6963      	ldr	r3, [r4, #20]
1000fb46:	4298      	cmp	r0, r3
1000fb48:	d005      	beq.n	1000fb56 <__swbuf_r+0x92>
1000fb4a:	89a3      	ldrh	r3, [r4, #12]
1000fb4c:	1c30      	adds	r0, r6, #0
1000fb4e:	07db      	lsls	r3, r3, #31
1000fb50:	d508      	bpl.n	1000fb64 <__swbuf_r+0xa0>
1000fb52:	2e0a      	cmp	r6, #10
1000fb54:	d106      	bne.n	1000fb64 <__swbuf_r+0xa0>
1000fb56:	1c28      	adds	r0, r5, #0
1000fb58:	1c21      	adds	r1, r4, #0
1000fb5a:	f000 f909 	bl	1000fd70 <_fflush_r>
1000fb5e:	2800      	cmp	r0, #0
1000fb60:	d1df      	bne.n	1000fb22 <__swbuf_r+0x5e>
1000fb62:	1c30      	adds	r0, r6, #0
1000fb64:	bd70      	pop	{r4, r5, r6, pc}
1000fb66:	46c0      	nop			; (mov r8, r8)
1000fb68:	100117c8 	.word	0x100117c8
1000fb6c:	100117e8 	.word	0x100117e8
1000fb70:	10011808 	.word	0x10011808

1000fb74 <__swsetup_r>:
1000fb74:	4b35      	ldr	r3, [pc, #212]	; (1000fc4c <__swsetup_r+0xd8>)
1000fb76:	b570      	push	{r4, r5, r6, lr}
1000fb78:	681d      	ldr	r5, [r3, #0]
1000fb7a:	1c06      	adds	r6, r0, #0
1000fb7c:	1c0c      	adds	r4, r1, #0
1000fb7e:	2d00      	cmp	r5, #0
1000fb80:	d005      	beq.n	1000fb8e <__swsetup_r+0x1a>
1000fb82:	69ab      	ldr	r3, [r5, #24]
1000fb84:	2b00      	cmp	r3, #0
1000fb86:	d102      	bne.n	1000fb8e <__swsetup_r+0x1a>
1000fb88:	1c28      	adds	r0, r5, #0
1000fb8a:	f000 f95f 	bl	1000fe4c <__sinit>
1000fb8e:	4b30      	ldr	r3, [pc, #192]	; (1000fc50 <__swsetup_r+0xdc>)
1000fb90:	429c      	cmp	r4, r3
1000fb92:	d101      	bne.n	1000fb98 <__swsetup_r+0x24>
1000fb94:	686c      	ldr	r4, [r5, #4]
1000fb96:	e008      	b.n	1000fbaa <__swsetup_r+0x36>
1000fb98:	4b2e      	ldr	r3, [pc, #184]	; (1000fc54 <__swsetup_r+0xe0>)
1000fb9a:	429c      	cmp	r4, r3
1000fb9c:	d101      	bne.n	1000fba2 <__swsetup_r+0x2e>
1000fb9e:	68ac      	ldr	r4, [r5, #8]
1000fba0:	e003      	b.n	1000fbaa <__swsetup_r+0x36>
1000fba2:	4b2d      	ldr	r3, [pc, #180]	; (1000fc58 <__swsetup_r+0xe4>)
1000fba4:	429c      	cmp	r4, r3
1000fba6:	d100      	bne.n	1000fbaa <__swsetup_r+0x36>
1000fba8:	68ec      	ldr	r4, [r5, #12]
1000fbaa:	89a3      	ldrh	r3, [r4, #12]
1000fbac:	b29a      	uxth	r2, r3
1000fbae:	0711      	lsls	r1, r2, #28
1000fbb0:	d423      	bmi.n	1000fbfa <__swsetup_r+0x86>
1000fbb2:	06d1      	lsls	r1, r2, #27
1000fbb4:	d407      	bmi.n	1000fbc6 <__swsetup_r+0x52>
1000fbb6:	2209      	movs	r2, #9
1000fbb8:	2001      	movs	r0, #1
1000fbba:	6032      	str	r2, [r6, #0]
1000fbbc:	3237      	adds	r2, #55	; 0x37
1000fbbe:	4313      	orrs	r3, r2
1000fbc0:	81a3      	strh	r3, [r4, #12]
1000fbc2:	4240      	negs	r0, r0
1000fbc4:	e040      	b.n	1000fc48 <__swsetup_r+0xd4>
1000fbc6:	0753      	lsls	r3, r2, #29
1000fbc8:	d513      	bpl.n	1000fbf2 <__swsetup_r+0x7e>
1000fbca:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fbcc:	2900      	cmp	r1, #0
1000fbce:	d008      	beq.n	1000fbe2 <__swsetup_r+0x6e>
1000fbd0:	1c23      	adds	r3, r4, #0
1000fbd2:	3344      	adds	r3, #68	; 0x44
1000fbd4:	4299      	cmp	r1, r3
1000fbd6:	d002      	beq.n	1000fbde <__swsetup_r+0x6a>
1000fbd8:	1c30      	adds	r0, r6, #0
1000fbda:	f000 fa2b 	bl	10010034 <_free_r>
1000fbde:	2300      	movs	r3, #0
1000fbe0:	6363      	str	r3, [r4, #52]	; 0x34
1000fbe2:	2224      	movs	r2, #36	; 0x24
1000fbe4:	89a3      	ldrh	r3, [r4, #12]
1000fbe6:	4393      	bics	r3, r2
1000fbe8:	81a3      	strh	r3, [r4, #12]
1000fbea:	2300      	movs	r3, #0
1000fbec:	6063      	str	r3, [r4, #4]
1000fbee:	6923      	ldr	r3, [r4, #16]
1000fbf0:	6023      	str	r3, [r4, #0]
1000fbf2:	2208      	movs	r2, #8
1000fbf4:	89a3      	ldrh	r3, [r4, #12]
1000fbf6:	4313      	orrs	r3, r2
1000fbf8:	81a3      	strh	r3, [r4, #12]
1000fbfa:	6923      	ldr	r3, [r4, #16]
1000fbfc:	2b00      	cmp	r3, #0
1000fbfe:	d10b      	bne.n	1000fc18 <__swsetup_r+0xa4>
1000fc00:	23a0      	movs	r3, #160	; 0xa0
1000fc02:	89a2      	ldrh	r2, [r4, #12]
1000fc04:	009b      	lsls	r3, r3, #2
1000fc06:	4013      	ands	r3, r2
1000fc08:	2280      	movs	r2, #128	; 0x80
1000fc0a:	0092      	lsls	r2, r2, #2
1000fc0c:	4293      	cmp	r3, r2
1000fc0e:	d003      	beq.n	1000fc18 <__swsetup_r+0xa4>
1000fc10:	1c30      	adds	r0, r6, #0
1000fc12:	1c21      	adds	r1, r4, #0
1000fc14:	f000 f9ac 	bl	1000ff70 <__smakebuf_r>
1000fc18:	2301      	movs	r3, #1
1000fc1a:	89a2      	ldrh	r2, [r4, #12]
1000fc1c:	4013      	ands	r3, r2
1000fc1e:	d005      	beq.n	1000fc2c <__swsetup_r+0xb8>
1000fc20:	2300      	movs	r3, #0
1000fc22:	60a3      	str	r3, [r4, #8]
1000fc24:	6963      	ldr	r3, [r4, #20]
1000fc26:	425b      	negs	r3, r3
1000fc28:	61a3      	str	r3, [r4, #24]
1000fc2a:	e003      	b.n	1000fc34 <__swsetup_r+0xc0>
1000fc2c:	0791      	lsls	r1, r2, #30
1000fc2e:	d400      	bmi.n	1000fc32 <__swsetup_r+0xbe>
1000fc30:	6963      	ldr	r3, [r4, #20]
1000fc32:	60a3      	str	r3, [r4, #8]
1000fc34:	2000      	movs	r0, #0
1000fc36:	6923      	ldr	r3, [r4, #16]
1000fc38:	4283      	cmp	r3, r0
1000fc3a:	d105      	bne.n	1000fc48 <__swsetup_r+0xd4>
1000fc3c:	0613      	lsls	r3, r2, #24
1000fc3e:	d503      	bpl.n	1000fc48 <__swsetup_r+0xd4>
1000fc40:	2340      	movs	r3, #64	; 0x40
1000fc42:	431a      	orrs	r2, r3
1000fc44:	81a2      	strh	r2, [r4, #12]
1000fc46:	3801      	subs	r0, #1
1000fc48:	bd70      	pop	{r4, r5, r6, pc}
1000fc4a:	46c0      	nop			; (mov r8, r8)
1000fc4c:	10011904 	.word	0x10011904
1000fc50:	100117c8 	.word	0x100117c8
1000fc54:	100117e8 	.word	0x100117e8
1000fc58:	10011808 	.word	0x10011808

1000fc5c <__sflush_r>:
1000fc5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fc5e:	898a      	ldrh	r2, [r1, #12]
1000fc60:	1c05      	adds	r5, r0, #0
1000fc62:	1c0c      	adds	r4, r1, #0
1000fc64:	0713      	lsls	r3, r2, #28
1000fc66:	d45e      	bmi.n	1000fd26 <__sflush_r+0xca>
1000fc68:	684b      	ldr	r3, [r1, #4]
1000fc6a:	2b00      	cmp	r3, #0
1000fc6c:	dc02      	bgt.n	1000fc74 <__sflush_r+0x18>
1000fc6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000fc70:	2b00      	cmp	r3, #0
1000fc72:	dd1a      	ble.n	1000fcaa <__sflush_r+0x4e>
1000fc74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000fc76:	2f00      	cmp	r7, #0
1000fc78:	d017      	beq.n	1000fcaa <__sflush_r+0x4e>
1000fc7a:	2300      	movs	r3, #0
1000fc7c:	682e      	ldr	r6, [r5, #0]
1000fc7e:	602b      	str	r3, [r5, #0]
1000fc80:	2380      	movs	r3, #128	; 0x80
1000fc82:	015b      	lsls	r3, r3, #5
1000fc84:	401a      	ands	r2, r3
1000fc86:	d001      	beq.n	1000fc8c <__sflush_r+0x30>
1000fc88:	6d62      	ldr	r2, [r4, #84]	; 0x54
1000fc8a:	e015      	b.n	1000fcb8 <__sflush_r+0x5c>
1000fc8c:	1c28      	adds	r0, r5, #0
1000fc8e:	6a21      	ldr	r1, [r4, #32]
1000fc90:	2301      	movs	r3, #1
1000fc92:	47b8      	blx	r7
1000fc94:	1c02      	adds	r2, r0, #0
1000fc96:	1c43      	adds	r3, r0, #1
1000fc98:	d10e      	bne.n	1000fcb8 <__sflush_r+0x5c>
1000fc9a:	682b      	ldr	r3, [r5, #0]
1000fc9c:	2b00      	cmp	r3, #0
1000fc9e:	d00b      	beq.n	1000fcb8 <__sflush_r+0x5c>
1000fca0:	2b1d      	cmp	r3, #29
1000fca2:	d001      	beq.n	1000fca8 <__sflush_r+0x4c>
1000fca4:	2b16      	cmp	r3, #22
1000fca6:	d102      	bne.n	1000fcae <__sflush_r+0x52>
1000fca8:	602e      	str	r6, [r5, #0]
1000fcaa:	2000      	movs	r0, #0
1000fcac:	e05e      	b.n	1000fd6c <__sflush_r+0x110>
1000fcae:	2140      	movs	r1, #64	; 0x40
1000fcb0:	89a3      	ldrh	r3, [r4, #12]
1000fcb2:	430b      	orrs	r3, r1
1000fcb4:	81a3      	strh	r3, [r4, #12]
1000fcb6:	e059      	b.n	1000fd6c <__sflush_r+0x110>
1000fcb8:	89a3      	ldrh	r3, [r4, #12]
1000fcba:	075b      	lsls	r3, r3, #29
1000fcbc:	d506      	bpl.n	1000fccc <__sflush_r+0x70>
1000fcbe:	6863      	ldr	r3, [r4, #4]
1000fcc0:	1ad2      	subs	r2, r2, r3
1000fcc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000fcc4:	2b00      	cmp	r3, #0
1000fcc6:	d001      	beq.n	1000fccc <__sflush_r+0x70>
1000fcc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000fcca:	1ad2      	subs	r2, r2, r3
1000fccc:	2300      	movs	r3, #0
1000fcce:	1c28      	adds	r0, r5, #0
1000fcd0:	6a21      	ldr	r1, [r4, #32]
1000fcd2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000fcd4:	47b8      	blx	r7
1000fcd6:	89a3      	ldrh	r3, [r4, #12]
1000fcd8:	1c42      	adds	r2, r0, #1
1000fcda:	d106      	bne.n	1000fcea <__sflush_r+0x8e>
1000fcdc:	682a      	ldr	r2, [r5, #0]
1000fcde:	2a00      	cmp	r2, #0
1000fce0:	d003      	beq.n	1000fcea <__sflush_r+0x8e>
1000fce2:	2a1d      	cmp	r2, #29
1000fce4:	d001      	beq.n	1000fcea <__sflush_r+0x8e>
1000fce6:	2a16      	cmp	r2, #22
1000fce8:	d119      	bne.n	1000fd1e <__sflush_r+0xc2>
1000fcea:	2200      	movs	r2, #0
1000fcec:	6062      	str	r2, [r4, #4]
1000fcee:	6922      	ldr	r2, [r4, #16]
1000fcf0:	6022      	str	r2, [r4, #0]
1000fcf2:	04db      	lsls	r3, r3, #19
1000fcf4:	d505      	bpl.n	1000fd02 <__sflush_r+0xa6>
1000fcf6:	1c43      	adds	r3, r0, #1
1000fcf8:	d102      	bne.n	1000fd00 <__sflush_r+0xa4>
1000fcfa:	682b      	ldr	r3, [r5, #0]
1000fcfc:	2b00      	cmp	r3, #0
1000fcfe:	d100      	bne.n	1000fd02 <__sflush_r+0xa6>
1000fd00:	6560      	str	r0, [r4, #84]	; 0x54
1000fd02:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fd04:	602e      	str	r6, [r5, #0]
1000fd06:	2900      	cmp	r1, #0
1000fd08:	d0cf      	beq.n	1000fcaa <__sflush_r+0x4e>
1000fd0a:	1c23      	adds	r3, r4, #0
1000fd0c:	3344      	adds	r3, #68	; 0x44
1000fd0e:	4299      	cmp	r1, r3
1000fd10:	d002      	beq.n	1000fd18 <__sflush_r+0xbc>
1000fd12:	1c28      	adds	r0, r5, #0
1000fd14:	f000 f98e 	bl	10010034 <_free_r>
1000fd18:	2000      	movs	r0, #0
1000fd1a:	6360      	str	r0, [r4, #52]	; 0x34
1000fd1c:	e026      	b.n	1000fd6c <__sflush_r+0x110>
1000fd1e:	2240      	movs	r2, #64	; 0x40
1000fd20:	4313      	orrs	r3, r2
1000fd22:	81a3      	strh	r3, [r4, #12]
1000fd24:	e022      	b.n	1000fd6c <__sflush_r+0x110>
1000fd26:	690f      	ldr	r7, [r1, #16]
1000fd28:	2f00      	cmp	r7, #0
1000fd2a:	d0be      	beq.n	1000fcaa <__sflush_r+0x4e>
1000fd2c:	680b      	ldr	r3, [r1, #0]
1000fd2e:	600f      	str	r7, [r1, #0]
1000fd30:	1bdb      	subs	r3, r3, r7
1000fd32:	9301      	str	r3, [sp, #4]
1000fd34:	2300      	movs	r3, #0
1000fd36:	0792      	lsls	r2, r2, #30
1000fd38:	d100      	bne.n	1000fd3c <__sflush_r+0xe0>
1000fd3a:	694b      	ldr	r3, [r1, #20]
1000fd3c:	60a3      	str	r3, [r4, #8]
1000fd3e:	9b01      	ldr	r3, [sp, #4]
1000fd40:	2b00      	cmp	r3, #0
1000fd42:	ddb2      	ble.n	1000fcaa <__sflush_r+0x4e>
1000fd44:	1c28      	adds	r0, r5, #0
1000fd46:	6a21      	ldr	r1, [r4, #32]
1000fd48:	1c3a      	adds	r2, r7, #0
1000fd4a:	9b01      	ldr	r3, [sp, #4]
1000fd4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000fd4e:	47b0      	blx	r6
1000fd50:	2800      	cmp	r0, #0
1000fd52:	dc06      	bgt.n	1000fd62 <__sflush_r+0x106>
1000fd54:	2240      	movs	r2, #64	; 0x40
1000fd56:	2001      	movs	r0, #1
1000fd58:	89a3      	ldrh	r3, [r4, #12]
1000fd5a:	4240      	negs	r0, r0
1000fd5c:	4313      	orrs	r3, r2
1000fd5e:	81a3      	strh	r3, [r4, #12]
1000fd60:	e004      	b.n	1000fd6c <__sflush_r+0x110>
1000fd62:	9b01      	ldr	r3, [sp, #4]
1000fd64:	183f      	adds	r7, r7, r0
1000fd66:	1a1b      	subs	r3, r3, r0
1000fd68:	9301      	str	r3, [sp, #4]
1000fd6a:	e7e8      	b.n	1000fd3e <__sflush_r+0xe2>
1000fd6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1000fd70 <_fflush_r>:
1000fd70:	b538      	push	{r3, r4, r5, lr}
1000fd72:	690b      	ldr	r3, [r1, #16]
1000fd74:	1c05      	adds	r5, r0, #0
1000fd76:	1c0c      	adds	r4, r1, #0
1000fd78:	2b00      	cmp	r3, #0
1000fd7a:	d101      	bne.n	1000fd80 <_fflush_r+0x10>
1000fd7c:	2000      	movs	r0, #0
1000fd7e:	e01c      	b.n	1000fdba <_fflush_r+0x4a>
1000fd80:	2800      	cmp	r0, #0
1000fd82:	d004      	beq.n	1000fd8e <_fflush_r+0x1e>
1000fd84:	6983      	ldr	r3, [r0, #24]
1000fd86:	2b00      	cmp	r3, #0
1000fd88:	d101      	bne.n	1000fd8e <_fflush_r+0x1e>
1000fd8a:	f000 f85f 	bl	1000fe4c <__sinit>
1000fd8e:	4b0b      	ldr	r3, [pc, #44]	; (1000fdbc <_fflush_r+0x4c>)
1000fd90:	429c      	cmp	r4, r3
1000fd92:	d101      	bne.n	1000fd98 <_fflush_r+0x28>
1000fd94:	686c      	ldr	r4, [r5, #4]
1000fd96:	e008      	b.n	1000fdaa <_fflush_r+0x3a>
1000fd98:	4b09      	ldr	r3, [pc, #36]	; (1000fdc0 <_fflush_r+0x50>)
1000fd9a:	429c      	cmp	r4, r3
1000fd9c:	d101      	bne.n	1000fda2 <_fflush_r+0x32>
1000fd9e:	68ac      	ldr	r4, [r5, #8]
1000fda0:	e003      	b.n	1000fdaa <_fflush_r+0x3a>
1000fda2:	4b08      	ldr	r3, [pc, #32]	; (1000fdc4 <_fflush_r+0x54>)
1000fda4:	429c      	cmp	r4, r3
1000fda6:	d100      	bne.n	1000fdaa <_fflush_r+0x3a>
1000fda8:	68ec      	ldr	r4, [r5, #12]
1000fdaa:	220c      	movs	r2, #12
1000fdac:	5ea3      	ldrsh	r3, [r4, r2]
1000fdae:	2b00      	cmp	r3, #0
1000fdb0:	d0e4      	beq.n	1000fd7c <_fflush_r+0xc>
1000fdb2:	1c28      	adds	r0, r5, #0
1000fdb4:	1c21      	adds	r1, r4, #0
1000fdb6:	f7ff ff51 	bl	1000fc5c <__sflush_r>
1000fdba:	bd38      	pop	{r3, r4, r5, pc}
1000fdbc:	100117c8 	.word	0x100117c8
1000fdc0:	100117e8 	.word	0x100117e8
1000fdc4:	10011808 	.word	0x10011808

1000fdc8 <_cleanup_r>:
1000fdc8:	b508      	push	{r3, lr}
1000fdca:	4902      	ldr	r1, [pc, #8]	; (1000fdd4 <_cleanup_r+0xc>)
1000fdcc:	f000 f8ae 	bl	1000ff2c <_fwalk_reent>
1000fdd0:	bd08      	pop	{r3, pc}
1000fdd2:	46c0      	nop			; (mov r8, r8)
1000fdd4:	1000fd71 	.word	0x1000fd71

1000fdd8 <std.isra.0>:
1000fdd8:	2300      	movs	r3, #0
1000fdda:	b510      	push	{r4, lr}
1000fddc:	1c04      	adds	r4, r0, #0
1000fdde:	6003      	str	r3, [r0, #0]
1000fde0:	6043      	str	r3, [r0, #4]
1000fde2:	6083      	str	r3, [r0, #8]
1000fde4:	8181      	strh	r1, [r0, #12]
1000fde6:	6643      	str	r3, [r0, #100]	; 0x64
1000fde8:	81c2      	strh	r2, [r0, #14]
1000fdea:	6103      	str	r3, [r0, #16]
1000fdec:	6143      	str	r3, [r0, #20]
1000fdee:	6183      	str	r3, [r0, #24]
1000fdf0:	1c19      	adds	r1, r3, #0
1000fdf2:	2208      	movs	r2, #8
1000fdf4:	305c      	adds	r0, #92	; 0x5c
1000fdf6:	f7ff fcf7 	bl	1000f7e8 <memset>
1000fdfa:	4b05      	ldr	r3, [pc, #20]	; (1000fe10 <std.isra.0+0x38>)
1000fdfc:	6224      	str	r4, [r4, #32]
1000fdfe:	6263      	str	r3, [r4, #36]	; 0x24
1000fe00:	4b04      	ldr	r3, [pc, #16]	; (1000fe14 <std.isra.0+0x3c>)
1000fe02:	62a3      	str	r3, [r4, #40]	; 0x28
1000fe04:	4b04      	ldr	r3, [pc, #16]	; (1000fe18 <std.isra.0+0x40>)
1000fe06:	62e3      	str	r3, [r4, #44]	; 0x2c
1000fe08:	4b04      	ldr	r3, [pc, #16]	; (1000fe1c <std.isra.0+0x44>)
1000fe0a:	6323      	str	r3, [r4, #48]	; 0x30
1000fe0c:	bd10      	pop	{r4, pc}
1000fe0e:	46c0      	nop			; (mov r8, r8)
1000fe10:	10010789 	.word	0x10010789
1000fe14:	100107b1 	.word	0x100107b1
1000fe18:	100107e9 	.word	0x100107e9
1000fe1c:	10010815 	.word	0x10010815

1000fe20 <__sfmoreglue>:
1000fe20:	b570      	push	{r4, r5, r6, lr}
1000fe22:	2568      	movs	r5, #104	; 0x68
1000fe24:	1e4b      	subs	r3, r1, #1
1000fe26:	435d      	muls	r5, r3
1000fe28:	1c0e      	adds	r6, r1, #0
1000fe2a:	1c29      	adds	r1, r5, #0
1000fe2c:	3174      	adds	r1, #116	; 0x74
1000fe2e:	f000 f947 	bl	100100c0 <_malloc_r>
1000fe32:	1e04      	subs	r4, r0, #0
1000fe34:	d008      	beq.n	1000fe48 <__sfmoreglue+0x28>
1000fe36:	2100      	movs	r1, #0
1000fe38:	1c2a      	adds	r2, r5, #0
1000fe3a:	6001      	str	r1, [r0, #0]
1000fe3c:	6046      	str	r6, [r0, #4]
1000fe3e:	300c      	adds	r0, #12
1000fe40:	60a0      	str	r0, [r4, #8]
1000fe42:	3268      	adds	r2, #104	; 0x68
1000fe44:	f7ff fcd0 	bl	1000f7e8 <memset>
1000fe48:	1c20      	adds	r0, r4, #0
1000fe4a:	bd70      	pop	{r4, r5, r6, pc}

1000fe4c <__sinit>:
1000fe4c:	6983      	ldr	r3, [r0, #24]
1000fe4e:	b513      	push	{r0, r1, r4, lr}
1000fe50:	2b00      	cmp	r3, #0
1000fe52:	d128      	bne.n	1000fea6 <__sinit+0x5a>
1000fe54:	6483      	str	r3, [r0, #72]	; 0x48
1000fe56:	64c3      	str	r3, [r0, #76]	; 0x4c
1000fe58:	6503      	str	r3, [r0, #80]	; 0x50
1000fe5a:	4b13      	ldr	r3, [pc, #76]	; (1000fea8 <__sinit+0x5c>)
1000fe5c:	4a13      	ldr	r2, [pc, #76]	; (1000feac <__sinit+0x60>)
1000fe5e:	681b      	ldr	r3, [r3, #0]
1000fe60:	6282      	str	r2, [r0, #40]	; 0x28
1000fe62:	9301      	str	r3, [sp, #4]
1000fe64:	4298      	cmp	r0, r3
1000fe66:	d101      	bne.n	1000fe6c <__sinit+0x20>
1000fe68:	2301      	movs	r3, #1
1000fe6a:	6183      	str	r3, [r0, #24]
1000fe6c:	1c04      	adds	r4, r0, #0
1000fe6e:	f000 f81f 	bl	1000feb0 <__sfp>
1000fe72:	6060      	str	r0, [r4, #4]
1000fe74:	1c20      	adds	r0, r4, #0
1000fe76:	f000 f81b 	bl	1000feb0 <__sfp>
1000fe7a:	60a0      	str	r0, [r4, #8]
1000fe7c:	1c20      	adds	r0, r4, #0
1000fe7e:	f000 f817 	bl	1000feb0 <__sfp>
1000fe82:	2104      	movs	r1, #4
1000fe84:	60e0      	str	r0, [r4, #12]
1000fe86:	2200      	movs	r2, #0
1000fe88:	6860      	ldr	r0, [r4, #4]
1000fe8a:	f7ff ffa5 	bl	1000fdd8 <std.isra.0>
1000fe8e:	68a0      	ldr	r0, [r4, #8]
1000fe90:	2109      	movs	r1, #9
1000fe92:	2201      	movs	r2, #1
1000fe94:	f7ff ffa0 	bl	1000fdd8 <std.isra.0>
1000fe98:	68e0      	ldr	r0, [r4, #12]
1000fe9a:	2112      	movs	r1, #18
1000fe9c:	2202      	movs	r2, #2
1000fe9e:	f7ff ff9b 	bl	1000fdd8 <std.isra.0>
1000fea2:	2301      	movs	r3, #1
1000fea4:	61a3      	str	r3, [r4, #24]
1000fea6:	bd13      	pop	{r0, r1, r4, pc}
1000fea8:	100117c4 	.word	0x100117c4
1000feac:	1000fdc9 	.word	0x1000fdc9

1000feb0 <__sfp>:
1000feb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000feb2:	4b1d      	ldr	r3, [pc, #116]	; (1000ff28 <__sfp+0x78>)
1000feb4:	1c06      	adds	r6, r0, #0
1000feb6:	681d      	ldr	r5, [r3, #0]
1000feb8:	69ab      	ldr	r3, [r5, #24]
1000feba:	2b00      	cmp	r3, #0
1000febc:	d102      	bne.n	1000fec4 <__sfp+0x14>
1000febe:	1c28      	adds	r0, r5, #0
1000fec0:	f7ff ffc4 	bl	1000fe4c <__sinit>
1000fec4:	3548      	adds	r5, #72	; 0x48
1000fec6:	68ac      	ldr	r4, [r5, #8]
1000fec8:	686b      	ldr	r3, [r5, #4]
1000feca:	3b01      	subs	r3, #1
1000fecc:	d405      	bmi.n	1000feda <__sfp+0x2a>
1000fece:	220c      	movs	r2, #12
1000fed0:	5ea7      	ldrsh	r7, [r4, r2]
1000fed2:	2f00      	cmp	r7, #0
1000fed4:	d010      	beq.n	1000fef8 <__sfp+0x48>
1000fed6:	3468      	adds	r4, #104	; 0x68
1000fed8:	e7f7      	b.n	1000feca <__sfp+0x1a>
1000feda:	682b      	ldr	r3, [r5, #0]
1000fedc:	2b00      	cmp	r3, #0
1000fede:	d106      	bne.n	1000feee <__sfp+0x3e>
1000fee0:	1c30      	adds	r0, r6, #0
1000fee2:	2104      	movs	r1, #4
1000fee4:	f7ff ff9c 	bl	1000fe20 <__sfmoreglue>
1000fee8:	6028      	str	r0, [r5, #0]
1000feea:	2800      	cmp	r0, #0
1000feec:	d001      	beq.n	1000fef2 <__sfp+0x42>
1000feee:	682d      	ldr	r5, [r5, #0]
1000fef0:	e7e9      	b.n	1000fec6 <__sfp+0x16>
1000fef2:	230c      	movs	r3, #12
1000fef4:	6033      	str	r3, [r6, #0]
1000fef6:	e016      	b.n	1000ff26 <__sfp+0x76>
1000fef8:	2301      	movs	r3, #1
1000fefa:	1c20      	adds	r0, r4, #0
1000fefc:	425b      	negs	r3, r3
1000fefe:	81e3      	strh	r3, [r4, #14]
1000ff00:	3302      	adds	r3, #2
1000ff02:	81a3      	strh	r3, [r4, #12]
1000ff04:	6667      	str	r7, [r4, #100]	; 0x64
1000ff06:	6027      	str	r7, [r4, #0]
1000ff08:	60a7      	str	r7, [r4, #8]
1000ff0a:	6067      	str	r7, [r4, #4]
1000ff0c:	6127      	str	r7, [r4, #16]
1000ff0e:	6167      	str	r7, [r4, #20]
1000ff10:	61a7      	str	r7, [r4, #24]
1000ff12:	305c      	adds	r0, #92	; 0x5c
1000ff14:	1c39      	adds	r1, r7, #0
1000ff16:	2208      	movs	r2, #8
1000ff18:	f7ff fc66 	bl	1000f7e8 <memset>
1000ff1c:	1c20      	adds	r0, r4, #0
1000ff1e:	6367      	str	r7, [r4, #52]	; 0x34
1000ff20:	63a7      	str	r7, [r4, #56]	; 0x38
1000ff22:	64a7      	str	r7, [r4, #72]	; 0x48
1000ff24:	64e7      	str	r7, [r4, #76]	; 0x4c
1000ff26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ff28:	100117c4 	.word	0x100117c4

1000ff2c <_fwalk_reent>:
1000ff2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ff2e:	1c04      	adds	r4, r0, #0
1000ff30:	1c07      	adds	r7, r0, #0
1000ff32:	2600      	movs	r6, #0
1000ff34:	9101      	str	r1, [sp, #4]
1000ff36:	3448      	adds	r4, #72	; 0x48
1000ff38:	2c00      	cmp	r4, #0
1000ff3a:	d016      	beq.n	1000ff6a <_fwalk_reent+0x3e>
1000ff3c:	6863      	ldr	r3, [r4, #4]
1000ff3e:	68a5      	ldr	r5, [r4, #8]
1000ff40:	9300      	str	r3, [sp, #0]
1000ff42:	9b00      	ldr	r3, [sp, #0]
1000ff44:	3b01      	subs	r3, #1
1000ff46:	9300      	str	r3, [sp, #0]
1000ff48:	d40d      	bmi.n	1000ff66 <_fwalk_reent+0x3a>
1000ff4a:	89ab      	ldrh	r3, [r5, #12]
1000ff4c:	2b01      	cmp	r3, #1
1000ff4e:	d908      	bls.n	1000ff62 <_fwalk_reent+0x36>
1000ff50:	220e      	movs	r2, #14
1000ff52:	5eab      	ldrsh	r3, [r5, r2]
1000ff54:	3301      	adds	r3, #1
1000ff56:	d004      	beq.n	1000ff62 <_fwalk_reent+0x36>
1000ff58:	1c38      	adds	r0, r7, #0
1000ff5a:	1c29      	adds	r1, r5, #0
1000ff5c:	9b01      	ldr	r3, [sp, #4]
1000ff5e:	4798      	blx	r3
1000ff60:	4306      	orrs	r6, r0
1000ff62:	3568      	adds	r5, #104	; 0x68
1000ff64:	e7ed      	b.n	1000ff42 <_fwalk_reent+0x16>
1000ff66:	6824      	ldr	r4, [r4, #0]
1000ff68:	e7e6      	b.n	1000ff38 <_fwalk_reent+0xc>
1000ff6a:	1c30      	adds	r0, r6, #0
1000ff6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1000ff70 <__smakebuf_r>:
1000ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff72:	898b      	ldrh	r3, [r1, #12]
1000ff74:	b091      	sub	sp, #68	; 0x44
1000ff76:	079b      	lsls	r3, r3, #30
1000ff78:	d506      	bpl.n	1000ff88 <__smakebuf_r+0x18>
1000ff7a:	1c0b      	adds	r3, r1, #0
1000ff7c:	3347      	adds	r3, #71	; 0x47
1000ff7e:	600b      	str	r3, [r1, #0]
1000ff80:	610b      	str	r3, [r1, #16]
1000ff82:	2301      	movs	r3, #1
1000ff84:	614b      	str	r3, [r1, #20]
1000ff86:	e045      	b.n	10010014 <__smakebuf_r+0xa4>
1000ff88:	1c0c      	adds	r4, r1, #0
1000ff8a:	230e      	movs	r3, #14
1000ff8c:	5ec9      	ldrsh	r1, [r1, r3]
1000ff8e:	1c06      	adds	r6, r0, #0
1000ff90:	2900      	cmp	r1, #0
1000ff92:	da04      	bge.n	1000ff9e <__smakebuf_r+0x2e>
1000ff94:	2380      	movs	r3, #128	; 0x80
1000ff96:	89a5      	ldrh	r5, [r4, #12]
1000ff98:	401d      	ands	r5, r3
1000ff9a:	d110      	bne.n	1000ffbe <__smakebuf_r+0x4e>
1000ff9c:	e00c      	b.n	1000ffb8 <__smakebuf_r+0x48>
1000ff9e:	aa01      	add	r2, sp, #4
1000ffa0:	f000 fc64 	bl	1001086c <_fstat_r>
1000ffa4:	2800      	cmp	r0, #0
1000ffa6:	dbf5      	blt.n	1000ff94 <__smakebuf_r+0x24>
1000ffa8:	23f0      	movs	r3, #240	; 0xf0
1000ffaa:	9d02      	ldr	r5, [sp, #8]
1000ffac:	021b      	lsls	r3, r3, #8
1000ffae:	401d      	ands	r5, r3
1000ffb0:	4b19      	ldr	r3, [pc, #100]	; (10010018 <__smakebuf_r+0xa8>)
1000ffb2:	18ed      	adds	r5, r5, r3
1000ffb4:	426b      	negs	r3, r5
1000ffb6:	415d      	adcs	r5, r3
1000ffb8:	2780      	movs	r7, #128	; 0x80
1000ffba:	00ff      	lsls	r7, r7, #3
1000ffbc:	e001      	b.n	1000ffc2 <__smakebuf_r+0x52>
1000ffbe:	2500      	movs	r5, #0
1000ffc0:	2740      	movs	r7, #64	; 0x40
1000ffc2:	1c30      	adds	r0, r6, #0
1000ffc4:	1c39      	adds	r1, r7, #0
1000ffc6:	f000 f87b 	bl	100100c0 <_malloc_r>
1000ffca:	2800      	cmp	r0, #0
1000ffcc:	d10c      	bne.n	1000ffe8 <__smakebuf_r+0x78>
1000ffce:	89a3      	ldrh	r3, [r4, #12]
1000ffd0:	059a      	lsls	r2, r3, #22
1000ffd2:	d41f      	bmi.n	10010014 <__smakebuf_r+0xa4>
1000ffd4:	2202      	movs	r2, #2
1000ffd6:	4313      	orrs	r3, r2
1000ffd8:	81a3      	strh	r3, [r4, #12]
1000ffda:	1c23      	adds	r3, r4, #0
1000ffdc:	3347      	adds	r3, #71	; 0x47
1000ffde:	6023      	str	r3, [r4, #0]
1000ffe0:	6123      	str	r3, [r4, #16]
1000ffe2:	2301      	movs	r3, #1
1000ffe4:	6163      	str	r3, [r4, #20]
1000ffe6:	e015      	b.n	10010014 <__smakebuf_r+0xa4>
1000ffe8:	2280      	movs	r2, #128	; 0x80
1000ffea:	4b0c      	ldr	r3, [pc, #48]	; (1001001c <__smakebuf_r+0xac>)
1000ffec:	62b3      	str	r3, [r6, #40]	; 0x28
1000ffee:	89a3      	ldrh	r3, [r4, #12]
1000fff0:	6020      	str	r0, [r4, #0]
1000fff2:	4313      	orrs	r3, r2
1000fff4:	81a3      	strh	r3, [r4, #12]
1000fff6:	6120      	str	r0, [r4, #16]
1000fff8:	6167      	str	r7, [r4, #20]
1000fffa:	2d00      	cmp	r5, #0
1000fffc:	d00a      	beq.n	10010014 <__smakebuf_r+0xa4>
1000fffe:	230e      	movs	r3, #14
10010000:	5ee1      	ldrsh	r1, [r4, r3]
10010002:	1c30      	adds	r0, r6, #0
10010004:	f000 fc44 	bl	10010890 <_isatty_r>
10010008:	2800      	cmp	r0, #0
1001000a:	d003      	beq.n	10010014 <__smakebuf_r+0xa4>
1001000c:	2201      	movs	r2, #1
1001000e:	89a3      	ldrh	r3, [r4, #12]
10010010:	4313      	orrs	r3, r2
10010012:	81a3      	strh	r3, [r4, #12]
10010014:	b011      	add	sp, #68	; 0x44
10010016:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010018:	ffffe000 	.word	0xffffe000
1001001c:	1000fdc9 	.word	0x1000fdc9

10010020 <malloc>:
10010020:	b508      	push	{r3, lr}
10010022:	4b03      	ldr	r3, [pc, #12]	; (10010030 <malloc+0x10>)
10010024:	1c01      	adds	r1, r0, #0
10010026:	6818      	ldr	r0, [r3, #0]
10010028:	f000 f84a 	bl	100100c0 <_malloc_r>
1001002c:	bd08      	pop	{r3, pc}
1001002e:	46c0      	nop			; (mov r8, r8)
10010030:	10011904 	.word	0x10011904

10010034 <_free_r>:
10010034:	b530      	push	{r4, r5, lr}
10010036:	2900      	cmp	r1, #0
10010038:	d03e      	beq.n	100100b8 <_free_r+0x84>
1001003a:	3904      	subs	r1, #4
1001003c:	680b      	ldr	r3, [r1, #0]
1001003e:	2b00      	cmp	r3, #0
10010040:	da00      	bge.n	10010044 <_free_r+0x10>
10010042:	18c9      	adds	r1, r1, r3
10010044:	4a1d      	ldr	r2, [pc, #116]	; (100100bc <_free_r+0x88>)
10010046:	6813      	ldr	r3, [r2, #0]
10010048:	1c14      	adds	r4, r2, #0
1001004a:	2b00      	cmp	r3, #0
1001004c:	d102      	bne.n	10010054 <_free_r+0x20>
1001004e:	604b      	str	r3, [r1, #4]
10010050:	6011      	str	r1, [r2, #0]
10010052:	e031      	b.n	100100b8 <_free_r+0x84>
10010054:	4299      	cmp	r1, r3
10010056:	d20d      	bcs.n	10010074 <_free_r+0x40>
10010058:	6808      	ldr	r0, [r1, #0]
1001005a:	180a      	adds	r2, r1, r0
1001005c:	429a      	cmp	r2, r3
1001005e:	d103      	bne.n	10010068 <_free_r+0x34>
10010060:	6813      	ldr	r3, [r2, #0]
10010062:	18c3      	adds	r3, r0, r3
10010064:	600b      	str	r3, [r1, #0]
10010066:	6853      	ldr	r3, [r2, #4]
10010068:	604b      	str	r3, [r1, #4]
1001006a:	6021      	str	r1, [r4, #0]
1001006c:	e024      	b.n	100100b8 <_free_r+0x84>
1001006e:	428a      	cmp	r2, r1
10010070:	d803      	bhi.n	1001007a <_free_r+0x46>
10010072:	1c13      	adds	r3, r2, #0
10010074:	685a      	ldr	r2, [r3, #4]
10010076:	2a00      	cmp	r2, #0
10010078:	d1f9      	bne.n	1001006e <_free_r+0x3a>
1001007a:	681d      	ldr	r5, [r3, #0]
1001007c:	195c      	adds	r4, r3, r5
1001007e:	428c      	cmp	r4, r1
10010080:	d10b      	bne.n	1001009a <_free_r+0x66>
10010082:	6809      	ldr	r1, [r1, #0]
10010084:	1869      	adds	r1, r5, r1
10010086:	1858      	adds	r0, r3, r1
10010088:	6019      	str	r1, [r3, #0]
1001008a:	4290      	cmp	r0, r2
1001008c:	d114      	bne.n	100100b8 <_free_r+0x84>
1001008e:	6810      	ldr	r0, [r2, #0]
10010090:	6852      	ldr	r2, [r2, #4]
10010092:	1809      	adds	r1, r1, r0
10010094:	6019      	str	r1, [r3, #0]
10010096:	605a      	str	r2, [r3, #4]
10010098:	e00e      	b.n	100100b8 <_free_r+0x84>
1001009a:	428c      	cmp	r4, r1
1001009c:	d902      	bls.n	100100a4 <_free_r+0x70>
1001009e:	230c      	movs	r3, #12
100100a0:	6003      	str	r3, [r0, #0]
100100a2:	e009      	b.n	100100b8 <_free_r+0x84>
100100a4:	6808      	ldr	r0, [r1, #0]
100100a6:	180c      	adds	r4, r1, r0
100100a8:	4294      	cmp	r4, r2
100100aa:	d103      	bne.n	100100b4 <_free_r+0x80>
100100ac:	6814      	ldr	r4, [r2, #0]
100100ae:	6852      	ldr	r2, [r2, #4]
100100b0:	1900      	adds	r0, r0, r4
100100b2:	6008      	str	r0, [r1, #0]
100100b4:	604a      	str	r2, [r1, #4]
100100b6:	6059      	str	r1, [r3, #4]
100100b8:	bd30      	pop	{r4, r5, pc}
100100ba:	46c0      	nop			; (mov r8, r8)
100100bc:	10012048 	.word	0x10012048

100100c0 <_malloc_r>:
100100c0:	2303      	movs	r3, #3
100100c2:	b570      	push	{r4, r5, r6, lr}
100100c4:	1ccc      	adds	r4, r1, #3
100100c6:	439c      	bics	r4, r3
100100c8:	3408      	adds	r4, #8
100100ca:	1c05      	adds	r5, r0, #0
100100cc:	2c0c      	cmp	r4, #12
100100ce:	d201      	bcs.n	100100d4 <_malloc_r+0x14>
100100d0:	240c      	movs	r4, #12
100100d2:	e005      	b.n	100100e0 <_malloc_r+0x20>
100100d4:	2c00      	cmp	r4, #0
100100d6:	da03      	bge.n	100100e0 <_malloc_r+0x20>
100100d8:	230c      	movs	r3, #12
100100da:	2000      	movs	r0, #0
100100dc:	602b      	str	r3, [r5, #0]
100100de:	e042      	b.n	10010166 <_malloc_r+0xa6>
100100e0:	428c      	cmp	r4, r1
100100e2:	d3f9      	bcc.n	100100d8 <_malloc_r+0x18>
100100e4:	4a20      	ldr	r2, [pc, #128]	; (10010168 <_malloc_r+0xa8>)
100100e6:	6813      	ldr	r3, [r2, #0]
100100e8:	1c10      	adds	r0, r2, #0
100100ea:	1c19      	adds	r1, r3, #0
100100ec:	2900      	cmp	r1, #0
100100ee:	d013      	beq.n	10010118 <_malloc_r+0x58>
100100f0:	680a      	ldr	r2, [r1, #0]
100100f2:	1b12      	subs	r2, r2, r4
100100f4:	d40d      	bmi.n	10010112 <_malloc_r+0x52>
100100f6:	2a0b      	cmp	r2, #11
100100f8:	d902      	bls.n	10010100 <_malloc_r+0x40>
100100fa:	600a      	str	r2, [r1, #0]
100100fc:	188b      	adds	r3, r1, r2
100100fe:	e01f      	b.n	10010140 <_malloc_r+0x80>
10010100:	428b      	cmp	r3, r1
10010102:	d102      	bne.n	1001010a <_malloc_r+0x4a>
10010104:	685a      	ldr	r2, [r3, #4]
10010106:	6002      	str	r2, [r0, #0]
10010108:	e01b      	b.n	10010142 <_malloc_r+0x82>
1001010a:	684a      	ldr	r2, [r1, #4]
1001010c:	605a      	str	r2, [r3, #4]
1001010e:	1c0b      	adds	r3, r1, #0
10010110:	e017      	b.n	10010142 <_malloc_r+0x82>
10010112:	1c0b      	adds	r3, r1, #0
10010114:	6849      	ldr	r1, [r1, #4]
10010116:	e7e9      	b.n	100100ec <_malloc_r+0x2c>
10010118:	4e14      	ldr	r6, [pc, #80]	; (1001016c <_malloc_r+0xac>)
1001011a:	6833      	ldr	r3, [r6, #0]
1001011c:	2b00      	cmp	r3, #0
1001011e:	d103      	bne.n	10010128 <_malloc_r+0x68>
10010120:	1c28      	adds	r0, r5, #0
10010122:	f000 fb1f 	bl	10010764 <_sbrk_r>
10010126:	6030      	str	r0, [r6, #0]
10010128:	1c28      	adds	r0, r5, #0
1001012a:	1c21      	adds	r1, r4, #0
1001012c:	f000 fb1a 	bl	10010764 <_sbrk_r>
10010130:	1c03      	adds	r3, r0, #0
10010132:	1c42      	adds	r2, r0, #1
10010134:	d0d0      	beq.n	100100d8 <_malloc_r+0x18>
10010136:	2203      	movs	r2, #3
10010138:	1cc6      	adds	r6, r0, #3
1001013a:	4396      	bics	r6, r2
1001013c:	4286      	cmp	r6, r0
1001013e:	d10a      	bne.n	10010156 <_malloc_r+0x96>
10010140:	601c      	str	r4, [r3, #0]
10010142:	1c18      	adds	r0, r3, #0
10010144:	2107      	movs	r1, #7
10010146:	300b      	adds	r0, #11
10010148:	1d1a      	adds	r2, r3, #4
1001014a:	4388      	bics	r0, r1
1001014c:	1a82      	subs	r2, r0, r2
1001014e:	d00a      	beq.n	10010166 <_malloc_r+0xa6>
10010150:	4251      	negs	r1, r2
10010152:	5099      	str	r1, [r3, r2]
10010154:	e007      	b.n	10010166 <_malloc_r+0xa6>
10010156:	1a31      	subs	r1, r6, r0
10010158:	1c28      	adds	r0, r5, #0
1001015a:	f000 fb03 	bl	10010764 <_sbrk_r>
1001015e:	1c43      	adds	r3, r0, #1
10010160:	d0ba      	beq.n	100100d8 <_malloc_r+0x18>
10010162:	1c33      	adds	r3, r6, #0
10010164:	e7ec      	b.n	10010140 <_malloc_r+0x80>
10010166:	bd70      	pop	{r4, r5, r6, pc}
10010168:	10012048 	.word	0x10012048
1001016c:	10012044 	.word	0x10012044

10010170 <__sfputc_r>:
10010170:	6893      	ldr	r3, [r2, #8]
10010172:	b510      	push	{r4, lr}
10010174:	3b01      	subs	r3, #1
10010176:	6093      	str	r3, [r2, #8]
10010178:	2b00      	cmp	r3, #0
1001017a:	da05      	bge.n	10010188 <__sfputc_r+0x18>
1001017c:	6994      	ldr	r4, [r2, #24]
1001017e:	42a3      	cmp	r3, r4
10010180:	db08      	blt.n	10010194 <__sfputc_r+0x24>
10010182:	b2cb      	uxtb	r3, r1
10010184:	2b0a      	cmp	r3, #10
10010186:	d005      	beq.n	10010194 <__sfputc_r+0x24>
10010188:	6813      	ldr	r3, [r2, #0]
1001018a:	1c58      	adds	r0, r3, #1
1001018c:	6010      	str	r0, [r2, #0]
1001018e:	7019      	strb	r1, [r3, #0]
10010190:	b2c8      	uxtb	r0, r1
10010192:	e001      	b.n	10010198 <__sfputc_r+0x28>
10010194:	f7ff fc96 	bl	1000fac4 <__swbuf_r>
10010198:	bd10      	pop	{r4, pc}

1001019a <__sfputs_r>:
1001019a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001019c:	1c06      	adds	r6, r0, #0
1001019e:	1c0f      	adds	r7, r1, #0
100101a0:	1c14      	adds	r4, r2, #0
100101a2:	18d5      	adds	r5, r2, r3
100101a4:	42ac      	cmp	r4, r5
100101a6:	d008      	beq.n	100101ba <__sfputs_r+0x20>
100101a8:	7821      	ldrb	r1, [r4, #0]
100101aa:	1c30      	adds	r0, r6, #0
100101ac:	1c3a      	adds	r2, r7, #0
100101ae:	f7ff ffdf 	bl	10010170 <__sfputc_r>
100101b2:	3401      	adds	r4, #1
100101b4:	1c43      	adds	r3, r0, #1
100101b6:	d1f5      	bne.n	100101a4 <__sfputs_r+0xa>
100101b8:	e000      	b.n	100101bc <__sfputs_r+0x22>
100101ba:	2000      	movs	r0, #0
100101bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100101c0 <_vfiprintf_r>:
100101c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100101c2:	b09f      	sub	sp, #124	; 0x7c
100101c4:	1c06      	adds	r6, r0, #0
100101c6:	1c0f      	adds	r7, r1, #0
100101c8:	9202      	str	r2, [sp, #8]
100101ca:	9305      	str	r3, [sp, #20]
100101cc:	2800      	cmp	r0, #0
100101ce:	d004      	beq.n	100101da <_vfiprintf_r+0x1a>
100101d0:	6983      	ldr	r3, [r0, #24]
100101d2:	2b00      	cmp	r3, #0
100101d4:	d101      	bne.n	100101da <_vfiprintf_r+0x1a>
100101d6:	f7ff fe39 	bl	1000fe4c <__sinit>
100101da:	4b79      	ldr	r3, [pc, #484]	; (100103c0 <_vfiprintf_r+0x200>)
100101dc:	429f      	cmp	r7, r3
100101de:	d101      	bne.n	100101e4 <_vfiprintf_r+0x24>
100101e0:	6877      	ldr	r7, [r6, #4]
100101e2:	e008      	b.n	100101f6 <_vfiprintf_r+0x36>
100101e4:	4b77      	ldr	r3, [pc, #476]	; (100103c4 <_vfiprintf_r+0x204>)
100101e6:	429f      	cmp	r7, r3
100101e8:	d101      	bne.n	100101ee <_vfiprintf_r+0x2e>
100101ea:	68b7      	ldr	r7, [r6, #8]
100101ec:	e003      	b.n	100101f6 <_vfiprintf_r+0x36>
100101ee:	4b76      	ldr	r3, [pc, #472]	; (100103c8 <_vfiprintf_r+0x208>)
100101f0:	429f      	cmp	r7, r3
100101f2:	d100      	bne.n	100101f6 <_vfiprintf_r+0x36>
100101f4:	68f7      	ldr	r7, [r6, #12]
100101f6:	89bb      	ldrh	r3, [r7, #12]
100101f8:	071b      	lsls	r3, r3, #28
100101fa:	d50a      	bpl.n	10010212 <_vfiprintf_r+0x52>
100101fc:	693b      	ldr	r3, [r7, #16]
100101fe:	2b00      	cmp	r3, #0
10010200:	d007      	beq.n	10010212 <_vfiprintf_r+0x52>
10010202:	2300      	movs	r3, #0
10010204:	ad06      	add	r5, sp, #24
10010206:	616b      	str	r3, [r5, #20]
10010208:	3320      	adds	r3, #32
1001020a:	766b      	strb	r3, [r5, #25]
1001020c:	3310      	adds	r3, #16
1001020e:	76ab      	strb	r3, [r5, #26]
10010210:	e03d      	b.n	1001028e <_vfiprintf_r+0xce>
10010212:	1c30      	adds	r0, r6, #0
10010214:	1c39      	adds	r1, r7, #0
10010216:	f7ff fcad 	bl	1000fb74 <__swsetup_r>
1001021a:	2800      	cmp	r0, #0
1001021c:	d0f1      	beq.n	10010202 <_vfiprintf_r+0x42>
1001021e:	2001      	movs	r0, #1
10010220:	4240      	negs	r0, r0
10010222:	e0ca      	b.n	100103ba <_vfiprintf_r+0x1fa>
10010224:	9a05      	ldr	r2, [sp, #20]
10010226:	1d11      	adds	r1, r2, #4
10010228:	6812      	ldr	r2, [r2, #0]
1001022a:	9105      	str	r1, [sp, #20]
1001022c:	2a00      	cmp	r2, #0
1001022e:	db7e      	blt.n	1001032e <_vfiprintf_r+0x16e>
10010230:	9209      	str	r2, [sp, #36]	; 0x24
10010232:	3401      	adds	r4, #1
10010234:	7823      	ldrb	r3, [r4, #0]
10010236:	2b2e      	cmp	r3, #46	; 0x2e
10010238:	d100      	bne.n	1001023c <_vfiprintf_r+0x7c>
1001023a:	e089      	b.n	10010350 <_vfiprintf_r+0x190>
1001023c:	7821      	ldrb	r1, [r4, #0]
1001023e:	4863      	ldr	r0, [pc, #396]	; (100103cc <_vfiprintf_r+0x20c>)
10010240:	2203      	movs	r2, #3
10010242:	f000 fb4b 	bl	100108dc <memchr>
10010246:	2800      	cmp	r0, #0
10010248:	d008      	beq.n	1001025c <_vfiprintf_r+0x9c>
1001024a:	4b60      	ldr	r3, [pc, #384]	; (100103cc <_vfiprintf_r+0x20c>)
1001024c:	3401      	adds	r4, #1
1001024e:	1ac0      	subs	r0, r0, r3
10010250:	2340      	movs	r3, #64	; 0x40
10010252:	4083      	lsls	r3, r0
10010254:	1c18      	adds	r0, r3, #0
10010256:	682b      	ldr	r3, [r5, #0]
10010258:	4318      	orrs	r0, r3
1001025a:	6028      	str	r0, [r5, #0]
1001025c:	7821      	ldrb	r1, [r4, #0]
1001025e:	1c63      	adds	r3, r4, #1
10010260:	485b      	ldr	r0, [pc, #364]	; (100103d0 <_vfiprintf_r+0x210>)
10010262:	2206      	movs	r2, #6
10010264:	9302      	str	r3, [sp, #8]
10010266:	7629      	strb	r1, [r5, #24]
10010268:	f000 fb38 	bl	100108dc <memchr>
1001026c:	2800      	cmp	r0, #0
1001026e:	d100      	bne.n	10010272 <_vfiprintf_r+0xb2>
10010270:	e091      	b.n	10010396 <_vfiprintf_r+0x1d6>
10010272:	4b58      	ldr	r3, [pc, #352]	; (100103d4 <_vfiprintf_r+0x214>)
10010274:	2b00      	cmp	r3, #0
10010276:	d000      	beq.n	1001027a <_vfiprintf_r+0xba>
10010278:	e084      	b.n	10010384 <_vfiprintf_r+0x1c4>
1001027a:	2207      	movs	r2, #7
1001027c:	9b05      	ldr	r3, [sp, #20]
1001027e:	3307      	adds	r3, #7
10010280:	4393      	bics	r3, r2
10010282:	3308      	adds	r3, #8
10010284:	9305      	str	r3, [sp, #20]
10010286:	696b      	ldr	r3, [r5, #20]
10010288:	9a03      	ldr	r2, [sp, #12]
1001028a:	189b      	adds	r3, r3, r2
1001028c:	616b      	str	r3, [r5, #20]
1001028e:	9c02      	ldr	r4, [sp, #8]
10010290:	7823      	ldrb	r3, [r4, #0]
10010292:	2b00      	cmp	r3, #0
10010294:	d104      	bne.n	100102a0 <_vfiprintf_r+0xe0>
10010296:	9b02      	ldr	r3, [sp, #8]
10010298:	1ae3      	subs	r3, r4, r3
1001029a:	9304      	str	r3, [sp, #16]
1001029c:	d011      	beq.n	100102c2 <_vfiprintf_r+0x102>
1001029e:	e003      	b.n	100102a8 <_vfiprintf_r+0xe8>
100102a0:	2b25      	cmp	r3, #37	; 0x25
100102a2:	d0f8      	beq.n	10010296 <_vfiprintf_r+0xd6>
100102a4:	3401      	adds	r4, #1
100102a6:	e7f3      	b.n	10010290 <_vfiprintf_r+0xd0>
100102a8:	9b04      	ldr	r3, [sp, #16]
100102aa:	1c30      	adds	r0, r6, #0
100102ac:	1c39      	adds	r1, r7, #0
100102ae:	9a02      	ldr	r2, [sp, #8]
100102b0:	f7ff ff73 	bl	1001019a <__sfputs_r>
100102b4:	1c43      	adds	r3, r0, #1
100102b6:	d07b      	beq.n	100103b0 <_vfiprintf_r+0x1f0>
100102b8:	696a      	ldr	r2, [r5, #20]
100102ba:	9b04      	ldr	r3, [sp, #16]
100102bc:	4694      	mov	ip, r2
100102be:	4463      	add	r3, ip
100102c0:	616b      	str	r3, [r5, #20]
100102c2:	7823      	ldrb	r3, [r4, #0]
100102c4:	2b00      	cmp	r3, #0
100102c6:	d073      	beq.n	100103b0 <_vfiprintf_r+0x1f0>
100102c8:	2201      	movs	r2, #1
100102ca:	2300      	movs	r3, #0
100102cc:	4252      	negs	r2, r2
100102ce:	606a      	str	r2, [r5, #4]
100102d0:	a902      	add	r1, sp, #8
100102d2:	3254      	adds	r2, #84	; 0x54
100102d4:	1852      	adds	r2, r2, r1
100102d6:	3401      	adds	r4, #1
100102d8:	602b      	str	r3, [r5, #0]
100102da:	60eb      	str	r3, [r5, #12]
100102dc:	60ab      	str	r3, [r5, #8]
100102de:	7013      	strb	r3, [r2, #0]
100102e0:	65ab      	str	r3, [r5, #88]	; 0x58
100102e2:	7821      	ldrb	r1, [r4, #0]
100102e4:	483c      	ldr	r0, [pc, #240]	; (100103d8 <_vfiprintf_r+0x218>)
100102e6:	2205      	movs	r2, #5
100102e8:	f000 faf8 	bl	100108dc <memchr>
100102ec:	2800      	cmp	r0, #0
100102ee:	d009      	beq.n	10010304 <_vfiprintf_r+0x144>
100102f0:	4b39      	ldr	r3, [pc, #228]	; (100103d8 <_vfiprintf_r+0x218>)
100102f2:	3401      	adds	r4, #1
100102f4:	1ac0      	subs	r0, r0, r3
100102f6:	2301      	movs	r3, #1
100102f8:	4083      	lsls	r3, r0
100102fa:	1c18      	adds	r0, r3, #0
100102fc:	682b      	ldr	r3, [r5, #0]
100102fe:	4318      	orrs	r0, r3
10010300:	6028      	str	r0, [r5, #0]
10010302:	e7ee      	b.n	100102e2 <_vfiprintf_r+0x122>
10010304:	682b      	ldr	r3, [r5, #0]
10010306:	06da      	lsls	r2, r3, #27
10010308:	d504      	bpl.n	10010314 <_vfiprintf_r+0x154>
1001030a:	2253      	movs	r2, #83	; 0x53
1001030c:	2120      	movs	r1, #32
1001030e:	a802      	add	r0, sp, #8
10010310:	1812      	adds	r2, r2, r0
10010312:	7011      	strb	r1, [r2, #0]
10010314:	071a      	lsls	r2, r3, #28
10010316:	d504      	bpl.n	10010322 <_vfiprintf_r+0x162>
10010318:	2253      	movs	r2, #83	; 0x53
1001031a:	212b      	movs	r1, #43	; 0x2b
1001031c:	a802      	add	r0, sp, #8
1001031e:	1812      	adds	r2, r2, r0
10010320:	7011      	strb	r1, [r2, #0]
10010322:	7822      	ldrb	r2, [r4, #0]
10010324:	2a2a      	cmp	r2, #42	; 0x2a
10010326:	d100      	bne.n	1001032a <_vfiprintf_r+0x16a>
10010328:	e77c      	b.n	10010224 <_vfiprintf_r+0x64>
1001032a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001032c:	e005      	b.n	1001033a <_vfiprintf_r+0x17a>
1001032e:	4252      	negs	r2, r2
10010330:	60ea      	str	r2, [r5, #12]
10010332:	2202      	movs	r2, #2
10010334:	4313      	orrs	r3, r2
10010336:	602b      	str	r3, [r5, #0]
10010338:	e77b      	b.n	10010232 <_vfiprintf_r+0x72>
1001033a:	7822      	ldrb	r2, [r4, #0]
1001033c:	3a30      	subs	r2, #48	; 0x30
1001033e:	2a09      	cmp	r2, #9
10010340:	d804      	bhi.n	1001034c <_vfiprintf_r+0x18c>
10010342:	210a      	movs	r1, #10
10010344:	434b      	muls	r3, r1
10010346:	3401      	adds	r4, #1
10010348:	189b      	adds	r3, r3, r2
1001034a:	e7f6      	b.n	1001033a <_vfiprintf_r+0x17a>
1001034c:	9309      	str	r3, [sp, #36]	; 0x24
1001034e:	e771      	b.n	10010234 <_vfiprintf_r+0x74>
10010350:	7863      	ldrb	r3, [r4, #1]
10010352:	2b2a      	cmp	r3, #42	; 0x2a
10010354:	d109      	bne.n	1001036a <_vfiprintf_r+0x1aa>
10010356:	9b05      	ldr	r3, [sp, #20]
10010358:	3402      	adds	r4, #2
1001035a:	1d1a      	adds	r2, r3, #4
1001035c:	681b      	ldr	r3, [r3, #0]
1001035e:	9205      	str	r2, [sp, #20]
10010360:	2b00      	cmp	r3, #0
10010362:	da0d      	bge.n	10010380 <_vfiprintf_r+0x1c0>
10010364:	2301      	movs	r3, #1
10010366:	425b      	negs	r3, r3
10010368:	e00a      	b.n	10010380 <_vfiprintf_r+0x1c0>
1001036a:	2300      	movs	r3, #0
1001036c:	3401      	adds	r4, #1
1001036e:	7822      	ldrb	r2, [r4, #0]
10010370:	3a30      	subs	r2, #48	; 0x30
10010372:	2a09      	cmp	r2, #9
10010374:	d804      	bhi.n	10010380 <_vfiprintf_r+0x1c0>
10010376:	210a      	movs	r1, #10
10010378:	434b      	muls	r3, r1
1001037a:	3401      	adds	r4, #1
1001037c:	189b      	adds	r3, r3, r2
1001037e:	e7f6      	b.n	1001036e <_vfiprintf_r+0x1ae>
10010380:	9307      	str	r3, [sp, #28]
10010382:	e75b      	b.n	1001023c <_vfiprintf_r+0x7c>
10010384:	ab05      	add	r3, sp, #20
10010386:	9300      	str	r3, [sp, #0]
10010388:	1c30      	adds	r0, r6, #0
1001038a:	1c29      	adds	r1, r5, #0
1001038c:	1c3a      	adds	r2, r7, #0
1001038e:	4b13      	ldr	r3, [pc, #76]	; (100103dc <_vfiprintf_r+0x21c>)
10010390:	e000      	b.n	10010394 <_vfiprintf_r+0x1d4>
10010392:	bf00      	nop
10010394:	e007      	b.n	100103a6 <_vfiprintf_r+0x1e6>
10010396:	ab05      	add	r3, sp, #20
10010398:	9300      	str	r3, [sp, #0]
1001039a:	1c30      	adds	r0, r6, #0
1001039c:	1c29      	adds	r1, r5, #0
1001039e:	1c3a      	adds	r2, r7, #0
100103a0:	4b0e      	ldr	r3, [pc, #56]	; (100103dc <_vfiprintf_r+0x21c>)
100103a2:	f000 f88b 	bl	100104bc <_printf_i>
100103a6:	9003      	str	r0, [sp, #12]
100103a8:	9b03      	ldr	r3, [sp, #12]
100103aa:	3301      	adds	r3, #1
100103ac:	d000      	beq.n	100103b0 <_vfiprintf_r+0x1f0>
100103ae:	e76a      	b.n	10010286 <_vfiprintf_r+0xc6>
100103b0:	89bb      	ldrh	r3, [r7, #12]
100103b2:	065b      	lsls	r3, r3, #25
100103b4:	d500      	bpl.n	100103b8 <_vfiprintf_r+0x1f8>
100103b6:	e732      	b.n	1001021e <_vfiprintf_r+0x5e>
100103b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100103ba:	b01f      	add	sp, #124	; 0x7c
100103bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100103be:	46c0      	nop			; (mov r8, r8)
100103c0:	100117c8 	.word	0x100117c8
100103c4:	100117e8 	.word	0x100117e8
100103c8:	10011808 	.word	0x10011808
100103cc:	1001182e 	.word	0x1001182e
100103d0:	10011832 	.word	0x10011832
100103d4:	00000000 	.word	0x00000000
100103d8:	10011828 	.word	0x10011828
100103dc:	1001019b 	.word	0x1001019b

100103e0 <_printf_common>:
100103e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100103e2:	1c17      	adds	r7, r2, #0
100103e4:	9301      	str	r3, [sp, #4]
100103e6:	690a      	ldr	r2, [r1, #16]
100103e8:	688b      	ldr	r3, [r1, #8]
100103ea:	9000      	str	r0, [sp, #0]
100103ec:	1c0c      	adds	r4, r1, #0
100103ee:	4293      	cmp	r3, r2
100103f0:	da00      	bge.n	100103f4 <_printf_common+0x14>
100103f2:	1c13      	adds	r3, r2, #0
100103f4:	1c22      	adds	r2, r4, #0
100103f6:	603b      	str	r3, [r7, #0]
100103f8:	3243      	adds	r2, #67	; 0x43
100103fa:	7812      	ldrb	r2, [r2, #0]
100103fc:	2a00      	cmp	r2, #0
100103fe:	d001      	beq.n	10010404 <_printf_common+0x24>
10010400:	3301      	adds	r3, #1
10010402:	603b      	str	r3, [r7, #0]
10010404:	6823      	ldr	r3, [r4, #0]
10010406:	069b      	lsls	r3, r3, #26
10010408:	d502      	bpl.n	10010410 <_printf_common+0x30>
1001040a:	683b      	ldr	r3, [r7, #0]
1001040c:	3302      	adds	r3, #2
1001040e:	603b      	str	r3, [r7, #0]
10010410:	2506      	movs	r5, #6
10010412:	6823      	ldr	r3, [r4, #0]
10010414:	401d      	ands	r5, r3
10010416:	d01e      	beq.n	10010456 <_printf_common+0x76>
10010418:	1c23      	adds	r3, r4, #0
1001041a:	3343      	adds	r3, #67	; 0x43
1001041c:	781b      	ldrb	r3, [r3, #0]
1001041e:	1e5a      	subs	r2, r3, #1
10010420:	4193      	sbcs	r3, r2
10010422:	6822      	ldr	r2, [r4, #0]
10010424:	0692      	lsls	r2, r2, #26
10010426:	d51c      	bpl.n	10010462 <_printf_common+0x82>
10010428:	2030      	movs	r0, #48	; 0x30
1001042a:	18e1      	adds	r1, r4, r3
1001042c:	3140      	adds	r1, #64	; 0x40
1001042e:	70c8      	strb	r0, [r1, #3]
10010430:	1c21      	adds	r1, r4, #0
10010432:	1c5a      	adds	r2, r3, #1
10010434:	3145      	adds	r1, #69	; 0x45
10010436:	7809      	ldrb	r1, [r1, #0]
10010438:	18a2      	adds	r2, r4, r2
1001043a:	3240      	adds	r2, #64	; 0x40
1001043c:	3302      	adds	r3, #2
1001043e:	70d1      	strb	r1, [r2, #3]
10010440:	e00f      	b.n	10010462 <_printf_common+0x82>
10010442:	1c22      	adds	r2, r4, #0
10010444:	2301      	movs	r3, #1
10010446:	9800      	ldr	r0, [sp, #0]
10010448:	9901      	ldr	r1, [sp, #4]
1001044a:	3219      	adds	r2, #25
1001044c:	9e08      	ldr	r6, [sp, #32]
1001044e:	47b0      	blx	r6
10010450:	1c43      	adds	r3, r0, #1
10010452:	d00e      	beq.n	10010472 <_printf_common+0x92>
10010454:	3501      	adds	r5, #1
10010456:	68e3      	ldr	r3, [r4, #12]
10010458:	683a      	ldr	r2, [r7, #0]
1001045a:	1a9b      	subs	r3, r3, r2
1001045c:	429d      	cmp	r5, r3
1001045e:	dbf0      	blt.n	10010442 <_printf_common+0x62>
10010460:	e7da      	b.n	10010418 <_printf_common+0x38>
10010462:	1c22      	adds	r2, r4, #0
10010464:	9800      	ldr	r0, [sp, #0]
10010466:	9901      	ldr	r1, [sp, #4]
10010468:	3243      	adds	r2, #67	; 0x43
1001046a:	9d08      	ldr	r5, [sp, #32]
1001046c:	47a8      	blx	r5
1001046e:	1c43      	adds	r3, r0, #1
10010470:	d102      	bne.n	10010478 <_printf_common+0x98>
10010472:	2001      	movs	r0, #1
10010474:	4240      	negs	r0, r0
10010476:	e020      	b.n	100104ba <_printf_common+0xda>
10010478:	2306      	movs	r3, #6
1001047a:	6820      	ldr	r0, [r4, #0]
1001047c:	68e1      	ldr	r1, [r4, #12]
1001047e:	683a      	ldr	r2, [r7, #0]
10010480:	4003      	ands	r3, r0
10010482:	2500      	movs	r5, #0
10010484:	2b04      	cmp	r3, #4
10010486:	d103      	bne.n	10010490 <_printf_common+0xb0>
10010488:	1a8d      	subs	r5, r1, r2
1001048a:	43eb      	mvns	r3, r5
1001048c:	17db      	asrs	r3, r3, #31
1001048e:	401d      	ands	r5, r3
10010490:	68a3      	ldr	r3, [r4, #8]
10010492:	6922      	ldr	r2, [r4, #16]
10010494:	4293      	cmp	r3, r2
10010496:	dd01      	ble.n	1001049c <_printf_common+0xbc>
10010498:	1a9b      	subs	r3, r3, r2
1001049a:	18ed      	adds	r5, r5, r3
1001049c:	2700      	movs	r7, #0
1001049e:	42af      	cmp	r7, r5
100104a0:	da0a      	bge.n	100104b8 <_printf_common+0xd8>
100104a2:	1c22      	adds	r2, r4, #0
100104a4:	2301      	movs	r3, #1
100104a6:	9800      	ldr	r0, [sp, #0]
100104a8:	9901      	ldr	r1, [sp, #4]
100104aa:	321a      	adds	r2, #26
100104ac:	9e08      	ldr	r6, [sp, #32]
100104ae:	47b0      	blx	r6
100104b0:	1c43      	adds	r3, r0, #1
100104b2:	d0de      	beq.n	10010472 <_printf_common+0x92>
100104b4:	3701      	adds	r7, #1
100104b6:	e7f2      	b.n	1001049e <_printf_common+0xbe>
100104b8:	2000      	movs	r0, #0
100104ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100104bc <_printf_i>:
100104bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100104be:	b08b      	sub	sp, #44	; 0x2c
100104c0:	9206      	str	r2, [sp, #24]
100104c2:	1c0a      	adds	r2, r1, #0
100104c4:	3243      	adds	r2, #67	; 0x43
100104c6:	9307      	str	r3, [sp, #28]
100104c8:	9005      	str	r0, [sp, #20]
100104ca:	9204      	str	r2, [sp, #16]
100104cc:	7e0a      	ldrb	r2, [r1, #24]
100104ce:	1c0c      	adds	r4, r1, #0
100104d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100104d2:	2a6e      	cmp	r2, #110	; 0x6e
100104d4:	d100      	bne.n	100104d8 <_printf_i+0x1c>
100104d6:	e0a8      	b.n	1001062a <_printf_i+0x16e>
100104d8:	d811      	bhi.n	100104fe <_printf_i+0x42>
100104da:	2a63      	cmp	r2, #99	; 0x63
100104dc:	d022      	beq.n	10010524 <_printf_i+0x68>
100104de:	d809      	bhi.n	100104f4 <_printf_i+0x38>
100104e0:	2a00      	cmp	r2, #0
100104e2:	d100      	bne.n	100104e6 <_printf_i+0x2a>
100104e4:	e0b2      	b.n	1001064c <_printf_i+0x190>
100104e6:	2a58      	cmp	r2, #88	; 0x58
100104e8:	d000      	beq.n	100104ec <_printf_i+0x30>
100104ea:	e0c2      	b.n	10010672 <_printf_i+0x1b6>
100104ec:	3145      	adds	r1, #69	; 0x45
100104ee:	700a      	strb	r2, [r1, #0]
100104f0:	4a7c      	ldr	r2, [pc, #496]	; (100106e4 <_printf_i+0x228>)
100104f2:	e04f      	b.n	10010594 <_printf_i+0xd8>
100104f4:	2a64      	cmp	r2, #100	; 0x64
100104f6:	d01d      	beq.n	10010534 <_printf_i+0x78>
100104f8:	2a69      	cmp	r2, #105	; 0x69
100104fa:	d01b      	beq.n	10010534 <_printf_i+0x78>
100104fc:	e0b9      	b.n	10010672 <_printf_i+0x1b6>
100104fe:	2a73      	cmp	r2, #115	; 0x73
10010500:	d100      	bne.n	10010504 <_printf_i+0x48>
10010502:	e0a7      	b.n	10010654 <_printf_i+0x198>
10010504:	d809      	bhi.n	1001051a <_printf_i+0x5e>
10010506:	2a6f      	cmp	r2, #111	; 0x6f
10010508:	d029      	beq.n	1001055e <_printf_i+0xa2>
1001050a:	2a70      	cmp	r2, #112	; 0x70
1001050c:	d000      	beq.n	10010510 <_printf_i+0x54>
1001050e:	e0b0      	b.n	10010672 <_printf_i+0x1b6>
10010510:	2220      	movs	r2, #32
10010512:	6809      	ldr	r1, [r1, #0]
10010514:	430a      	orrs	r2, r1
10010516:	6022      	str	r2, [r4, #0]
10010518:	e037      	b.n	1001058a <_printf_i+0xce>
1001051a:	2a75      	cmp	r2, #117	; 0x75
1001051c:	d01f      	beq.n	1001055e <_printf_i+0xa2>
1001051e:	2a78      	cmp	r2, #120	; 0x78
10010520:	d033      	beq.n	1001058a <_printf_i+0xce>
10010522:	e0a6      	b.n	10010672 <_printf_i+0x1b6>
10010524:	1c0e      	adds	r6, r1, #0
10010526:	681a      	ldr	r2, [r3, #0]
10010528:	3642      	adds	r6, #66	; 0x42
1001052a:	1d11      	adds	r1, r2, #4
1001052c:	6019      	str	r1, [r3, #0]
1001052e:	6813      	ldr	r3, [r2, #0]
10010530:	7033      	strb	r3, [r6, #0]
10010532:	e0a1      	b.n	10010678 <_printf_i+0x1bc>
10010534:	6821      	ldr	r1, [r4, #0]
10010536:	681a      	ldr	r2, [r3, #0]
10010538:	0608      	lsls	r0, r1, #24
1001053a:	d406      	bmi.n	1001054a <_printf_i+0x8e>
1001053c:	0649      	lsls	r1, r1, #25
1001053e:	d504      	bpl.n	1001054a <_printf_i+0x8e>
10010540:	1d11      	adds	r1, r2, #4
10010542:	6019      	str	r1, [r3, #0]
10010544:	2300      	movs	r3, #0
10010546:	5ed5      	ldrsh	r5, [r2, r3]
10010548:	e002      	b.n	10010550 <_printf_i+0x94>
1001054a:	1d11      	adds	r1, r2, #4
1001054c:	6019      	str	r1, [r3, #0]
1001054e:	6815      	ldr	r5, [r2, #0]
10010550:	2d00      	cmp	r5, #0
10010552:	da3b      	bge.n	100105cc <_printf_i+0x110>
10010554:	232d      	movs	r3, #45	; 0x2d
10010556:	9a04      	ldr	r2, [sp, #16]
10010558:	426d      	negs	r5, r5
1001055a:	7013      	strb	r3, [r2, #0]
1001055c:	e036      	b.n	100105cc <_printf_i+0x110>
1001055e:	6821      	ldr	r1, [r4, #0]
10010560:	681a      	ldr	r2, [r3, #0]
10010562:	0608      	lsls	r0, r1, #24
10010564:	d406      	bmi.n	10010574 <_printf_i+0xb8>
10010566:	0649      	lsls	r1, r1, #25
10010568:	d504      	bpl.n	10010574 <_printf_i+0xb8>
1001056a:	6815      	ldr	r5, [r2, #0]
1001056c:	1d11      	adds	r1, r2, #4
1001056e:	6019      	str	r1, [r3, #0]
10010570:	b2ad      	uxth	r5, r5
10010572:	e002      	b.n	1001057a <_printf_i+0xbe>
10010574:	1d11      	adds	r1, r2, #4
10010576:	6019      	str	r1, [r3, #0]
10010578:	6815      	ldr	r5, [r2, #0]
1001057a:	4b5a      	ldr	r3, [pc, #360]	; (100106e4 <_printf_i+0x228>)
1001057c:	7e22      	ldrb	r2, [r4, #24]
1001057e:	9303      	str	r3, [sp, #12]
10010580:	270a      	movs	r7, #10
10010582:	2a6f      	cmp	r2, #111	; 0x6f
10010584:	d11d      	bne.n	100105c2 <_printf_i+0x106>
10010586:	2708      	movs	r7, #8
10010588:	e01b      	b.n	100105c2 <_printf_i+0x106>
1001058a:	1c22      	adds	r2, r4, #0
1001058c:	2178      	movs	r1, #120	; 0x78
1001058e:	3245      	adds	r2, #69	; 0x45
10010590:	7011      	strb	r1, [r2, #0]
10010592:	4a55      	ldr	r2, [pc, #340]	; (100106e8 <_printf_i+0x22c>)
10010594:	6819      	ldr	r1, [r3, #0]
10010596:	9203      	str	r2, [sp, #12]
10010598:	1d08      	adds	r0, r1, #4
1001059a:	6822      	ldr	r2, [r4, #0]
1001059c:	6018      	str	r0, [r3, #0]
1001059e:	680d      	ldr	r5, [r1, #0]
100105a0:	0610      	lsls	r0, r2, #24
100105a2:	d402      	bmi.n	100105aa <_printf_i+0xee>
100105a4:	0650      	lsls	r0, r2, #25
100105a6:	d500      	bpl.n	100105aa <_printf_i+0xee>
100105a8:	b2ad      	uxth	r5, r5
100105aa:	07d3      	lsls	r3, r2, #31
100105ac:	d502      	bpl.n	100105b4 <_printf_i+0xf8>
100105ae:	2320      	movs	r3, #32
100105b0:	431a      	orrs	r2, r3
100105b2:	6022      	str	r2, [r4, #0]
100105b4:	2710      	movs	r7, #16
100105b6:	2d00      	cmp	r5, #0
100105b8:	d103      	bne.n	100105c2 <_printf_i+0x106>
100105ba:	2320      	movs	r3, #32
100105bc:	6822      	ldr	r2, [r4, #0]
100105be:	439a      	bics	r2, r3
100105c0:	6022      	str	r2, [r4, #0]
100105c2:	1c23      	adds	r3, r4, #0
100105c4:	2200      	movs	r2, #0
100105c6:	3343      	adds	r3, #67	; 0x43
100105c8:	701a      	strb	r2, [r3, #0]
100105ca:	e002      	b.n	100105d2 <_printf_i+0x116>
100105cc:	270a      	movs	r7, #10
100105ce:	4b45      	ldr	r3, [pc, #276]	; (100106e4 <_printf_i+0x228>)
100105d0:	9303      	str	r3, [sp, #12]
100105d2:	6863      	ldr	r3, [r4, #4]
100105d4:	60a3      	str	r3, [r4, #8]
100105d6:	2b00      	cmp	r3, #0
100105d8:	db03      	blt.n	100105e2 <_printf_i+0x126>
100105da:	2204      	movs	r2, #4
100105dc:	6821      	ldr	r1, [r4, #0]
100105de:	4391      	bics	r1, r2
100105e0:	6021      	str	r1, [r4, #0]
100105e2:	2d00      	cmp	r5, #0
100105e4:	d102      	bne.n	100105ec <_printf_i+0x130>
100105e6:	9e04      	ldr	r6, [sp, #16]
100105e8:	2b00      	cmp	r3, #0
100105ea:	d00e      	beq.n	1001060a <_printf_i+0x14e>
100105ec:	9e04      	ldr	r6, [sp, #16]
100105ee:	1c28      	adds	r0, r5, #0
100105f0:	1c39      	adds	r1, r7, #0
100105f2:	f7fe f89f 	bl	1000e734 <__aeabi_uidivmod>
100105f6:	9b03      	ldr	r3, [sp, #12]
100105f8:	3e01      	subs	r6, #1
100105fa:	5c5b      	ldrb	r3, [r3, r1]
100105fc:	1c28      	adds	r0, r5, #0
100105fe:	7033      	strb	r3, [r6, #0]
10010600:	1c39      	adds	r1, r7, #0
10010602:	f7fe f811 	bl	1000e628 <__aeabi_uidiv>
10010606:	1e05      	subs	r5, r0, #0
10010608:	d1f1      	bne.n	100105ee <_printf_i+0x132>
1001060a:	2f08      	cmp	r7, #8
1001060c:	d109      	bne.n	10010622 <_printf_i+0x166>
1001060e:	6823      	ldr	r3, [r4, #0]
10010610:	07db      	lsls	r3, r3, #31
10010612:	d506      	bpl.n	10010622 <_printf_i+0x166>
10010614:	6863      	ldr	r3, [r4, #4]
10010616:	6922      	ldr	r2, [r4, #16]
10010618:	4293      	cmp	r3, r2
1001061a:	dc02      	bgt.n	10010622 <_printf_i+0x166>
1001061c:	2330      	movs	r3, #48	; 0x30
1001061e:	3e01      	subs	r6, #1
10010620:	7033      	strb	r3, [r6, #0]
10010622:	9b04      	ldr	r3, [sp, #16]
10010624:	1b9b      	subs	r3, r3, r6
10010626:	6123      	str	r3, [r4, #16]
10010628:	e02b      	b.n	10010682 <_printf_i+0x1c6>
1001062a:	6809      	ldr	r1, [r1, #0]
1001062c:	681a      	ldr	r2, [r3, #0]
1001062e:	0608      	lsls	r0, r1, #24
10010630:	d407      	bmi.n	10010642 <_printf_i+0x186>
10010632:	0649      	lsls	r1, r1, #25
10010634:	d505      	bpl.n	10010642 <_printf_i+0x186>
10010636:	1d11      	adds	r1, r2, #4
10010638:	6019      	str	r1, [r3, #0]
1001063a:	6813      	ldr	r3, [r2, #0]
1001063c:	8aa2      	ldrh	r2, [r4, #20]
1001063e:	801a      	strh	r2, [r3, #0]
10010640:	e004      	b.n	1001064c <_printf_i+0x190>
10010642:	1d11      	adds	r1, r2, #4
10010644:	6019      	str	r1, [r3, #0]
10010646:	6813      	ldr	r3, [r2, #0]
10010648:	6962      	ldr	r2, [r4, #20]
1001064a:	601a      	str	r2, [r3, #0]
1001064c:	2300      	movs	r3, #0
1001064e:	9e04      	ldr	r6, [sp, #16]
10010650:	6123      	str	r3, [r4, #16]
10010652:	e016      	b.n	10010682 <_printf_i+0x1c6>
10010654:	681a      	ldr	r2, [r3, #0]
10010656:	1d11      	adds	r1, r2, #4
10010658:	6019      	str	r1, [r3, #0]
1001065a:	6816      	ldr	r6, [r2, #0]
1001065c:	2100      	movs	r1, #0
1001065e:	1c30      	adds	r0, r6, #0
10010660:	6862      	ldr	r2, [r4, #4]
10010662:	f000 f93b 	bl	100108dc <memchr>
10010666:	2800      	cmp	r0, #0
10010668:	d001      	beq.n	1001066e <_printf_i+0x1b2>
1001066a:	1b80      	subs	r0, r0, r6
1001066c:	6060      	str	r0, [r4, #4]
1001066e:	6863      	ldr	r3, [r4, #4]
10010670:	e003      	b.n	1001067a <_printf_i+0x1be>
10010672:	1c26      	adds	r6, r4, #0
10010674:	3642      	adds	r6, #66	; 0x42
10010676:	7032      	strb	r2, [r6, #0]
10010678:	2301      	movs	r3, #1
1001067a:	6123      	str	r3, [r4, #16]
1001067c:	2300      	movs	r3, #0
1001067e:	9a04      	ldr	r2, [sp, #16]
10010680:	7013      	strb	r3, [r2, #0]
10010682:	9b07      	ldr	r3, [sp, #28]
10010684:	9805      	ldr	r0, [sp, #20]
10010686:	9300      	str	r3, [sp, #0]
10010688:	1c21      	adds	r1, r4, #0
1001068a:	9b06      	ldr	r3, [sp, #24]
1001068c:	aa09      	add	r2, sp, #36	; 0x24
1001068e:	f7ff fea7 	bl	100103e0 <_printf_common>
10010692:	1c43      	adds	r3, r0, #1
10010694:	d102      	bne.n	1001069c <_printf_i+0x1e0>
10010696:	2001      	movs	r0, #1
10010698:	4240      	negs	r0, r0
1001069a:	e021      	b.n	100106e0 <_printf_i+0x224>
1001069c:	6923      	ldr	r3, [r4, #16]
1001069e:	9805      	ldr	r0, [sp, #20]
100106a0:	9906      	ldr	r1, [sp, #24]
100106a2:	1c32      	adds	r2, r6, #0
100106a4:	9d07      	ldr	r5, [sp, #28]
100106a6:	47a8      	blx	r5
100106a8:	1c43      	adds	r3, r0, #1
100106aa:	d0f4      	beq.n	10010696 <_printf_i+0x1da>
100106ac:	6823      	ldr	r3, [r4, #0]
100106ae:	079b      	lsls	r3, r3, #30
100106b0:	d405      	bmi.n	100106be <_printf_i+0x202>
100106b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100106b4:	68e0      	ldr	r0, [r4, #12]
100106b6:	4298      	cmp	r0, r3
100106b8:	da12      	bge.n	100106e0 <_printf_i+0x224>
100106ba:	1c18      	adds	r0, r3, #0
100106bc:	e010      	b.n	100106e0 <_printf_i+0x224>
100106be:	2500      	movs	r5, #0
100106c0:	68e3      	ldr	r3, [r4, #12]
100106c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
100106c4:	1a9b      	subs	r3, r3, r2
100106c6:	429d      	cmp	r5, r3
100106c8:	daf3      	bge.n	100106b2 <_printf_i+0x1f6>
100106ca:	1c22      	adds	r2, r4, #0
100106cc:	2301      	movs	r3, #1
100106ce:	9805      	ldr	r0, [sp, #20]
100106d0:	9906      	ldr	r1, [sp, #24]
100106d2:	3219      	adds	r2, #25
100106d4:	9e07      	ldr	r6, [sp, #28]
100106d6:	47b0      	blx	r6
100106d8:	1c43      	adds	r3, r0, #1
100106da:	d0dc      	beq.n	10010696 <_printf_i+0x1da>
100106dc:	3501      	adds	r5, #1
100106de:	e7ef      	b.n	100106c0 <_printf_i+0x204>
100106e0:	b00b      	add	sp, #44	; 0x2c
100106e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106e4:	10011839 	.word	0x10011839
100106e8:	1001184a 	.word	0x1001184a

100106ec <_putc_r>:
100106ec:	b570      	push	{r4, r5, r6, lr}
100106ee:	1c05      	adds	r5, r0, #0
100106f0:	1c0e      	adds	r6, r1, #0
100106f2:	1c14      	adds	r4, r2, #0
100106f4:	2800      	cmp	r0, #0
100106f6:	d004      	beq.n	10010702 <_putc_r+0x16>
100106f8:	6983      	ldr	r3, [r0, #24]
100106fa:	2b00      	cmp	r3, #0
100106fc:	d101      	bne.n	10010702 <_putc_r+0x16>
100106fe:	f7ff fba5 	bl	1000fe4c <__sinit>
10010702:	4b15      	ldr	r3, [pc, #84]	; (10010758 <_putc_r+0x6c>)
10010704:	429c      	cmp	r4, r3
10010706:	d101      	bne.n	1001070c <_putc_r+0x20>
10010708:	686c      	ldr	r4, [r5, #4]
1001070a:	e008      	b.n	1001071e <_putc_r+0x32>
1001070c:	4b13      	ldr	r3, [pc, #76]	; (1001075c <_putc_r+0x70>)
1001070e:	429c      	cmp	r4, r3
10010710:	d101      	bne.n	10010716 <_putc_r+0x2a>
10010712:	68ac      	ldr	r4, [r5, #8]
10010714:	e003      	b.n	1001071e <_putc_r+0x32>
10010716:	4b12      	ldr	r3, [pc, #72]	; (10010760 <_putc_r+0x74>)
10010718:	429c      	cmp	r4, r3
1001071a:	d100      	bne.n	1001071e <_putc_r+0x32>
1001071c:	68ec      	ldr	r4, [r5, #12]
1001071e:	68a3      	ldr	r3, [r4, #8]
10010720:	3b01      	subs	r3, #1
10010722:	60a3      	str	r3, [r4, #8]
10010724:	2b00      	cmp	r3, #0
10010726:	da10      	bge.n	1001074a <_putc_r+0x5e>
10010728:	69a2      	ldr	r2, [r4, #24]
1001072a:	4293      	cmp	r3, r2
1001072c:	db07      	blt.n	1001073e <_putc_r+0x52>
1001072e:	6823      	ldr	r3, [r4, #0]
10010730:	701e      	strb	r6, [r3, #0]
10010732:	6823      	ldr	r3, [r4, #0]
10010734:	7819      	ldrb	r1, [r3, #0]
10010736:	290a      	cmp	r1, #10
10010738:	d10a      	bne.n	10010750 <_putc_r+0x64>
1001073a:	1c28      	adds	r0, r5, #0
1001073c:	e001      	b.n	10010742 <_putc_r+0x56>
1001073e:	1c28      	adds	r0, r5, #0
10010740:	1c31      	adds	r1, r6, #0
10010742:	1c22      	adds	r2, r4, #0
10010744:	f7ff f9be 	bl	1000fac4 <__swbuf_r>
10010748:	e005      	b.n	10010756 <_putc_r+0x6a>
1001074a:	6823      	ldr	r3, [r4, #0]
1001074c:	701e      	strb	r6, [r3, #0]
1001074e:	6823      	ldr	r3, [r4, #0]
10010750:	1c5a      	adds	r2, r3, #1
10010752:	6022      	str	r2, [r4, #0]
10010754:	7818      	ldrb	r0, [r3, #0]
10010756:	bd70      	pop	{r4, r5, r6, pc}
10010758:	100117c8 	.word	0x100117c8
1001075c:	100117e8 	.word	0x100117e8
10010760:	10011808 	.word	0x10011808

10010764 <_sbrk_r>:
10010764:	b538      	push	{r3, r4, r5, lr}
10010766:	2300      	movs	r3, #0
10010768:	4c06      	ldr	r4, [pc, #24]	; (10010784 <_sbrk_r+0x20>)
1001076a:	1c05      	adds	r5, r0, #0
1001076c:	1c08      	adds	r0, r1, #0
1001076e:	6023      	str	r3, [r4, #0]
10010770:	f7f8 fd32 	bl	100091d8 <_sbrk>
10010774:	1c43      	adds	r3, r0, #1
10010776:	d103      	bne.n	10010780 <_sbrk_r+0x1c>
10010778:	6823      	ldr	r3, [r4, #0]
1001077a:	2b00      	cmp	r3, #0
1001077c:	d000      	beq.n	10010780 <_sbrk_r+0x1c>
1001077e:	602b      	str	r3, [r5, #0]
10010780:	bd38      	pop	{r3, r4, r5, pc}
10010782:	46c0      	nop			; (mov r8, r8)
10010784:	100133c0 	.word	0x100133c0

10010788 <__sread>:
10010788:	b538      	push	{r3, r4, r5, lr}
1001078a:	1c0c      	adds	r4, r1, #0
1001078c:	250e      	movs	r5, #14
1001078e:	5f49      	ldrsh	r1, [r1, r5]
10010790:	f000 f8b0 	bl	100108f4 <_read_r>
10010794:	2800      	cmp	r0, #0
10010796:	db03      	blt.n	100107a0 <__sread+0x18>
10010798:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001079a:	181b      	adds	r3, r3, r0
1001079c:	6563      	str	r3, [r4, #84]	; 0x54
1001079e:	e003      	b.n	100107a8 <__sread+0x20>
100107a0:	89a2      	ldrh	r2, [r4, #12]
100107a2:	4b02      	ldr	r3, [pc, #8]	; (100107ac <__sread+0x24>)
100107a4:	4013      	ands	r3, r2
100107a6:	81a3      	strh	r3, [r4, #12]
100107a8:	bd38      	pop	{r3, r4, r5, pc}
100107aa:	46c0      	nop			; (mov r8, r8)
100107ac:	ffffefff 	.word	0xffffefff

100107b0 <__swrite>:
100107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100107b2:	1c1e      	adds	r6, r3, #0
100107b4:	898b      	ldrh	r3, [r1, #12]
100107b6:	1c05      	adds	r5, r0, #0
100107b8:	1c0c      	adds	r4, r1, #0
100107ba:	1c17      	adds	r7, r2, #0
100107bc:	05db      	lsls	r3, r3, #23
100107be:	d505      	bpl.n	100107cc <__swrite+0x1c>
100107c0:	230e      	movs	r3, #14
100107c2:	5ec9      	ldrsh	r1, [r1, r3]
100107c4:	2200      	movs	r2, #0
100107c6:	2302      	movs	r3, #2
100107c8:	f000 f874 	bl	100108b4 <_lseek_r>
100107cc:	89a2      	ldrh	r2, [r4, #12]
100107ce:	4b05      	ldr	r3, [pc, #20]	; (100107e4 <__swrite+0x34>)
100107d0:	1c28      	adds	r0, r5, #0
100107d2:	4013      	ands	r3, r2
100107d4:	81a3      	strh	r3, [r4, #12]
100107d6:	1c3a      	adds	r2, r7, #0
100107d8:	230e      	movs	r3, #14
100107da:	5ee1      	ldrsh	r1, [r4, r3]
100107dc:	1c33      	adds	r3, r6, #0
100107de:	f000 f81f 	bl	10010820 <_write_r>
100107e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100107e4:	ffffefff 	.word	0xffffefff

100107e8 <__sseek>:
100107e8:	b538      	push	{r3, r4, r5, lr}
100107ea:	1c0c      	adds	r4, r1, #0
100107ec:	250e      	movs	r5, #14
100107ee:	5f49      	ldrsh	r1, [r1, r5]
100107f0:	f000 f860 	bl	100108b4 <_lseek_r>
100107f4:	89a3      	ldrh	r3, [r4, #12]
100107f6:	1c42      	adds	r2, r0, #1
100107f8:	d103      	bne.n	10010802 <__sseek+0x1a>
100107fa:	4a05      	ldr	r2, [pc, #20]	; (10010810 <__sseek+0x28>)
100107fc:	4013      	ands	r3, r2
100107fe:	81a3      	strh	r3, [r4, #12]
10010800:	e004      	b.n	1001080c <__sseek+0x24>
10010802:	2280      	movs	r2, #128	; 0x80
10010804:	0152      	lsls	r2, r2, #5
10010806:	4313      	orrs	r3, r2
10010808:	81a3      	strh	r3, [r4, #12]
1001080a:	6560      	str	r0, [r4, #84]	; 0x54
1001080c:	bd38      	pop	{r3, r4, r5, pc}
1001080e:	46c0      	nop			; (mov r8, r8)
10010810:	ffffefff 	.word	0xffffefff

10010814 <__sclose>:
10010814:	b508      	push	{r3, lr}
10010816:	230e      	movs	r3, #14
10010818:	5ec9      	ldrsh	r1, [r1, r3]
1001081a:	f000 f815 	bl	10010848 <_close_r>
1001081e:	bd08      	pop	{r3, pc}

10010820 <_write_r>:
10010820:	b538      	push	{r3, r4, r5, lr}
10010822:	1c05      	adds	r5, r0, #0
10010824:	2000      	movs	r0, #0
10010826:	4c07      	ldr	r4, [pc, #28]	; (10010844 <_write_r+0x24>)
10010828:	6020      	str	r0, [r4, #0]
1001082a:	1c08      	adds	r0, r1, #0
1001082c:	1c11      	adds	r1, r2, #0
1001082e:	1c1a      	adds	r2, r3, #0
10010830:	f7f8 fcaa 	bl	10009188 <_write>
10010834:	1c43      	adds	r3, r0, #1
10010836:	d103      	bne.n	10010840 <_write_r+0x20>
10010838:	6823      	ldr	r3, [r4, #0]
1001083a:	2b00      	cmp	r3, #0
1001083c:	d000      	beq.n	10010840 <_write_r+0x20>
1001083e:	602b      	str	r3, [r5, #0]
10010840:	bd38      	pop	{r3, r4, r5, pc}
10010842:	46c0      	nop			; (mov r8, r8)
10010844:	100133c0 	.word	0x100133c0

10010848 <_close_r>:
10010848:	b538      	push	{r3, r4, r5, lr}
1001084a:	2300      	movs	r3, #0
1001084c:	4c06      	ldr	r4, [pc, #24]	; (10010868 <_close_r+0x20>)
1001084e:	1c05      	adds	r5, r0, #0
10010850:	1c08      	adds	r0, r1, #0
10010852:	6023      	str	r3, [r4, #0]
10010854:	f7f8 fcd2 	bl	100091fc <_close>
10010858:	1c43      	adds	r3, r0, #1
1001085a:	d103      	bne.n	10010864 <_close_r+0x1c>
1001085c:	6823      	ldr	r3, [r4, #0]
1001085e:	2b00      	cmp	r3, #0
10010860:	d000      	beq.n	10010864 <_close_r+0x1c>
10010862:	602b      	str	r3, [r5, #0]
10010864:	bd38      	pop	{r3, r4, r5, pc}
10010866:	46c0      	nop			; (mov r8, r8)
10010868:	100133c0 	.word	0x100133c0

1001086c <_fstat_r>:
1001086c:	b538      	push	{r3, r4, r5, lr}
1001086e:	2300      	movs	r3, #0
10010870:	4c06      	ldr	r4, [pc, #24]	; (1001088c <_fstat_r+0x20>)
10010872:	1c05      	adds	r5, r0, #0
10010874:	1c08      	adds	r0, r1, #0
10010876:	1c11      	adds	r1, r2, #0
10010878:	6023      	str	r3, [r4, #0]
1001087a:	f7f8 fcc3 	bl	10009204 <_fstat>
1001087e:	1c43      	adds	r3, r0, #1
10010880:	d103      	bne.n	1001088a <_fstat_r+0x1e>
10010882:	6823      	ldr	r3, [r4, #0]
10010884:	2b00      	cmp	r3, #0
10010886:	d000      	beq.n	1001088a <_fstat_r+0x1e>
10010888:	602b      	str	r3, [r5, #0]
1001088a:	bd38      	pop	{r3, r4, r5, pc}
1001088c:	100133c0 	.word	0x100133c0

10010890 <_isatty_r>:
10010890:	b538      	push	{r3, r4, r5, lr}
10010892:	2300      	movs	r3, #0
10010894:	4c06      	ldr	r4, [pc, #24]	; (100108b0 <_isatty_r+0x20>)
10010896:	1c05      	adds	r5, r0, #0
10010898:	1c08      	adds	r0, r1, #0
1001089a:	6023      	str	r3, [r4, #0]
1001089c:	f7f8 fcb8 	bl	10009210 <_isatty>
100108a0:	1c43      	adds	r3, r0, #1
100108a2:	d103      	bne.n	100108ac <_isatty_r+0x1c>
100108a4:	6823      	ldr	r3, [r4, #0]
100108a6:	2b00      	cmp	r3, #0
100108a8:	d000      	beq.n	100108ac <_isatty_r+0x1c>
100108aa:	602b      	str	r3, [r5, #0]
100108ac:	bd38      	pop	{r3, r4, r5, pc}
100108ae:	46c0      	nop			; (mov r8, r8)
100108b0:	100133c0 	.word	0x100133c0

100108b4 <_lseek_r>:
100108b4:	b538      	push	{r3, r4, r5, lr}
100108b6:	1c05      	adds	r5, r0, #0
100108b8:	2000      	movs	r0, #0
100108ba:	4c07      	ldr	r4, [pc, #28]	; (100108d8 <_lseek_r+0x24>)
100108bc:	6020      	str	r0, [r4, #0]
100108be:	1c08      	adds	r0, r1, #0
100108c0:	1c11      	adds	r1, r2, #0
100108c2:	1c1a      	adds	r2, r3, #0
100108c4:	f7f8 fca6 	bl	10009214 <_lseek>
100108c8:	1c43      	adds	r3, r0, #1
100108ca:	d103      	bne.n	100108d4 <_lseek_r+0x20>
100108cc:	6823      	ldr	r3, [r4, #0]
100108ce:	2b00      	cmp	r3, #0
100108d0:	d000      	beq.n	100108d4 <_lseek_r+0x20>
100108d2:	602b      	str	r3, [r5, #0]
100108d4:	bd38      	pop	{r3, r4, r5, pc}
100108d6:	46c0      	nop			; (mov r8, r8)
100108d8:	100133c0 	.word	0x100133c0

100108dc <memchr>:
100108dc:	b2c9      	uxtb	r1, r1
100108de:	1882      	adds	r2, r0, r2
100108e0:	4290      	cmp	r0, r2
100108e2:	d004      	beq.n	100108ee <memchr+0x12>
100108e4:	7803      	ldrb	r3, [r0, #0]
100108e6:	428b      	cmp	r3, r1
100108e8:	d002      	beq.n	100108f0 <memchr+0x14>
100108ea:	3001      	adds	r0, #1
100108ec:	e7f8      	b.n	100108e0 <memchr+0x4>
100108ee:	2000      	movs	r0, #0
100108f0:	4770      	bx	lr
	...

100108f4 <_read_r>:
100108f4:	b538      	push	{r3, r4, r5, lr}
100108f6:	1c05      	adds	r5, r0, #0
100108f8:	2000      	movs	r0, #0
100108fa:	4c07      	ldr	r4, [pc, #28]	; (10010918 <_read_r+0x24>)
100108fc:	6020      	str	r0, [r4, #0]
100108fe:	1c08      	adds	r0, r1, #0
10010900:	1c11      	adds	r1, r2, #0
10010902:	1c1a      	adds	r2, r3, #0
10010904:	f7f8 fc1e 	bl	10009144 <_read>
10010908:	1c43      	adds	r3, r0, #1
1001090a:	d103      	bne.n	10010914 <_read_r+0x20>
1001090c:	6823      	ldr	r3, [r4, #0]
1001090e:	2b00      	cmp	r3, #0
10010910:	d000      	beq.n	10010914 <_read_r+0x20>
10010912:	602b      	str	r3, [r5, #0]
10010914:	bd38      	pop	{r3, r4, r5, pc}
10010916:	46c0      	nop			; (mov r8, r8)
10010918:	100133c0 	.word	0x100133c0

1001091c <__aeabi_lmul>:
1001091c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001091e:	464f      	mov	r7, r9
10010920:	4646      	mov	r6, r8
10010922:	0405      	lsls	r5, r0, #16
10010924:	0c2d      	lsrs	r5, r5, #16
10010926:	1c2c      	adds	r4, r5, #0
10010928:	b4c0      	push	{r6, r7}
1001092a:	0417      	lsls	r7, r2, #16
1001092c:	0c16      	lsrs	r6, r2, #16
1001092e:	0c3f      	lsrs	r7, r7, #16
10010930:	4699      	mov	r9, r3
10010932:	0c03      	lsrs	r3, r0, #16
10010934:	437c      	muls	r4, r7
10010936:	4375      	muls	r5, r6
10010938:	435f      	muls	r7, r3
1001093a:	4373      	muls	r3, r6
1001093c:	197d      	adds	r5, r7, r5
1001093e:	0c26      	lsrs	r6, r4, #16
10010940:	19ad      	adds	r5, r5, r6
10010942:	469c      	mov	ip, r3
10010944:	42af      	cmp	r7, r5
10010946:	d903      	bls.n	10010950 <__aeabi_lmul+0x34>
10010948:	2380      	movs	r3, #128	; 0x80
1001094a:	025b      	lsls	r3, r3, #9
1001094c:	4698      	mov	r8, r3
1001094e:	44c4      	add	ip, r8
10010950:	464b      	mov	r3, r9
10010952:	4351      	muls	r1, r2
10010954:	4343      	muls	r3, r0
10010956:	0424      	lsls	r4, r4, #16
10010958:	0c2e      	lsrs	r6, r5, #16
1001095a:	0c24      	lsrs	r4, r4, #16
1001095c:	042d      	lsls	r5, r5, #16
1001095e:	4466      	add	r6, ip
10010960:	192c      	adds	r4, r5, r4
10010962:	1859      	adds	r1, r3, r1
10010964:	1989      	adds	r1, r1, r6
10010966:	1c20      	adds	r0, r4, #0
10010968:	bc0c      	pop	{r2, r3}
1001096a:	4690      	mov	r8, r2
1001096c:	4699      	mov	r9, r3
1001096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010970:	100084d4 	.word	0x100084d4
10010974:	100084e2 	.word	0x100084e2
10010978:	100084f0 	.word	0x100084f0
1001097c:	100084fe 	.word	0x100084fe
10010980:	1000850c 	.word	0x1000850c
10010984:	1000851a 	.word	0x1000851a
10010988:	10008528 	.word	0x10008528
1001098c:	10008538 	.word	0x10008538
10010990:	10008548 	.word	0x10008548
10010994:	10008558 	.word	0x10008558
10010998:	10008568 	.word	0x10008568
1001099c:	10008578 	.word	0x10008578
100109a0:	10008588 	.word	0x10008588
100109a4:	10008598 	.word	0x10008598
100109a8:	100085a8 	.word	0x100085a8
100109ac:	100085b8 	.word	0x100085b8
100109b0:	100085c8 	.word	0x100085c8
100109b4:	100085d8 	.word	0x100085d8
100109b8:	100085e8 	.word	0x100085e8
100109bc:	100085f8 	.word	0x100085f8
100109c0:	10008608 	.word	0x10008608
100109c4:	10008618 	.word	0x10008618
100109c8:	10008628 	.word	0x10008628
100109cc:	10008638 	.word	0x10008638
100109d0:	10008648 	.word	0x10008648
100109d4:	10008658 	.word	0x10008658
100109d8:	10008668 	.word	0x10008668
100109dc:	10008678 	.word	0x10008678
100109e0:	10008686 	.word	0x10008686
100109e4:	10008694 	.word	0x10008694
100109e8:	100086a2 	.word	0x100086a2
100109ec:	100086b0 	.word	0x100086b0
100109f0:	100086be 	.word	0x100086be
100109f4:	100086cc 	.word	0x100086cc
100109f8:	100086da 	.word	0x100086da
100109fc:	100086e8 	.word	0x100086e8
10010a00:	100086f8 	.word	0x100086f8
10010a04:	10008708 	.word	0x10008708
10010a08:	10008718 	.word	0x10008718
10010a0c:	10008728 	.word	0x10008728
10010a10:	10008738 	.word	0x10008738
10010a14:	10008748 	.word	0x10008748
10010a18:	10008758 	.word	0x10008758
10010a1c:	10008768 	.word	0x10008768
10010a20:	10008778 	.word	0x10008778
10010a24:	10008788 	.word	0x10008788
10010a28:	10008798 	.word	0x10008798
10010a2c:	100087a8 	.word	0x100087a8
10010a30:	100087b8 	.word	0x100087b8
10010a34:	100087c8 	.word	0x100087c8
10010a38:	100087d8 	.word	0x100087d8
10010a3c:	100087e8 	.word	0x100087e8
10010a40:	100087f6 	.word	0x100087f6
10010a44:	10008804 	.word	0x10008804
10010a48:	10008844 	.word	0x10008844
10010a4c:	1000886c 	.word	0x1000886c
10010a50:	10008894 	.word	0x10008894
10010a54:	100088bc 	.word	0x100088bc
10010a58:	10008afc 	.word	0x10008afc
10010a5c:	100088ec 	.word	0x100088ec
10010a60:	10008904 	.word	0x10008904
10010a64:	1000897c 	.word	0x1000897c
10010a68:	10008994 	.word	0x10008994
10010a6c:	1000891c 	.word	0x1000891c
10010a70:	10008934 	.word	0x10008934
10010a74:	1000894c 	.word	0x1000894c
10010a78:	10008964 	.word	0x10008964
10010a7c:	100089ac 	.word	0x100089ac
10010a80:	10008c70 	.word	0x10008c70
10010a84:	10008c70 	.word	0x10008c70
10010a88:	10008c70 	.word	0x10008c70
10010a8c:	10008c70 	.word	0x10008c70
10010a90:	10008c70 	.word	0x10008c70
10010a94:	10008c70 	.word	0x10008c70
10010a98:	10008c70 	.word	0x10008c70
10010a9c:	10008c70 	.word	0x10008c70
10010aa0:	10008a54 	.word	0x10008a54
10010aa4:	10008a6c 	.word	0x10008a6c
10010aa8:	10008a84 	.word	0x10008a84
10010aac:	10008b12 	.word	0x10008b12
10010ab0:	100089dc 	.word	0x100089dc
10010ab4:	10008c70 	.word	0x10008c70
10010ab8:	10008c70 	.word	0x10008c70
10010abc:	10008c70 	.word	0x10008c70
10010ac0:	10008c70 	.word	0x10008c70
10010ac4:	10008c70 	.word	0x10008c70
10010ac8:	10008c70 	.word	0x10008c70
10010acc:	10008a9c 	.word	0x10008a9c
10010ad0:	10008ab4 	.word	0x10008ab4
10010ad4:	10008acc 	.word	0x10008acc
10010ad8:	10008ae4 	.word	0x10008ae4
10010adc:	10008c70 	.word	0x10008c70
10010ae0:	10008c28 	.word	0x10008c28
10010ae4:	10008c40 	.word	0x10008c40
10010ae8:	10008c70 	.word	0x10008c70
10010aec:	10008c70 	.word	0x10008c70
10010af0:	10008b3e 	.word	0x10008b3e
10010af4:	10008b54 	.word	0x10008b54
10010af8:	10008b6a 	.word	0x10008b6a
10010afc:	10008b80 	.word	0x10008b80
10010b00:	10008c70 	.word	0x10008c70
10010b04:	10008c70 	.word	0x10008c70
10010b08:	10008c70 	.word	0x10008c70
10010b0c:	10008c70 	.word	0x10008c70
10010b10:	10008c70 	.word	0x10008c70
10010b14:	10008c70 	.word	0x10008c70
10010b18:	10008c70 	.word	0x10008c70
10010b1c:	10008c70 	.word	0x10008c70
10010b20:	10008830 	.word	0x10008830
10010b24:	10008858 	.word	0x10008858
10010b28:	10008880 	.word	0x10008880
10010b2c:	100088a8 	.word	0x100088a8
10010b30:	100088d4 	.word	0x100088d4
10010b34:	100089c4 	.word	0x100089c4
10010b38:	100089f4 	.word	0x100089f4
10010b3c:	10008a0c 	.word	0x10008a0c
10010b40:	10008a24 	.word	0x10008a24
10010b44:	10008a3c 	.word	0x10008a3c
10010b48:	10008b28 	.word	0x10008b28
10010b4c:	10008b96 	.word	0x10008b96
10010b50:	10008c10 	.word	0x10008c10
10010b54:	10008c58 	.word	0x10008c58
10010b58:	100092d8 	.word	0x100092d8
10010b5c:	100092da 	.word	0x100092da
10010b60:	100092c0 	.word	0x100092c0
10010b64:	100092c0 	.word	0x100092c0
10010b68:	100092c0 	.word	0x100092c0
10010b6c:	100092d8 	.word	0x100092d8
10010b70:	100092c0 	.word	0x100092c0
10010b74:	100092c0 	.word	0x100092c0
10010b78:	10009b36 	.word	0x10009b36
10010b7c:	10009baa 	.word	0x10009baa
10010b80:	10009b1e 	.word	0x10009b1e
10010b84:	10009bb0 	.word	0x10009bb0
10010b88:	10009b24 	.word	0x10009b24
10010b8c:	10009b2a 	.word	0x10009b2a
10010b90:	10009b30 	.word	0x10009b30
10010b94:	1000a3f4 	.word	0x1000a3f4
10010b98:	1000a3f4 	.word	0x1000a3f4
10010b9c:	1000a3f4 	.word	0x1000a3f4
10010ba0:	1000a3f4 	.word	0x1000a3f4
10010ba4:	1000a3f4 	.word	0x1000a3f4
10010ba8:	1000a3f4 	.word	0x1000a3f4
10010bac:	1000a3f4 	.word	0x1000a3f4
10010bb0:	1000a3f4 	.word	0x1000a3f4
10010bb4:	1000a3f4 	.word	0x1000a3f4
10010bb8:	1000a3f4 	.word	0x1000a3f4
10010bbc:	1000a3f4 	.word	0x1000a3f4
10010bc0:	1000a3f4 	.word	0x1000a3f4
10010bc4:	1000a3f4 	.word	0x1000a3f4
10010bc8:	1000a3f4 	.word	0x1000a3f4
10010bcc:	1000a3f4 	.word	0x1000a3f4
10010bd0:	1000a3f4 	.word	0x1000a3f4
10010bd4:	1000a3f4 	.word	0x1000a3f4
10010bd8:	1000a3f4 	.word	0x1000a3f4
10010bdc:	1000a3f4 	.word	0x1000a3f4
10010be0:	1000a412 	.word	0x1000a412
10010be4:	1000a412 	.word	0x1000a412
10010be8:	1000a412 	.word	0x1000a412
10010bec:	1000a412 	.word	0x1000a412
10010bf0:	1000a412 	.word	0x1000a412
10010bf4:	1000a412 	.word	0x1000a412
10010bf8:	1000a412 	.word	0x1000a412
10010bfc:	1000a412 	.word	0x1000a412
10010c00:	1000a412 	.word	0x1000a412
10010c04:	1000a412 	.word	0x1000a412
10010c08:	1000a434 	.word	0x1000a434
10010c0c:	1000a434 	.word	0x1000a434
10010c10:	1000a434 	.word	0x1000a434
10010c14:	1000a434 	.word	0x1000a434
10010c18:	1000a434 	.word	0x1000a434
10010c1c:	1000a434 	.word	0x1000a434
10010c20:	1000a434 	.word	0x1000a434
10010c24:	1000a434 	.word	0x1000a434
10010c28:	1000a434 	.word	0x1000a434
10010c2c:	1000a434 	.word	0x1000a434
10010c30:	1000a456 	.word	0x1000a456
10010c34:	1000a456 	.word	0x1000a456
10010c38:	1000a456 	.word	0x1000a456
10010c3c:	1000a456 	.word	0x1000a456
10010c40:	1000a456 	.word	0x1000a456
10010c44:	1000a456 	.word	0x1000a456
10010c48:	1000a470 	.word	0x1000a470
10010c4c:	1000a470 	.word	0x1000a470
10010c50:	1000a470 	.word	0x1000a470
10010c54:	1000a470 	.word	0x1000a470
10010c58:	1000a470 	.word	0x1000a470
10010c5c:	1000a470 	.word	0x1000a470
10010c60:	1000a470 	.word	0x1000a470
10010c64:	1000a470 	.word	0x1000a470
10010c68:	1000a470 	.word	0x1000a470
10010c6c:	1000a48a 	.word	0x1000a48a
10010c70:	1000a48a 	.word	0x1000a48a
10010c74:	1000a4ac 	.word	0x1000a4ac
10010c78:	1000a4ac 	.word	0x1000a4ac
10010c7c:	1000a4c6 	.word	0x1000a4c6
10010c80:	1000a4ac 	.word	0x1000a4ac
10010c84:	34333231 	.word	0x34333231
10010c88:	00003635 	.word	0x00003635
10010c8c:	efcdab00 	.word	0xefcdab00
10010c90:	00efcdab 	.word	0x00efcdab
10010c94:	b2d60600 	.word	0xb2d60600
10010c98:	f8f005f0 	.word	0xf8f005f0
10010c9c:	00000000 	.word	0x00000000

10010ca0 <ble_mgr_gatt_server_handle>:
	...
10010cb8:	1000921d 10009259 10009221 00000000     ....Y...!.......
10010cc8:	0000000d 6e616353 676e696e 61662020     ....Scanning  fa
10010cd8:	64656c69 00000000 2055544d 6e616843     iled....MTU Chan
10010ce8:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10010cf8:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10010d08:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10010d18:	69766544 64206563 6f637369 63656e6e     Device disconnec
10010d28:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10010d38:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10010d48:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10010d58:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10010d68:	6c706d6f 64657465 63757320 73736563     ompleted success
10010d78:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10010d88:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10010d98:	74707972 206e6f69 6f666e69 00000000     ryption info....
10010da8:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10010db8:	7320666f 206e6163 69766564 72206563     of scan device r
10010dc8:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10010dd8:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10010de8:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10010df8:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10010e08:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10010e18:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10010e28:	46207473 656c6961 00000064 72696150     st Failed...Pair
10010e38:	20676e69 636f7270 72756465 6f632065     ing procedure co
10010e48:	656c706d 20646574 63637573 66737365     mpleted successf
10010e58:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10010e68:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10010e78:	726f7473 68742065 61702065 6e697269     store the pairin
10010e88:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10010e98:	4e206e6f 7320746f 74726174 00006465     on Not started..
10010ea8:	76616c53 65532065 69727563 52207974     Slave Security R
10010eb8:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10010ec8:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10010ed8:	71655220 74736575 41202d20 65687475      Request - Authe
10010ee8:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10010ef8:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10010f08:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10010f18:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10010f28:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10010f38:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10010f48:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10010f58:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10010f68:	206e6f28 6568746f 65442072 65636976     (on other Device
10010f78:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10010f88:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10010f98:	74616546 20657275 20746f4e 70707573     Feature Not supp
10010fa8:	6574726f 00000064 65746e45 20646572     orted...Entered 
10010fb8:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10010fc8:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10010fd8:	7020666f 20726565 69766564 69206563     of peer device i
10010fe8:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10010ff8:	00000000 61656c50 75206573 6961706e     ....Please unpai
10011008:	68742072 65642065 65636976 6f726620     r the device fro
10011018:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10011028:	656c6962 65732029 6e697474 6d207367     bile) settings m
10011038:	20756e65 20646e61 72617473 61702074     enu and start pa
10011048:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10011058:	69747079 52206e6f 65757165 52207473     yption Request R
10011068:	796c7065 69614620 0064656c 74696e49     eply Failed.Init
10011078:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
10011088:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
10011098:	6f697461 6166206e 64656c69 00000000     ation failed....
100110a8:	61656c50 63206573 6b636568 65687420     Please check the
100110b8:	776f7020 61207265 6320646e 656e6e6f      power and conne
100110c8:	6f697463 202f206e 64726168 65726177     ction / hardware
100110d8:	6e6f6320 7463656e 0000726f 454d5441      connector..ATME
100110e8:	4c422d4c 00000045 69766544 6e206563     L-BLE...Device n
100110f8:	20656d61 20746573 6c696166 00006465     ame set failed..
10011108:	61204442 65726464 67207373 66207465     BD address get f
10011118:	656c6961 00000064 41204442 65726464     ailed...BD Addre
10011128:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
10011138:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
10011148:	65726464 54207373 3a657079 00006425     ddress Type:%d..
10011158:	20746553 20454c42 69766544 63206563     Set BLE Device c
10011168:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10011178:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
10011188:	41206563 65726464 66207373 656c6961     ce Address faile
10011198:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
100111a8:	7361656c 61772065 2e2e7469 0000002e     lease wait......
100111b8:	76616c53 65732065 69727563 72207974     Slave security r
100111c8:	65757165 66207473 656c6961 00000064     equest failed...
100111d8:	6e6e6f43 65746365 6f742064 65657020     Connected to pee
100111e8:	65642072 65636976 74697720 64612068     r device with ad
100111f8:	73657264 78302073 78323025 78323025     dress 0x%02x%02x
10011208:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
10011218:	00000000 6e6e6f43 69746365 48206e6f     ....Connection H
10011228:	6c646e61 64252065 00000000 6f736552     andle %d....Reso
10011238:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10011248:	73736572 69616620 2a64656c 0000002a     ress failed**...
10011258:	2078614d 626d756e 6f207265 6f632066     Max number of co
10011268:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10011278:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10011288:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10011298:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
100112a8:	64656c69 53202d20 75746174 25203a73     iled - Status: %
100112b8:	00000064 20454c42 65766441 73697472     d...BLE Advertis
100112c8:	6e656d65 61642074 73206174 66207465     ement data set f
100112d8:	656c6961 00000064                       ailed...

100112e0 <ble_mgr_gap_handle>:
100112e0:	10009219 100093cd 10009231 00000000     ........1.......
100112f0:	00000000 1000a029 10009289 1000922d     ....).......-...
10011300:	10009565 1000944d 10009769 1000957d     e...M...i...}...
10011310:	100098bd 10009a1d 10009311 1000a261     ............a...
	...
1001132c:	656d6954 74203272 67676972 0a0d7265     Timer2 trigger..
1001133c:	00000000                                ....

10011340 <perception_gap_cb>:
	...
10011348:	1000b58d 00000000 00000000 1000b781     ................
10011358:	1000b4d5 00000000 00000000 1000b04d     ............M...
	...
10011378:	1000b04d 00000000 00000000 00000000     M...............
10011388:	00000000 52494150 3f3f4445 4b4f203f     ....PAIRED??? OK
10011398:	45485420 0000004e 63726550 69747065      THEN...Percepti
100113a8:	73206e6f 69767265 64206563 6f637369     on service disco
100113b8:	65726576 00000064 4e4e4f43 49544345     vered...CONNECTI
100113c8:	4c204e4f 0054534f 63726550 69747065     ON LOST.Percepti
100113d8:	43206e6f 61726168 72657463 69747369     on Characteristi
100113e8:	69442063 766f6373 20797265 6c696146     c Discovery Fail
100113f8:	203a6465 78323025 00000000 63726550     ed: %02x....Perc
10011408:	69747065 53206e6f 69767265 4e206563     eption Service N
10011418:	4620746f 646e756f 00000000 43524550     ot Found....PERC
10011428:	49545045 50204e4f 49464f52 4e20454c     EPTION PROFILE N
10011438:	5320544f 4f505055 44455452 00000000     OT SUPPORTED....
10011448:	656c6553 5b207463 74205d72 6552206f     Select [r] to Re
10011458:	6e6e6f63 20746365 5b20726f 53205d73     connect or [s] S
10011468:	006e6163 63726550 69747065 52206e6f     can.Perception R
10011478:	6f432d65 63656e6e 65722074 73657571     e-Connect reques
10011488:	65732074 0000746e 63726550 69747065     t sent..Percepti
10011498:	52206e6f 6f432d65 63656e6e 65722074     on Re-Connect re
100114a8:	73657571 65732074 6620646e 656c6961     quest send faile
100114b8:	00000064 63726550 69747065 43206e6f     d...Perception C
100114c8:	656e6e6f 72207463 65757165 73207473     onnect request s
100114d8:	00746e65 63726550 69747065 43206e6f     ent.Perception C
100114e8:	656e6e6f 72207463 65757165 73207473     onnect request s
100114f8:	20646e65 6c696166 00006465 6f666e49     end failed..Info
10011508:	6544203a 65636976 756f6620 6120646e     : Device found a
10011518:	65726464 5b207373 205d6425 25783020     ddress [%d]  0x%
10011528:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10011538:	25583230 20583230 00000000 502d2d2d     02X%02X ....---P
10011548:	65637265 6f697470 0000006e 63726550     erception...Perc
10011558:	69747065 73206e6f 6f707075 64657472     eption supported
10011568:	76656420 20656369 20746f6e 6e756f66      device not foun
10011578:	00002064 656c6553 49207463 7865646e     d ..Select Index
10011588:	6d756e20 20726562 43206f74 656e6e6f      number to Conne
10011598:	6f207463 735b2072 6f74205d 61637320     ct or [s] to sca
100115a8:	0000006e 656c6553 5b207463 74205d73     n...Select [s] t
100115b8:	6373206f 61206e61 6e696167 00000000     o scan again....
100115c8:	54544147 73694420 65766f63 72207972     GATT Discovery r
100115d8:	65757165 66207473 656c6961 00000064     equest failed...
100115e8:	74696e49 696c6169 676e697a 72655020     Initializing Per
100115f8:	74706563 206e6f69 6c707041 74616369     ception Applicat
10011608:	006e6f69 6e616353 72617020 74656d61     ion.Scan paramet
10011618:	20737265 20657261 61766e69 0064696c     ers are invalid.
10011628:	6e616353 676e696e 69614620 2064656c     Scanning Failed 
10011638:	656e6547 20636972 6f727265 00000072     Generic error...
10011648:	6e6e6f43 69746365 54206e6f 6f656d69     Connection Timeo
10011658:	00007475 62616e55 7420656c 6f63206f     ut..Unable to co
10011668:	63656e6e 69772074 64206874 63697665     nnect with devic
10011678:	00000065 65626956 746f4d20 3120726f     e...Vibe Motor 1
10011688:	61684320 74636172 73697265 20636974      Characteristic 
10011698:	64616552 71655220 74736575 69614620     Read Request Fai
100116a8:	0064656c 65626956 746f4d20 3220726f     led.Vibe Motor 2
100116b8:	61684320 74636172 73697265 20636974      Characteristic 
100116c8:	64616552 71655220 74736575 69614620     Read Request Fai
100116d8:	0064656c 65626956 746f4d20 3320726f     led.Vibe Motor 3
100116e8:	61684320 74636172 73697265 20636974      Characteristic 
100116f8:	64616552 71655220 74736575 69614620     Read Request Fai
10011708:	0064656c 65626956 746f4d20 3420726f     led.Vibe Motor 4
10011718:	61684320 74636172 73697265 20636974      Characteristic 
10011728:	64616552 71655220 74736575 69614620     Read Request Fai
10011738:	0064656c                                led.

1001173c <perception_gatt_client_cb>:
1001173c:	1000b10d 00000000 1000b071 00000000     ........q.......
1001174c:	1000b2f9 1000b17d 00000000 00000000     ....}...........
	...
10011764:	656d7441 6f43206c 002e7072                       Atmel Corp.

1001176f <CSWTCH.51>:
1001176f:	03010300 03030303 03030303 00020303     ................
1001177f:	00e97400 00e95210 00e95210 00e94610     .t...R...R...F..
1001178f:	00e83a10 00e83a10 00e93a10 00e94610     .:...:...:...F..
1001179f:	00e83a10 00e93a10 00e83a10 00e94610     .:...:...:...F..
100117af:	00e83e10 00e83e10 00e83e10 00eb5410     .>...>...>...T..
100117bf:	00004310 0118a400                                .C...

100117c4 <_global_impure_ptr>:
100117c4:	100118a4                                ....

100117c8 <__sf_fake_stdin>:
	...

100117e8 <__sf_fake_stdout>:
	...

10011808 <__sf_fake_stderr>:
	...
10011828:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10011838:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10011848:	31300046 35343332 39383736 64636261     F.0123456789abcd
10011858:	00006665                                ef..

1001185c <_init>:
1001185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001185e:	46c0      	nop			; (mov r8, r8)
10011860:	bcf8      	pop	{r3, r4, r5, r6, r7}
10011862:	bc08      	pop	{r3}
10011864:	469e      	mov	lr, r3
10011866:	4770      	bx	lr

10011868 <__init_array_start>:
10011868:	100080b1 	.word	0x100080b1

1001186c <_fini>:
1001186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001186e:	46c0      	nop			; (mov r8, r8)
10011870:	bcf8      	pop	{r3, r4, r5, r6, r7}
10011872:	bc08      	pop	{r3}
10011874:	469e      	mov	lr, r3
10011876:	4770      	bx	lr

10011878 <__fini_array_start>:
10011878:	10008089 	.word	0x10008089
